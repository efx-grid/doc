Pandora.book._.searchIndex = [{"title":"Grid Usage Guide","filename":"index.html","contents":[{"text":"Grid has been created mainly to handle a large number of rows. It achieves high performance by utilizing a row virtualization technique, and all of the display logics and layouts are calculated programmatically. So, it lacks the flexibility of managing the layout when compared to the native table. Grid can be viewed to have 3 layers of controls. The outer layer is EFX Grid, which provides high level configuration through HTML properties and attributes. The middle layer is API instance, which provides most runtime interactions through JavaScript methods. The inner layer is Core Grid, which provides internal interaction with UI elements. ","tagName":"p"},{"text":"native table","tagName":"a"},{"text":"EFX Grid","tagName":"h2"},{"text":"EFX Grid is a custom element, providing simple ways to display and manipulate data in table layout. All HTML native properties and events are available in EFX Grid. It can be easily created by just writing the tag and setting the configuration as shown below:","tagName":"p"},{"text":"custom element","tagName":"a"},{"text":"<body>\n    <efx-grid></efx-grid>\n\n    <script>\n        var grid = document.getElementsByTagName(\"efx-grid\")[0];\n        grid.config = {\n            /* See the API Doc for all available options */\n        };\n    </script>\n</body>","tagName":"pre"},{"text":"For more available properties in EFX Grid element, see this page.","tagName":"p"},{"text":"this page","tagName":"a"},{"text":"Grid APIs","tagName":"h2"},{"text":"api property from the grid element represents JavaScript-based Grid instance. The api property is an access point for all Grid APIs and for making change at runtime. The api property will be available only after the config is set and initialized. Put the code inside whenDefined callback, if you want to access the api property after the initialization process as shown below:","tagName":"p"},{"text":"var grid = document.getElementsByTagName(\"efx-grid\")[0];\ngrid.config = {\n    whenDefined: function(e) {\n        console.log(\"config is set and applied\");\n        var element = e.element;\n        var dv = e.api.getDataView();\n    }\n};\nconsole.log(grid.api); // api instance will not be available immediately after configuration is set.","tagName":"pre"},{"text":"The document for the API instance can be found in the Grid APIs page.","tagName":"p"},{"text":"Grid APIs page","tagName":"a"},{"text":"Core Grid","tagName":"h2"},{"text":"As Grid grows in complexity, Core Grid is created to maintain and manage UIs for table and data display. It contains mostly low-level APIs. Any advanced features and user interactions have been moved out to the API instance and Grid extensions. In some specific cases, you may want to access Core Grid, such as managing scrollbars. To get Core Grid instance, use getCoreGrid() method from the api property as shown below:","tagName":"p"},{"text":"var grid = document.getElementsByTagName(\"efx-grid\")[0];\ngrid.config = {\n    whenDefined: function(e) {\n        var core = e.api.getCoreGrid();\n        var section = core.getSection(\"content\");\n    }\n};","tagName":"pre"},{"text":"The document for the Core Grid can be found in the Core APIs page.","tagName":"p"},{"text":"Core APIs page","tagName":"a"},{"text":"Example","tagName":"h2"},{"text":"<efx-grid id=\"grid\">\n\n</efx-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"date1\", \"industry\"];\nvar records = DataGenerator.generateRecords(fields, { numRows: 200 });\nvar configObj = {\n  freezeColumn: 0,\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 300 },\n    { title: \"Market\", field: fields[1], width: 150 },\n    { title: \"Last\", field: fields[2], width: 120 },\n    {\n      title: \"Pct. Chng\",\n      field: fields[3],\n      width: 200,\n      formatter: PercentBarFormatter.create({\n        textHidden: true\n      })\n    },\n    { title: \"IPO Date\", field: fields[4], width: 180, alignment: \"center\", formatType: \"dateTime\" },\n    { title: \"Industry\", field: fields[5], width: 250 }\n  ],\n  staticDataRows: records,\n  extensions: [new TextFormattingExtension()]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"efx-grid {\n  height: 300px;\n}","tagName":"pre"},{"text":"License for the Halo Theme","tagName":"h2"},{"text":"The font “Proxima Nova Fin” shall only be used within Refinitiv products or services. The copyright owner must approve any use of such font outside of Refinitiv products or services, which may be subject to a fee. Please see the license here.","tagName":"p"},{"text":"the license here","tagName":"a"}]},{"title":"Basic Grid Creation","filename":"general_concept/basic.html","contents":[{"text":"To initialize Grid you can put the element tag on the HTML page, just like any other native element. The element works as if it were a div element (that is, an element with 100% width and the same height as its content). ","tagName":"p"},{"text":"<efx-grid></efx-grid>","tagName":"pre"},{"text":"Or you can dynamically create the element at runtime by using a standard native method like document.createElement(\"efx-grid\").","tagName":"p"},{"text":"var grid = document.createElement(\"efx-grid\");\n\ndocument.body.appendChild(grid);","tagName":"pre"},{"text":"The element is used for positioning and sizing the grid in the document. Anything else should be done by passing a configuration object to the grid. ","tagName":"p"},{"text":"See all available configuration options for efx-grid here","tagName":"p"},{"text":"efx-grid here","tagName":"a"},{"text":"To define how the grid renders its layout and content use the columns property, as shown below:","tagName":"p"},{"text":"var configObj = {\n    columns: [\n        {title: \"Header Text\", field: \"For Mapping Data\"},\n        {title: \"Column 2\", field: \"Field 2\"}\n    ] // Two columns will be shown\n};","tagName":"pre"},{"text":"To define initial or static data for rendering use the staticDataRows property, as shown below:","tagName":"p"},{"text":"var configObj = {\n    staticDataRows: [\n        {\"Field 1\": \"a\", \"Field 2\": \"b\", \"Field 3\": \"c\"},\n        {\"ABC\": \"d\", \"Field 2\": \"e\", \"XYZ\": \"f\"}\n    ] // Two rows will be shown\n};","tagName":"pre"},{"text":"Each column definition should have a link to the data through the field property for rendering. Doing it this way separates the UI from the data. The data can have any number of fields, regardless of the actual number of columns being displayed in the grid. This means extra information can be stored, such as row metadata, display states, and so on. The same field can also be used to display multiple columns. ","tagName":"p"},{"text":"The basic Grid configuration object is usually something like the following: ","tagName":"p"},{"text":"var fields = [\"intCol\", \"strCol\", \"floatCol\", \"dateCol\"];\nvar records = [\n    {\"intCol\": 1, \"strCol\": \"Sample data\", \"floatCol\": 1.1, \"dateCol\": new Date(\"2014-10-01\")},\n    {\"intCol\": 2, \"strCol\": \"Sample data\", \"floatCol\": 2.2, \"dateCol\": new Date(\"2014-10-02\")},\n    {\"intCol\": 3, \"strCol\": \"Sample data\", \"floatCol\": 3.3, \"dateCol\": new Date(\"2014-10-03\")},\n    {\"intCol\": 4, \"strCol\": \"Sample data\", \"floatCol\": 4.4, \"dateCol\": new Date(\"2014-10-04\")},\n    {\"intCol\": 5, \"strCol\": \"Sample data\", \"floatCol\": 5.5, \"dateCol\": new Date(\"2014-10-05\")}\n];\nvar configObj = {\n    rowHighlight: true, // Grid level option\n    columns: [\n        {title: \"Column 1\", field: fields[0]},\n        {title: \"Column 2\", field: fields[1]},\n        {title: \"Column 3\", field: fields[2]},\n        {title: \"Column 4\", field: fields[3]}\n    ],\n    staticDataRows: records\n};","tagName":"pre"},{"text":"For further change at runtime, it is recommended to use Grid's APIs through api property instead of changing config property. Changing config property will result in re-creation of the entire grid and could impact the performance. ","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"Note: you can see JavaScript details from the live example below by clicking the lower right button.","tagName":"p"},{"text":"<atlas-blotter id=\"grid\"></atlas-blotter>","tagName":"pre"},{"text":"var fields = [\"intCol\", \"strCol\", \"floatCol\", \"dateCol\"];\nvar records = [\n  { \"intCol\": 1, \"strCol\": \"Sample data\", \"floatCol\": 1.1, \"dateCol\": new Date(\"2014-10-01\") },\n  { \"intCol\": 2, \"strCol\": \"Sample data\", \"floatCol\": 2.2, \"dateCol\": new Date(\"2014-10-02\") },\n  { \"intCol\": 3, \"strCol\": \"Sample data\", \"floatCol\": 3.3, \"dateCol\": new Date(\"2014-10-03\") },\n  { \"intCol\": 4, \"strCol\": \"Sample data\", \"floatCol\": 4.4, \"dateCol\": new Date(\"2014-10-04\") },\n  { \"intCol\": 5, \"strCol\": \"Sample data\", \"floatCol\": 5.5, \"dateCol\": new Date(\"2014-10-05\") }\n];\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Column 1\", field: fields[0] },\n    { title: \"Column 2\", field: fields[1] },\n    { title: \"Column 3\", field: fields[2] },\n    { title: \"Column 4\", field: fields[3] }\n  ],\n  staticDataRows: records\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"}]},{"title":"Initializing Data","filename":"general_concept/initializing-data.html","contents":[{"text":"Grid accepts various data formats for initializing data. Note that Grid has its own internal data structure and its own data table for performing various kinds of data transformations and operations. The formats are ways to help you initially pass the data to Grid's internal data table. ","tagName":"p"},{"text":"Once the data is passed through the grid, the data in the configuration object will no longer have an effect on Grid's internal data. Do not try to modify the data from the configuration once the data applied. There is no two-way binding or property observer in the native JSON object. To modify and access the data, you must use Grid's APIs. This provides better overall performance for data manipulation. ","tagName":"p"},{"text":"Data in Grid can be initialized in rows or arrays format. Data will be defined through staticDataRows property. Grid will automatically detect the types from the given data.","tagName":"p"},{"text":"Data format – rows","tagName":"h2"},{"text":"The rows format is an array of an object map. This is a data structure recommended for general use cases. The data object can contain any number of fields. Fields are not required for this format.","tagName":"p"},{"text":"var configObj = {\n    //...\n    staticDataRows: [\n        {\"Field 1\": 1, \"Field 2\": 2}, // First row\n        {\"Field 1\": 3, \"Field 2\": 4}, // Second row\n        //...\n    ],\n    //...\n};","tagName":"pre"},{"text":"Array of object example","tagName":"h2"},{"text":"<atlas-blotter></atlas-blotter>","tagName":"pre"},{"text":"var fields = [\"f1\", \"f2\", \"f3\", \"f4\"];\nvar configObj = {\n  columns: [\n    { title: \"Column 1\", field: fields[0] },\n    { title: \"Column 2\", field: fields[1] },\n    { title: \"Column 3\", field: fields[2] },\n    { title: \"Column 4\", field: fields[3] }\n  ],\n  staticDataRows: [\n    { f1: 1, f2: 2, f3: 3, f4: \"Some String\" },\n    { f1: 1, f4: \"Some String\" }, // There is no need to have the same field each row\n    { f1: 1, f2: 2, f3: 3, f4: \"Some String\", f5: \"Extra Field Can be Added\" },\n    { f1: 1, f2: 2, f3: 3, f4: \"Some String\" },\n    { f1: 1, f2: 2, f3: 3, f4: \"Some String\" },\n    { f1: 1, f2: 2, f3: 3, f4: \"Some String\" }\n  ]\n};\nvar grid = document.getElementsByTagName(\"atlas-blotter\")[0];\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Data format – array","tagName":"h2"},{"text":"Use the array format if you want to specify the initial data in a two-dimensional array format. This format is the shortest way to write, and makes it easier to populate the data from the code. Grid will map the data to the the field property of the column configuration objects with order corresponding to the column order.","tagName":"p"},{"text":"var configObj2 = {\n    //...\n    columns: [\n        { field: \"Field 1\" },\n        { field: \"Field 2\" },\n        // ...\n    ],\n    //...\n    staticDataRows: [\n        [1, 2], // Fields will be taken from column configuration\n        [3, 4],\n        //...\n    ],\n    //...\n};","tagName":"pre"},{"text":"2D data example","tagName":"h2"},{"text":"<atlas-blotter></atlas-blotter>","tagName":"pre"},{"text":"var fields = [\"f1\", \"f2\", \"f3\", \"f4\"];\nvar configObj = {\n  columns: [\n    { title: \"Column 1\", field: fields[0] },\n    { title: \"Column 2\", field: fields[1] },\n    { title: \"Column 3\", field: fields[2] },\n    { title: \"Column 4\", field: fields[3] }\n  ],\n  staticDataRows: [\n    [1, 2, 3, \"Some String\"],\n    [1, 2, 3, \"Some String\"],\n    [1, 2, 3, \"Some String\"],\n    [1, 2, 3, \"Some String\"],\n    [1, 2, 3, \"Some String\"]\n  ]\n};\nvar grid = document.getElementsByTagName(\"atlas-blotter\")[0];\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Static data can also be defined in values property in the row configuration object. This is useful when we want to merge real-time data with the static data. ","tagName":"p"},{"text":"var configObj = {\n    //...\n    rows: [\n        { ric: \"ABC\", values: {\"Field 1\": 1, \"Field 2\": 2}},\n        { ric: \"ABC\", values: {\"Field 1\": 3, \"Field 2\": 4}},\n    ],\n    //...\n};","tagName":"pre"}]},{"title":"Event Listeners","filename":"general_concept/event-listeners.html","contents":[{"text":"Since Grid is element, you can directly listen for events from it. It's recommended to listen for native events and then use the getRelativePosition() method to resolve which cell, area, or position are the target of the event. This is because Grid does not render every cell, and the cells are being reused across different rows. So it's important to resolve the position inside the event handler (such as, runtime resolving). You can use any native event and resolve the position by using the getRelativePosition() method.","tagName":"p"},{"text":"Click","tagName":"h2"},{"text":"For example, if you want to do something on the click event you could do the following:","tagName":"p"},{"text":"var grid = document.getElementById('grid_id');\n\ngrid.addEventListener(\"click\", function(e){ // Notice that api property is not required here\n    var pos = grid.api.getRelativePosition(e); // Resolve the position at run-time\n\n    console.log(pos.sectionType, pos.colIndex, pos.rowIndex); // pos object contains a lot of information\n});","tagName":"pre"},{"text":"Right click","tagName":"h2"},{"text":"var grid = document.getElementById('grid_id');\n\ngrid.addEventListener(\"contextmenu\", function(e){ // Notice that api property is not required here\n    var pos = grid.api.getRelativePosition(e);\n\n    console.log(pos.sectionType, pos.colIndex, pos.rowIndex);\n});","tagName":"pre"},{"text":"Mouse move","tagName":"h2"},{"text":"var grid = document.getElementById('grid_id');\n\ngrid.addEventListener(\"mousemove\", function(e){ // Notice that api property is not required here\n    var pos = grid.api.getRelativePosition(e);\n\n    console.log(pos.sectionType, pos.colIndex, pos.rowIndex);\n});","tagName":"pre"},{"text":"Note: Grid internally divides itself into several sections. The top section is called title and the lower part is called content. So the sectionType from the position object can be one of the following values: title, content, footer.","tagName":"p"}]},{"title":"Adding TypeScript","filename":"general_concept/typescript.html","contents":[{"text":"TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.","tagName":"p"},{"text":"TypeScript","tagName":"a"},{"text":"To apply Typescript for EFX Grid, first you are required to install @grid/all-components in your project.","tagName":"p"},{"text":"npm install @grid/all-components --save","tagName":"pre"},{"text":"Next, rename any file to be a TypeScript file (for example, src/index.js to src/index.tsx) and restart your development server.","tagName":"p"},{"text":"Then, use the named import RealtimeGrid with your file. Please note that RealtimeGrid is an engine that runs within efx-grid.","tagName":"p"},{"text":"import { RealtimeGrid, ColumnDefinition } from '@grid/all-components/types';","tagName":"pre"},{"text":"To define how the grid renders its layout and content, use the column propertires as shown below:","tagName":"p"},{"text":"let columns: ColumnDefinition.Options[] = [\n    { id: \"Header Text\", field: \"For Mapping Data\" },\n    // ... columns data\n];","tagName":"pre"},{"text":"To define a configuration object, define it as shown below:","tagName":"p"},{"text":"let configObj: RealtimeGrid.GridOptions = {\n    // ... other options\n    columns: columns,\n};","tagName":"pre"},{"text":"To access Grid's API, you can declare as shown below:","tagName":"p"},{"text":"import { RealtimeGrid, ColumnDefinition, CoreGrid, DataView } from '@grid/all-components/types';\n\nlet grid = document.getElementsByTagName(\"efx-grid\")[0];\ngrid.config = {\n    whenDefined: function() {\n        let api: RealtimeGrid = grid.api as RealtimeGrid;\n        let core: CoreGrid = api.getCoreGrid();\n        let dv: DataView = e.api.getDataView();\n        // Do something with grid with api...\n    }\n} as RealtimeGrid.GridOptions;","tagName":"pre"},{"text":"Grid's extensions configuration are exposed out-of-the-box.","tagName":"p"},{"text":"import { ZoomExtension } from '@grid/all-components';\n\nlet configObj: RealtimeGrid.GridOptions = {\n    // ... other options\n    zoom: {\n        // ... zoom extension properties are compatible\n    },\n    extensions: [new ZoomExtension()]\n};","tagName":"pre"},{"text":"For a complete list of APIs, please see the API document.","tagName":"p"},{"text":"API document","tagName":"a"}]},{"title":"Disposing Grid","filename":"general_concept/disposing-grid.html","contents":[{"text":"Grid holds a lot of resources and event listeners. Removing Grid from a document may not enough to clear all references to Grid, and thus memory occupied by Grid cannot be collected by the browser's garbage collector. If Grid is created and removed multiple times without refreshing the page, it could cause huge memory leak. It is very important to properly dispose existing Grid before creating a new instance of Grid.","tagName":"p"},{"text":"To dispose grid, you can set config property to null as shown below:","tagName":"p"},{"text":"var grid = document.getElementById('grid_id');\ngrid.config = null; // Clear all resources held by Grid","tagName":"pre"},{"text":"Note: after setting config to null, the element is still intact and in the same place in the document. You can then choose either creating a new grid with a new configuration or completely removing grid from the document.","tagName":"p"},{"text":"Replacing Grid","tagName":"h2"},{"text":"If you want to replace existing grid with a new one with the new configuration, setting config property to null is unnecessary. All existing resources held by Grid are still removed after the replacing.","tagName":"p"},{"text":"var grid = document.getElementById('grid_id');\ngrid.config = { // New configuration\n    // ...\n};","tagName":"pre"},{"text":"Removing Grid from the document","tagName":"h2"},{"text":"If you intent not to use Grid anymore, then setting config property to null is required to prevent memory leak. Once config is set to null, you can remove the element like usual. ","tagName":"p"},{"text":"var grid = document.getElementById('grid_id');\ngrid.config = null;\ngrid.parentNode.removeChild(grid);","tagName":"pre"},{"text":"Temporary removing grid from the document is also an option, if you intent to reuse the same grid. Setting config property to null is not always necessary. It depends on the use cases in your application.","tagName":"p"},{"text":"grid = document.getElementById('grid_id');\n// Temporarily remove grid from the document while keeping the configuration\ngrid.parentNode.removeChild(grid); \n\n// ...\n// Some time later...\n// ...\n\ndocument.body.appendChild(grid); // Restore the same grid ","tagName":"pre"}]},{"title":"Comprehensive","filename":"showcases/comprehensive.html","contents":[{"text":"<div>\n  <span>\n    <coral-button id=\"select_column_btn\">Select Columns</coral-button>\n    Data Size:\n    <coral-select id=\"dataSize\">\n      <coral-item value=\"10\">10 Rows</coral-item>\n      <coral-item value=\"100\" selected>100 Rows</coral-item>\n      <coral-item value=\"1000\">1,000 Rows</coral-item>\n      <coral-item value=\"10000\">10,000 Rows</coral-item>\n      <coral-item value=\"100000\">100,000 Rows</coral-item>\n    </coral-select>\n  </span>\n  <span>\n    <label for=\"search_input\">Filter: </label>\n    <input id=\"search_input\" type=\"search\" placeholder=\"Filter any column\">\n  </span>\n</div>\n<div id=\"grouping\">\n  <coral-select id=\"column_grouping_selector\" placeholder=\"Group By\"></coral-select>\n</div>\n<atlas-blotter id=\"preview\"></atlas-blotter>","tagName":"pre"},{"text":"var grid = document.getElementsByTagName(\"atlas-blotter\")[0];\nvar dataSizeSelect = document.getElementById(\"dataSize\");\nvar selectColumnBtn = document.getElementById(\"select_column_btn\");\n\n// Extensions\nvar checkboxExt = new tr.CheckboxExtension();\nvar rowGroupingExt = new tr.RowGroupingExtension();\nvar conditionalColoringExt = new tr.ConditionalColoringExtension();\nvar columnGroupingExt = new tr.ColumnGroupingExtension();\nvar cellSelectionExt = new tr.CellSelectionExtension();\nvar filterInputExt = new tr.FilterInputExtension();\nvar columnResizingExt = new tr.ColumnResizingExtension();\nvar textFormattingExt = new tr.TextFormattingExtension();\nvar heatMapExt = new tr.HeatMapExtension();\nvar inCellEditingExt = new tr.InCellEditingExtension();\nvar percentBarExt = new tr.PercentBarExtension();\nvar filterExt = new tr.RowFilteringExtension();\nvar rowColoring = new tr.RowColoringExtension();\nvar contextMenuExt = new tr.ContextMenuExtension();\nvar columnFitterExt = new tr.ColumnFitterExtension();\n\nvar userList = [\n  \"Amanda Herrera\",\n  \"Josh Robertson\",\n  \"Abbie Parker\",\n  \"Christopher Washington\",\n  \"Casey Alvarez\",\n  \"Joshua Castillo\",\n  \"Skye Wilson\",\n  \"Tommy Medina\",\n  \"Vincent Smith\",\n  \"Jackson Garcia\",\n  \"Lisa Alexander\",\n  \"Holly Brooks\",\n  \"Zara Marshall\",\n  \"Kiera Shaw\"\n];\n\nvar languageList = [\n  \"French\",\n  \"English\",\n  \"German\",\n  \"Italian\",\n  \"Portuguese\",\n  \"Chinese\",\n  \"French\",\n  \"German\",\n  \"English\",\n  \"English\",\n  \"English\",\n  \"French\",\n  \"German\",\n  \"Chinese\"\n];\n\nvar codeList = {\n  \"FRA\": \"France\",\n  \"GBR\": \"United Kingdom\",\n  \"ISL\": \"Iceland\",\n  \"ITA\": \"Italy\",\n  \"PRT\": \"Protugal\",\n  \"SWE\": \"Sweden\",\n  \"GRC\": \"Greece\",\n  \"DEU\": \"Germany\",\n  \"NOR\": \"Norway\",\n  \"IND\": \"India\",\n  \"CHN\": \"China\"\n}\n\nvar countryList = [\n  \"FRA\",\n  \"GBR\",\n  \"ISL\",\n  \"ITA\",\n  \"PRT\",\n  \"SWE\",\n  \"GRC\",\n  \"DEU\",\n  \"NOR\",\n  \"GBR\",\n  \"IND\",\n  \"FRA\",\n  \"DEU\",\n  \"CHN\"\n];\n\nvar gameList = [\n  \"Overhold\", \"Cardify\", \"Alphazap\", \"Toughjoyfax\", \"Voltsillam\",\n  \"Home Ing\", \"Otcom\", \"Solarbreeze\", \"Alpha\", \"Cooker run\",\n  \"Stronghold\", \"Tresom\", \"Andalax\", \"Rank\", \"King of plant\",\n  \"Alphazap\", \"Viva\", \"Mat Lam Tam\", \"Wrapsafe\", \"Gembucket\"\n];\n\ntr.DataGenerator.addFieldInfo(\"game\", {\n  type: \"set\",\n  members: gameList\n});\n\ntr.DataGenerator.addFieldInfo(\"user_id\", {\n  type: \"number\",\n  min: 0,\n  max: userList.length,\n  prec: 0\n});\n\nvar fields = [\n  \"Name\",\n  \"Language\",\n  \"Country\",\n  \"Game Name\",\n  \"Bought\",\n  \"Bank Balance\",\n  \"Rating\",\n  \"Total Winnings\",\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\"\n];\n\nvar conditionsArr = fields.map(function(field) {\n  return [{\n    backgroundColor: \"#b9f6ca66\",\n    expression: \"[\" + field + \"] > 60\"\n  }, {\n    backgroundColor: \"#ff80ab66\",\n    expression: \"[\" + field + \"] < 20\"\n  }];\n});\n\n// Custom Capitalize Formatter\nconst capitalizeFormatter = {\n  render: function() {},\n  bind: function(rowIndex, colIndex, value, cell) {\n    console.log(\"value\", value);\n    cell.setContent(value.toString()\n      .toUpperCase());\n  }\n};\n\nvar dataTypeFields = [\n  \"user_id\",\n  \"game\",\n  \"boolean\", // Bought\n  \"TR.Volume\", // Bank Balance\n  \"index100\", // Rating\n  \"YRHIGH\", // Total Winnings\n];\n\nvar randNumber = tr.DataGenerator.randNumber;\n\nvar seed = Math.round(Math.random() * 100);\nvar mapRow = function(row) {\n  var userId = row[0];\n  return [false, userList[userId], languageList[userId], countryList[userId],\n    row[1], row[2].toString(), row[3], row[4], row[5],\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed),\n    randNumber(0, 100, 2, ++seed)\n  ];\n};\n\nvar dataRows = tr.DataGenerator.generate(dataTypeFields, { seed: seed, numRows: 100 })\n  .map(mapRow);\n\nconst entries = languageList.map(function(item) {\n  return {\n    label: item,\n    value: item\n  };\n});\n\nvar allAvailableColumns = [{\n    checkboxColumn: true\n  },\n  {\n    id: \"c0\",\n    name: fields[0],\n    field: fields[0],\n    width: 200,\n    editableContent: true\n  },\n  {\n    id: \"c1\",\n    name: fields[1],\n    field: fields[1],\n    editableContent: true,\n    inCellEditing: {\n      type: \"select\",\n      entries: entries\n    },\n    filterInput: {\n      type: \"select\",\n      entries: entries\n    },\n    width: 200\n  },\n  {\n    id: \"c2\",\n    name: fields[2],\n    field: fields[2],\n    filterInput: false,\n    minWidth: 100,\n    textAlign: \"c\",\n    binding: tr.CoralButtonFormatter.create({\n      events: {\n        click: function(event, context) {\n          var value = context.getData(context.field);\n          alert(codeList[value]);\n        }\n      }\n    })\n  },\n  {\n    id: \"c3\",\n    name: fields[3],\n    field: fields[3],\n    filterInput: false,\n    binding: capitalizeFormatter,\n    width: 120\n  },\n  {\n    id: \"c4\",\n    name: fields[4],\n    field: fields[4],\n    filterInput: false,\n    minWidth: 100,\n    textAlign: \"center\",\n    binding: tr.CoralIconFormatter.create({\n      icon: {\n        true: \"tick\",\n        false: \"cross\"\n      }\n    }),\n    inCellEditing: {\n      type: \"checkbox\"\n    },\n    editableContent: true\n  },\n  {\n    id: \"c5\",\n    name: fields[5],\n    field: fields[5],\n    minWidth: 120,\n    textAlign: \"right\",\n    heatMap: {\n      midPoint: 40\n    },\n    inCellEditing: {\n      type: \"number\"\n    },\n    filterInput: {\n      type: \"number\"\n    },\n    editableContent: true,\n    formatType: {\n      type: \"number\",\n      separator: true,\n      decimalPlaces: 0\n    }\n  },\n  {\n    id: \"c6\",\n    name: fields[6],\n    field: fields[6],\n    filterInput: false,\n    percentBar: {\n      alignment: \"l\"\n    },\n    editableContent: true,\n    noFitting: true,\n    width: 120\n\n  },\n  {\n    id: \"c7\",\n    name: fields[7],\n    field: fields[7],\n    noFitting: true,\n    minWidth: 100,\n    textAlign: \"right\",\n    formatType: {\n      type: \"number\",\n      separator: true,\n      decimalPlaces: 0\n    }\n  },\n  {\n    id: \"c8\",\n    name: fields[8],\n    field: fields[8],\n    conditions: conditionsArr[8],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  },\n  {\n    id: \"c9\",\n    name: fields[9],\n    field: fields[9],\n    conditions: conditionsArr[9],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  },\n  {\n    id: \"c10\",\n    name: fields[10],\n    field: fields[10],\n    conditions: conditionsArr[10],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  }, {\n    id: \"c11\",\n    name: fields[11],\n    field: fields[11],\n    conditions: conditionsArr[11],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  }, {\n    id: \"c12\",\n    name: fields[12],\n    field: fields[12],\n    conditions: conditionsArr[12],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  }, {\n    id: \"c13\",\n    name: fields[13],\n    field: fields[13],\n    conditions: conditionsArr[13],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  },\n  {\n    id: \"c14\",\n    name: fields[14],\n    field: fields[14],\n    conditions: conditionsArr[14],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  },\n  {\n    id: \"c15\",\n    name: fields[15],\n    field: fields[15],\n    conditions: conditionsArr[15],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  },\n  {\n    id: \"c16\",\n    name: fields[16],\n    field: fields[16],\n    conditions: conditionsArr[16],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  },\n  {\n    id: \"c17\",\n    name: fields[17],\n    field: fields[17],\n    conditions: conditionsArr[17],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120,\n\n  },\n  {\n    id: \"c18\",\n    name: fields[18],\n    field: fields[18],\n    conditions: conditionsArr[18],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120\n  },\n  {\n    id: \"c19\",\n    name: fields[19],\n    field: fields[19],\n    conditions: conditionsArr[19],\n    textAlign: \"right\",\n    formatType: \"percent\",\n    width: 120,\n    editableContent: true\n  }\n];\n\n// generate dynamic data and assign to \"atlas-blotter\"\ndataSizeSelect.addEventListener(\"value-changed\", function(e) {\n  var seed = Math.round(Math.random() * 100);\n  var dataRows = tr.DataGenerator.generate(dataTypeFields, { seed: seed, numRows: e.target.value })\n    .map(mapRow);\n\n  grid.data = dataRows;\n});\n\n// set up row Filter Extension\nsearch_input.addEventListener(\"keyup\", function(e) {\n  const input = e.currentTarget;\n\n  if (input._prevValue !== input.value) {\n    input._prevValue = input.value;\n    filterExt.refresh(); // Force filter triggering\n  }\n});\n\nvar filterFunc = function(rowData, rowId, context) {\n  var str = \"\";\n  var val = context.input.value.toLowerCase();\n  var record = rowData[\"ROW_DEF\"].getRowData();\n  for (var key in record) {\n    str += record[key] + \" \";\n  }\n  return str.toLowerCase().indexOf(val) > -1;\n};\n\nvar context = {\n  input: search_input\n};\n\nfilterExt.addGridFilter(filterFunc, context);\n\n// Prepare model for context-menu\nconst contextMenuModel = {\n  items: {\n    FILTER: {\n      text: \"Filter\",\n      callback: function(e) {\n        filterExt.openDialog(e.colIndex, {\n          sortUI: true, // Show Sort area\n          filterUI: true, // Show Filter area\n          sortState: \"d\", // \"a\" for ascending or \"d\" for descending\n          filterChanged: function(e) { // Filter changed handler\n            console.log(e.detail);\n          },\n          sortChanged: function(e) { // Sort changed handler\n            console.log(e.detail);\n          }\n        });\n      }\n    },\n    ROW_COLORING: {\n      text: \"Set Row Color\",\n      items: [\n        { text: \"Red\", value: \"#FF0000\" },\n        { text: \"Green\", value: \"#00FF00\" },\n        { text: \"Blue\", value: \"#0000FF\" },\n        { type: \"separator\" },\n        { text: \"Default\", value: \"\" }\n      ],\n      callback: function(e) {\n        const { rowIndex, item: { value } } = e;\n        rowColoring.setRowColor(rowIndex, value);\n      }\n    }\n  },\n  onMenu: function(e) {\n    var context = e.context;\n    var menu = e.menu;\n    if (context === \"header\") {\n      menu.addItems(\"FILTER\");\n    } else if (context === \"content\") {\n      menu.addItems([\"ROW_COLORING\", \"FILTER\"]);\n    }\n  }\n};\n\ncontextMenuExt.listen(\"contextmenu\", function(e) {\n  // contextmenu event argument provides info about the right click position within the core grid\n  console.log(e);\n});\n\n// set up \"column-selection-dialog\"\nvar dialog = null;\nvar confirmChanged = function(e) {\n  grid.columns = e.detail.data;\n};\n\nselectColumnBtn.addEventListener(\"click\", function() {\n  if (!dialog) {\n    dialog = document.createElement(\"column-selection-dialog\");\n    dialog.addEventListener(\"confirm\", confirmChanged);\n  }\n\n  var visibleColumns = grid.columns.filter(function(column) {\n    return column.checkboxColumn !== true;\n  });\n\n  var allColumns = allAvailableColumns.filter(function(column) {\n    return column.checkboxColumn !== true;\n  });\n\n  dialog.init({\n    data: allColumns.slice(),\n    visibleItems: visibleColumns.slice()\n  });\n  dialog.show();\n});\n\nvar blotterConfig = {\n  scrollbar: true,\n  autoHideScrollbar: false,\n  linearWheelScrolling: true,\n  stepScroll: true,\n  columnGrouping: [{\n      id: \"g1\",\n      title: \"Participant\",\n      alignment: \"center\",\n      children: [\"c0\", \"c1\", \"c2\"]\n    },\n    {\n      id: \"g2\",\n      title: \"Game of Choice\",\n      alignment: \"center\",\n      children: [\"c3\", \"c4\"]\n    },\n    {\n      id: \"g3\",\n      title: \"Performance\",\n      children: [\"c5\"]\n    },\n    {\n      id: \"g4\",\n      title: \"Monthly Breakdown\",\n      alignment: \"left\",\n      children: [\"c8\", \"c9\", \"c10\", \"c11\", \"c12\", \"c13\", \"c14\", \"c15\", \"c16\", \"c17\", \"c18\", \"c19\"]\n    }\n  ],\n  extensions: [\n    columnGroupingExt,\n    checkboxExt,\n    rowGroupingExt,\n    conditionalColoringExt,\n    cellSelectionExt,\n    filterInputExt,\n    columnResizingExt,\n    textFormattingExt,\n    heatMapExt,\n    inCellEditingExt,\n    percentBarExt,\n    filterExt,\n    contextMenuExt,\n    rowColoring,\n    columnFitterExt\n  ],\n  inCellEditing: {\n    type: \"input\",\n    contentSource: \"field\",\n    autoCommitText: true,\n    beforeCommit: function(e) {\n      // console.log(\"beforeCommit\", e)\n    }\n  },\n  contextMenu: contextMenuModel,\n  columnFitting: {\n    title: false,\n    autoAdjust: true,\n    paddingSize: 20\n  },\n  whenDefined: function(e) {\n    var api = e.api;\n  }\n};\n\ngrid.columns = allAvailableColumns;\ngrid.config = blotterConfig;\ngrid.data = dataRows;\n\ncolumn_grouping_selector.addEventListener(\"opened-changed\", function(e) {\n  if (!this.opened) {\n    var columns = grid.columns;\n    var filtered = columns.filter(function(column) {\n      return column.checkboxColumn !== true;\n    });\n    var data = filtered.map(function(column) {\n      return {\n        label: column.name,\n        value: column.field\n      }\n    });\n    var criteria = rowGroupingExt.getGroupingCriteria();\n    var selectorData = data.filter(function(item) {\n      return criteria.indexOf(item.value) < 0;\n    });\n\n    column_grouping_selector.data = selectorData;\n  }\n});\n\nfunction onPillRemove(e) {\n  // Remove Pill\n  var pill = e.target;\n  pill.parentElement.removeChild(pill._arrow);\n  pill.parentElement.removeChild(pill);\n  var field = pill.value;\n\n  // Update grouping criteria\n  var criteria = rowGroupingExt.getGroupingCriteria().slice(0);\n  criteria.splice(criteria.indexOf(field), 1);\n  rowGroupingExt.setGroupingCriteria(criteria);\n}\n\ncolumn_grouping_selector.addEventListener(\"value-changed\", function(e) {\n  var value = e.detail.value;\n  var label = this.label;\n\n  // Insert Pill\n  var pill = document.createElement(\"coral-pill\");\n\n  var arrow = document.createElement(\"coral-icon\");\n  arrow.className = \"arrow\";\n  arrow.setAttribute('icon', 'right');\n\n  pill._arrow = arrow;\n  pill.setAttribute(\"clears\", \"\");\n  pill.innerText = label;\n  pill.value = value;\n  pill.addEventListener(\"clear\", onPillRemove);\n\n  var container = document.getElementById(\"grouping\");\n  container.appendChild(pill);\n  container.appendChild(arrow);\n\n  this.value = \"\";\n\n  // Update grouping criteria\n  var criteria = rowGroupingExt.getGroupingCriteria();\n  var criteria = criteria.concat([value]);\n  rowGroupingExt.setGroupingCriteria(criteria);\n});","tagName":"pre"},{"text":"atlas-blotter {\n  height: 600px;\n}\n\n#grouping .arrow {\n  color: red;\n  margin: 0 5px;\n  vertical-align: middle;\n}\n\n#grouping .arrow:last-child {\n  display: none;\n}\n\ncoral-pill {\n  margin: auto;\n}\n\n#column_grouping_selector {\n  margin-right: 5px;\n}","tagName":"pre"},{"text":"As seen above, the showcase includes a combination of features and extensions which allow Grid to support any data types as well as data visualization.","tagName":"p"},{"text":"The most commonly used features have been included in this showcase, such as sorting, filtering, and column moving. ","tagName":"p"},{"text":"The extensions show how they can leverage Grid so it can support many use cases. The following offers a brief explanation about some of their usage:","tagName":"p"},{"text":"The showcase includes all the following Grid features and extensions:","tagName":"p"}]},{"title":"Overview","filename":"apis/README.html","contents":[{"text":"Grid API documents consist of tr.Grid (core grid), tr.CompositeGrid and rt-grid libraries.In this documents, you can find type definitions, methods and events for each class object.","tagName":"p"},{"text":"emerald-grid is a custom element (WebComponent) that is based on JavaScript tr.CompositeGrid class. The element can be found in Element Framework.","tagName":"p"},{"text":"Element Framework","tagName":"a"},{"text":"typeDef section","tagName":"a"},{"text":"tr.CompositeGrid page","tagName":"a"},{"text":"tr.Grid instance","tagName":"a"},{"text":"atlas-blotter is also a custom element which wraps rt-grid, providing an easy way to display real-time data in a tabular format. It allows you to create list of multiple instruments with multiple real-time and fundamentals columns. Live examples can be found in ELF library.","tagName":"p"},{"text":"ELF library","tagName":"a"},{"text":"typeDef section","tagName":"a"},{"text":"here","tagName":"a"},{"text":"tr.CompositeGrid is a JavaScript wrapper that wraps tr.Grid to make some of internal APIs more accessible. See tr.CompositeGrid.","tagName":"p"},{"text":"tr.CompositeGrid","tagName":"a"},{"text":"rt-grid (Real-time Grid) is built on top of tr.Grid with JET's Quotes support, providing an easy way to display real-time data in a tabular format. See rt-grid.","tagName":"p"},{"text":"rt-grid","tagName":"a"},{"text":"tr.Grid is core of the grid. It can be accessed through getCoreGrid() method from tr.CompositeGrid. See tr.Grid here.","tagName":"p"},{"text":"tr.Grid","tagName":"a"},{"text":"tr.DataView and tr.DataTable are used to manage data model within the grid. Accessing data or data manipulation should be done by these two class objects. See tr.DataView and tr.DataTable here.","tagName":"p"},{"text":"tr.DataView","tagName":"a"},{"text":"tr.DataTable","tagName":"a"},{"text":"If you are looking for usage or how it looks like checkout Usage Guide Document.","tagName":"p"},{"text":"Usage Guide Document","tagName":"a"},{"text":"Composite Grid APIs","tagName":"h2"},{"text":"tr.ColumnStats","tagName":"a"},{"text":"tr.CompositeGrid","tagName":"a"},{"text":"tr.DataCache","tagName":"a"},{"text":"tr.DataTable","tagName":"a"},{"text":"tr.DataView","tagName":"a"},{"text":"tr.ElementControl","tagName":"a"},{"text":"tr.ElementWrapper","tagName":"a"},{"text":"tr.Event","tagName":"a"},{"text":"tr.EventDispatcher","tagName":"a"},{"text":"tr.Grid","tagName":"a"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"tr.LayoutGrid","tagName":"a"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"tr.grid.CellSpans","tagName":"a"},{"text":"tr.grid.DragAndDropTitlePlugin","tagName":"a"},{"text":"tr.grid.HScrollbar","tagName":"a"},{"text":"tr.grid.ResizableTitlePlugin","tagName":"a"},{"text":"tr.grid.Scrollbar","tagName":"a"},{"text":"tr.grid.SectionSettings","tagName":"a"},{"text":"tr.grid.SortableTitlePlugin","tagName":"a"},{"text":"tr.grid.VScrollbar","tagName":"a"},{"text":"Realtime Grid APIS","tagName":"h2"},{"text":"ColumnDefinition","tagName":"a"},{"text":"Grid","tagName":"a"},{"text":"RowDefinition","tagName":"a"},{"text":"Reference","tagName":"h2"},{"text":"here","tagName":"a"},{"text":"here","tagName":"a"},{"text":"here","tagName":"a"}]},{"title":"tr.ColumnStats","filename":"apis/composite_grid/tr.ColumnStats.html","contents":[{"text":"new ColumnStats(sourceopt, fieldopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Methods","tagName":"h3"},{"text":"disableOnDemandMode(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"dispose()","tagName":"h4"},{"text":"getAbsoluteMax()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getAverage()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getCachedColumnData()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnDataGetter()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDataCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getMax()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getMean()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getMidRange()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getMin()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSum()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"markDirty()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnDataGetter(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setDataSource(source)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setField(field)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"tr.CompositeGrid","filename":"apis/composite_grid/tr.CompositeGrid.html","contents":[{"text":"new CompositeGrid(opt_initializer, opt_modelopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.ElementControl","tagName":"a"},{"text":"Type Definitions","tagName":"h3"},{"text":"Column","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            field                                                    string                                                                                                                                                                                                    Field that will be used for data binding        ","tagName":"tr"},{"text":"                            dataType                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        data type eg. string, datetime, number        ","tagName":"tr"},{"text":"                            tooltip                                                    string | boolean | null                                                                                        <optional>                                                                                                                                                Show tooltip in header section        ","tagName":"tr"},{"text":"                            title                                                    string                                                                                        <optional>                                                                                                                                                Column title/name/label        ","tagName":"tr"},{"text":"                            id                                                    string                                                                                        <optional>                                                                                                                                                Column id is optional. It is primarily used for column grouping.        ","tagName":"tr"},{"text":"                            alignment                                                    \"l\" | \"left\" | \"r\" | \"right\" | \"c\" | \"center\"                                                                                        <optional>                                                                                                                            'left'                                                        Available options are `left`, `center`, and `right`        ","tagName":"tr"},{"text":"                            width                                                    number                                                                                        <optional>                                                                                                                                                Column width in pixel. This can be acted as a percentage weight, when scalable flag is turned on.        ","tagName":"tr"},{"text":"                            size                                                    number                                                                                        <optional>                                                                                                                                                Alias to `width`        ","tagName":"tr"},{"text":"                            minWidth                                                    number                                                                                        <optional>                                                                                                                                                Minimum column width        ","tagName":"tr"},{"text":"                            minSize                                                    number                                                                                        <optional>                                                                                                                                                Alias to `minWidth`        ","tagName":"tr"},{"text":"                            visible                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Column visibility        ","tagName":"tr"},{"text":"                            resizable                                                    boolean                                                                                        <optional>                                                                                                                                                If defined, it will override `columnResizability` flag for this column        ","tagName":"tr"},{"text":"                            textSelect                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, user can select text in this column        ","tagName":"tr"},{"text":"                            scalable                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Column scalability forces column to be scaled and filled the grid. `width` property will be used as a weight/ratio        ","tagName":"tr"},{"text":"                            formatter                                                    tr.CompositeGrid.ColumnFormatter                                                                                        <optional>                                                                                                                                                Formatter specifies how to render data for each cell in the column        ","tagName":"tr"},{"text":"                            styles                                                    Object.<string, string>                                                                                        <optional>                                                                                                                                                Key/value pair Object specifying CSS styles        ","tagName":"tr"},{"text":"                            classes                                                    Object.<string, string>                                                                                        <optional>                                                                                                                                                Key/value pair Object specifying CSS classes        ","tagName":"tr"},{"text":"                            sortable                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enable, the column can be sorted by user click        ","tagName":"tr"},{"text":"                            sortBy                                                    string                                                                                        <optional>                                                                                                                                                Field to be used for sorting. If defined, user can click at the header section to sort the column        ","tagName":"tr"},{"text":"                            sortLogic                                                    tr.DataTable.SortLogic                                                                                        <optional>                                                                                                                            null                                                        Custom compare function for sorting        ","tagName":"tr"},{"text":"                            sortingLogic                                                    tr.DataTable.SortLogic                                                                                        <optional>                                                                                                                                                Alias to `sortLogic`        ","tagName":"tr"},{"text":"                            sorter                                                    tr.DataTable.SortLogic                                                                                        <optional>                                                                                                                                                Alias to `sortLogic`        ","tagName":"tr"},{"text":"                            defaultSort                                                    tr.grid.SortableTitlePlugin.SortOrder                                                                                        <optional>                                                                                                                            null                                                        Set to \"d\" for descending order and \"a\" for ascending order        ","tagName":"tr"},{"text":"ColumnFormatter","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            render                                                    function                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"                            bind                                                    function                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"                            transform                                                    Object                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"DataModel","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            fields                                                    Array.<string>                                                                                        <optional>                                                                                                                                                Colums's field name.        ","tagName":"tr"},{"text":"                            format                                                    string                                                                                        <optional>                                                                                                                            \"array\"                                                        The data format that was given in `data` property. Available options are: \"rows\", \"columns\", and \"array\"        ","tagName":"tr"},{"text":"                            data                                                    Array | Object                                                                                                                                                                                                    Data, the order of data in each row has to match the 'fields' property.        ","tagName":"tr"},{"text":"HeaderOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            rowHeight                                                    number                                                                                        <optional>                                                                                                                            32                                                        Row height for all rows in the header section        ","tagName":"tr"},{"text":"Options.","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            columns                                                    Array.<tr.CompositeGrid~Column>                                                                                        <optional>                                                                                                                                                Array of column definitions/options.        ","tagName":"tr"},{"text":"tr.CompositeGrid~Column","tagName":"a"},{"text":"                            rowHighlight                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Row will be highlighted when hovering mouse over the rows.        ","tagName":"tr"},{"text":"                            rowSelection                                                    Object | boolean | \"single\"                                                                                        <optional>                                                                                                                            false                                                        If enabled, rows in the content section can be selected by click. \"single\" mode can be defined to prevent multi-selection from shift+click or control+click.        ","tagName":"tr"},{"text":"                            columnSelection                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, column can be selected by click at the top section. Sorting will require two click instead of one.        ","tagName":"tr"},{"text":"                            columnReorder                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, column can be dragged to change its order.        ","tagName":"tr"},{"text":"                            pinnedColumnReorder                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, Pinned column can be dragged to change its order.        ","tagName":"tr"},{"text":"                            columnResizability                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, column edge cannot be dragged to resize.        ","tagName":"tr"},{"text":"                            stepScroll                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, a full row will be scrolled at a time instead of actual scroll value.        ","tagName":"tr"},{"text":"                            rowHeight                                                    number                                                                                        <optional>                                                                                                                            32                                                        Row height for all rows in the content section.        ","tagName":"tr"},{"text":"                            header                                                    tr.CompositeGrid~HeaderOptions                                                                                        <optional>                                                                                                                            null                                                        Options for the header section.        ","tagName":"tr"},{"text":"tr.CompositeGrid~HeaderOptions","tagName":"a"},{"text":"                            freezeColumn                                                    number                                                                                        <optional>                                                                                                                            -1                                                        Column index of the column to be frozen/pinned on the left side. Use 0 to pin the first column.        ","tagName":"tr"},{"text":"                            autoHideScrollbar                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Fading in/out Scrollbar on hover.        ","tagName":"tr"},{"text":"                            pinnedRightColumns                                                    number                                                                                        <optional>                                                                                                                            0                                                        Number of columns to be frozen/pinned on the right side.        ","tagName":"tr"},{"text":"                            sorting                                                    tr.grid.SortableTitlePlugin~Options                                                                                        <optional>                                                                                                                                                Options for sorting.        ","tagName":"tr"},{"text":"tr.grid.SortableTitlePlugin~Options","tagName":"a"},{"text":"                            dataModel                                                    tr.CompositeGrid~DataModel                                                                                        <optional>                                                                                                                                                Data model for initial data population. The model has a one time use and will not be synchronized. Use tr.DataTable and tr.DataView to manage the data.        ","tagName":"tr"},{"text":"tr.CompositeGrid~DataModel","tagName":"a"},{"text":"tr.DataTable","tagName":"a"},{"text":"tr.DataView","tagName":"a"},{"text":"                            extensions                                                    Array                                                                                        <optional>                                                                                                                                                Array of Grid's extension instance.        ","tagName":"tr"},{"text":"                            scrollbarParent                                                    Element                                                                                        <optional>                                                                                                                            null                                                        Element to be attached by grid's scrollbars, allowing them to move outside and avoid overlapping with the content.        ","tagName":"tr"},{"text":"                            contentRightPadding                                                    number                                                                                        <optional>                                                                                                                            0                                                        Padding that is added next to the right most column. The padding is still a part of scrollable content.        ","tagName":"tr"},{"text":"                            contentBottomPadding                                                    number                                                                                        <optional>                                                                                                                            0                                                        Padding that is added below the last section. The padding is still a part of scrollable content.        ","tagName":"tr"},{"text":"                            linearWheelScrolling                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, wheel scrolling will move the content linearly regardless of how long the content is (i.e. no skipping).        ","tagName":"tr"},{"text":"                            textSelect                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, User can select text for copy or something. Cannot work with flag rowReorder = true.        ","tagName":"tr"},{"text":"                            rowVirtualization                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, all data rows will be rendered. This will greatly impact grid's performance if the data set is huge.        ","tagName":"tr"},{"text":"                            columnVirtualization                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If enabled, all columns will be rendered. This will greatly impact grid's performance if the column set is huge.        ","tagName":"tr"},{"text":"                            topFreezingCount                                                    number | null | boolean                                                                                        <optional>                                                                                                                            null                                                        If number >= 0 will fix number of frozen title section, If false = disabled scrollbar, if null then title section will freeze auto when new section added        ","tagName":"tr"},{"text":"                            bottomFreezingCount                                                    number | null                                                                                        <optional>                                                                                                                            null                                                        If number >= 0 will fix nuber of frozen footer section, if null then footer section will freeze auto when new section added        ","tagName":"tr"},{"text":"                            borders                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Lines around grid element        ","tagName":"tr"},{"text":"                            gridlines                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Horizontal and Vertical lines for ONLY content sections        ","tagName":"tr"},{"text":"                            verticalLines                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Vertical lines for all sections        ","tagName":"tr"},{"text":"                            horizontalLines                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Horizontal lines for all sections        ","tagName":"tr"},{"text":"                            dataConflationRate                                                    number                                                                                        <optional>                                                                                                                            0                                                        set delay for data to avoid to much sorting operation when data changed        ","tagName":"tr"},{"text":"SortingOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            multicolumn                                                    boolean | number                                                                                                                                                                                false                                                        Allow mulitple columns to be sorted at the same time. If number is defined, it is treated as maximum number of column to be sorted.        ","tagName":"tr"},{"text":"                            multiColumn                                                    boolean | number                                                                                                                                                                                false                                                        Alias to `multicolumn`        ","tagName":"tr"},{"text":"                            threeStatesSorting                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, sorting will cycle through ascending, descending and original order states.        ","tagName":"tr"},{"text":"                            sortLogic                                                    Object.<string, function()>                                                                                        <optional>                                                                                                                            null                                                        Custom logic for sorting based on the specified field. The key is field name and the value pair is a function.        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#addClass","tagName":"a"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"addColumn(columnModel)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addColumnGroup(columnGroupModel)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addColumns(columnModels)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#addContent","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addData(data, formatopt)","tagName":"h4"},{"text":"tr.CompositeGrid#getDataTable","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable#addRows","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"// Rows format (Recommended)\nvar data = [\n  {col1: 0, col2: 12, col3: 33},\n  {col1: 1, col2: 13, col3: 44},\n  {col1: 2, col2: 15, col3: 55}\n]\n//Array format (Default). The order of data in each row has to match the 'fields' property of the 'dataModel'\nvar data = [\n  [true, \"row1\", 0, 1, 2],\n  [true, \"row2\", 0, 1, 2],\n  [false, \"row3\", 0, 1, 2]\n];\n\n//Column formatvar data = {  ts: ['2014-01-01', '2014-01-02', '2014-01-03'],  open:  [100, 101, 102],  high:  [105, 107, 105],  low:   [100, 101, 100],  close: [101, 102, 103]}","tagName":"pre"},{"text":"//Column formatvar data = {  ts: ['2014-01-01', '2014-01-02', '2014-01-03'],  open:  [100, 101, 102],  high:  [105, 107, 105],  low:   [100, 101, 100],  close: [101, 102, 103]}","tagName":"p"},{"text":"","tagName":"p"},{"text":"addFilter(filterFunc)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"addFooterSection(sectionName)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"addHeaderSection(sectionName)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"autoResizeAllColumns()","tagName":"h4"},{"text":"clearAllFilters()","tagName":"h4"},{"text":"clearAllSorting()","tagName":"h4"},{"text":"clearSelection()","tagName":"h4"},{"text":"collapseAllGroups()","tagName":"h4"},{"text":"deactivateRendering(disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"detachEditor()","tagName":"h4"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#disable","tagName":"a"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"dispose()","tagName":"h4"},{"text":"tr.ElementControl#dispose","tagName":"a"},{"text":"tr.IElementControl#dispose","tagName":"a"},{"text":"editCell(rowIndex, columnId, opt_sectionRefopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enable","tagName":"a"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enableClass","tagName":"a"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"execFilter()","tagName":"h4"},{"text":"expandAllGroups()","tagName":"h4"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentHeight","tagName":"a"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentWidth","tagName":"a"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"filter(filterFunction)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"findColumnIndex(columnId, opt_includeNotFoundopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"freezeColumn(opt_colIndexopt, pinnedRightColumnsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"freezeLayout(boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getAttribute","tagName":"a"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.ElementControl#getBoundingClientRect","tagName":"a"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"tr.ElementControl#getClass","tagName":"a"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnDataType(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnField(colRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnFields()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnFilterStates()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnId(columnIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnIndex(columnId)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnModel(columnId)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumns()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getContent","tagName":"a"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCoreGrid()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"getCurrentPage()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDataRows(rowIndices)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDataTable()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataTable","tagName":"a"},{"text":"getDataView()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataView","tagName":"a"},{"text":"getElement()","tagName":"h4"},{"text":"tr.ElementControl#getElement","tagName":"a"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getFilterStates()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getGroupExpandingStates()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.ElementControl#getHeight","tagName":"a"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"tr.ElementControl#getId","tagName":"a"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.ElementControl#getLeft","tagName":"a"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getModel()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.ElementControl#getNextSibling","tagName":"a"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getPagerUI()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ElementWrapper","tagName":"a"},{"text":"getPageSize()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.ElementControl#getParent","tagName":"a"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getPinnedColumns()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRelativePosition(obj)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.ElementControl#getScrollLeft","tagName":"a"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.ElementControl#getScrollTop","tagName":"a"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getSection(sectionRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"getSelectedDataRows()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedRows()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSortingStates()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getStyle","tagName":"a"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.ElementControl#getTextContent","tagName":"a"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.ElementControl#getTooltip","tagName":"a"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.ElementControl#getTop","tagName":"a"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTotalPages()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.ElementControl#getWidth","tagName":"a"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"goToPage()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"groupBy(criteria)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hasClass","tagName":"a"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasHiddenRow()","tagName":"h4"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hide","tagName":"a"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"hideColumn(index, opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.CompositeGrid#hideColumns","tagName":"a"},{"text":"hideColumns(colIndices, hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.CompositeGrid#showAllColumns","tagName":"a"},{"text":"hideFilterRow(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"hideLoadingMask()","tagName":"h4"},{"text":"hideRow(rowId)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"hideRows(rowIds)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertAfter","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertBefore","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"insertColumn(atIndex, columnModel)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"insertColumns(atIndex, columnModels)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.ElementControl#isEnabled","tagName":"a"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isLayoutFrozen()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.ElementControl#isVisible","tagName":"a"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"modifyFilter(filterRef, filterFunc)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"moveColumn(fromColIndex, toColIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"nextPage()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"pinColumn(columnList)","tagName":"h4"},{"text":"tr.CompositeGrid#freezeColumn","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.CompositeGrid#freezeColumn","tagName":"a"},{"text":"previousPage()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"registerFormatter(name, formatter)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeAllColumns()","tagName":"h4"},{"text":"tr.CompositeGrid#removeColumn","tagName":"a"},{"text":"tr.CompositeGrid#removeColumns","tagName":"a"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeAttribute","tagName":"a"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeClass","tagName":"a"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"removeColumn(index)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.CompositeGrid#removeAllColumns","tagName":"a"},{"text":"removeColumnGroup(id)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeColumns(colIds)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.CompositeGrid#removeAllColumns","tagName":"a"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#removeContent","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeFilter(filterRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeFooterSection(sectionName)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeHeaderSection(sectionName)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"resetFilter()","tagName":"h4"},{"text":"restoreColumnFilterStates(states)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"restoreGroupExpandingStates(states, opt_defaultopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"restorePinnedColumns(pinnedColumns)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"restoreSortingStates(states)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"scrollToColumn(colIndex, opt_leftOfViewopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"scrollToRow(rowIndex, opt_topOfTheViewopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"selectRows(rowIndex, length)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttribute","tagName":"a"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttributes","tagName":"a"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setClass","tagName":"a"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"setColumnFormatter(colIndex, formatter)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnName(colIndex, name)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnVisible(index, visibility)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setContent","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setGroupSortingLogic()","tagName":"h4"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setHeight","tagName":"a"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setId","tagName":"a"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setLeft","tagName":"a"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setPagingState()","tagName":"h4"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setParent","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"setScrollLeft(px)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setScrollTop(px)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyle","tagName":"a"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyles","tagName":"a"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTextContent","tagName":"a"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTooltip","tagName":"a"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTop","tagName":"a"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setWidth","tagName":"a"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#show","tagName":"a"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"showAllColumns()","tagName":"h4"},{"text":"tr.CompositeGrid#hideColumns","tagName":"a"},{"text":"showFilterRow()","tagName":"h4"},{"text":"showLoadingMask(positionopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"showRows(rowIds, opt_showopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"sortColumn(columnRef, direction)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"sortGroups()","tagName":"h4"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#toggleClass","tagName":"a"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.ElementControl#toString","tagName":"a"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"unfreezeLayout()","tagName":"h4"},{"text":"unhideAllRows()","tagName":"h4"},{"text":"unpinColumn(columnList)","tagName":"h4"},{"text":"tr.CompositeGrid#freezeColumn","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.CompositeGrid#freezeColumn","tagName":"a"},{"text":"unselectRows(rowIndex, length)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"update()","tagName":"h4"},{"text":"updateColumn(idOrIndex, columnModel)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"updateColumnGroup(id, columnGroupModel)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"cellClicked","tagName":"h4"},{"text":"cellDblClicked","tagName":"h4"},{"text":"cellMouseDown","tagName":"h4"},{"text":"cellRightClicked","tagName":"h4"},{"text":"columnSorted","tagName":"h4"},{"text":"editorAttached","tagName":"h4"},{"text":"editorDetached","tagName":"h4"},{"text":"filterAdded","tagName":"h4"},{"text":"filterCleared","tagName":"h4"},{"text":"filterModified","tagName":"h4"},{"text":"filterRemoved","tagName":"h4"},{"text":"mouseLeaveCell","tagName":"h4"},{"text":"mouseOverCell","tagName":"h4"},{"text":"pageChanged","tagName":"h4"},{"text":"selectionChanged","tagName":"h4"}]},{"title":"tr.DataCache","filename":"apis/composite_grid/tr.DataCache.html","contents":[{"text":"new DataCache()","tagName":"h4"},{"text":"Extends","tagName":"h3"},{"text":"tr.EventDispatcher","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"addDataCloudFields(fields)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"addStaticFields(fields)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addSubscription(sub, opt_primaryRicopt, opt_valuesopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"clearAllData(opt_suppressEventopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataCache#event:dataChanged","tagName":"a"},{"text":"clearColumnData(colId, opt_suppressEventopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataCache#event:dataChanged","tagName":"a"},{"text":"cloneRowData(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"dispose()","tagName":"h4"},{"text":"dump(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var options = {\n  \"colNames\": Array.<string>,\n  \"rowCount\": number,\n  \"startIndex\": number,\n  \"getter\": function(Object, string):*,\n  \"withRowIds\": boolean\n};","tagName":"pre"},{"text":"getAllRics()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getAllRowData()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getAllRowIds()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnData(cid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getData(rid, cid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDataCloudFields()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getMultipleRowData(rids, opt_fromopt, opt_toopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getPrimaryRic(sub_id)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowData(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getStaticFields()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSubscription(sub_id)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSubscriptions()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasDataCloudData(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hasRowId(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"log(opt_optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var options = {\n  \"colNames\": Array.<string>,\n  \"rowCount\": number,\n  \"startIndex\": number,\n  \"getter\": function(Object, string):*,\n  \"withRowIds\": boolean\n};","tagName":"pre"},{"text":"removeDataCloudField(field)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeStaticFields(fields)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeSubscription(sub)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"resetStaticFields()","tagName":"h4"},{"text":"setData(rid, cid, value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataCache#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setDataCloudSettings(userId, productId, url, opt_langopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowData(rid, valuesopt, opt_eventArgopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataCache#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setSubscriptions(subs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"startAllSubscriptions()","tagName":"h4"},{"text":"stopAllSubscriptions()","tagName":"h4"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlisten","tagName":"a"},{"text":"unlistenAll(typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlistenAll","tagName":"a"},{"text":"Events","tagName":"h3"},{"text":"dataChanged","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            globalChange                                                    boolean                                                            Indicates a big change. User should expect all data has been change        ","tagName":"tr"},{"text":"                            type                                                    string                                                            Type of changes. Possible values are \"inserted\", \"removed\", \"updated\", and undefined        ","tagName":"tr"},{"text":"                            rid                                                    string                                                            Row Id        ","tagName":"tr"},{"text":"                            rowData                                                    Object.<string, *>                                                            Column values of the changed row in JSON object format        ","tagName":"tr"},{"text":"dataComposed","tagName":"h4"}]},{"title":"tr.DataTable","filename":"apis/composite_grid/tr.DataTable.html","contents":[{"text":"new DataTable()","tagName":"h4"},{"text":"Extends","tagName":"h3"},{"text":"tr.DataCache","tagName":"a"},{"text":"Type Definitions","tagName":"h3"},{"text":"SortLogic()","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            val1                                                    *                                                                                                                                        Value from a row        ","tagName":"tr"},{"text":"                            val2                                                    *                                                                                                                                        Value from another row        ","tagName":"tr"},{"text":"                            order                                                    number                                                                                        <optional>                                                                                    1 indicates ascending order, and -1 indicates descending order        ","tagName":"tr"},{"text":"                            contextObject                                                    *                                                                                        <optional>                                                                                    Any given user context        ","tagName":"tr"},{"text":"Example:","tagName":"h5"},{"text":"var customComparer = function(a, b, order) {\n  if(a + 10 < b) { return -order; }\n  if(b + 10 < a) { return order; } \n  return 0; // a and b are less than 10 difference apart\n};","tagName":"pre"},{"text":"Methods","tagName":"h3"},{"text":"getSortingDefinitions()","tagName":"h4"},{"text":"addDataCloudFields(fields)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#addDataCloudFields","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addRow(valuesopt, rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var dt = new tr.DataTable();\ndt.addRow({\"column 1\": \"a\", \"column 2\": 1, \"column 3\": null});\ndt.addRow({\"column 1\": \"b\", \"column 2\": 5, \"column 3\": {\"someKey\": 10}});\ndt.log(); // See console for the results","tagName":"pre"},{"text":"addRows(rows, ridsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable#setDataFrom2DArray","tagName":"a"},{"text":"tr.DataTable#setDataFromObjectMap","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var dt = new tr.DataTable();\ndt.addRows([\n  {\"field1\": \"a\", \"field2\": 1, \"field3\": null},\n  {\"field1\": \"b\", \"field2\": 5, \"field3\": {\"someKey\": 10}},\n  {\"field1\": \"c\", \"field2\": 7, \"field3\": [1, 2, 3]},\n  {\"field1\": \"c\", \"field4\": \"some value\"} // Rows don't need to be in uniform structure\n]); // 4 rows are added\ndt.log(); // See console for the results","tagName":"pre"},{"text":"addSegmentChild(segmentId, rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"addSegmentChildren(segmentId, rids)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"addStaticFields(fields)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#addStaticFields","tagName":"a"},{"text":"addSubscription(sub, opt_primaryRicopt, opt_valuesopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#addSubscription","tagName":"a"},{"text":"clearAllData(opt_suppressEventopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#clearAllData","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataCache#event:dataChanged","tagName":"a"},{"text":"clearColumnData(colId, opt_suppressEventopt)","tagName":"h4"},{"text":"tr.DataCache#clearColumnData","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#clearColumnData","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataCache#event:dataChanged","tagName":"a"},{"text":"clearRowData(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"cloneRowData(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#cloneRowData","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"dispatchGlobalChange(suppressEventopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataComposed","tagName":"a"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"dispose()","tagName":"h4"},{"text":"tr.DataCache#dispose","tagName":"a"},{"text":"dump(opt_optionsopt)","tagName":"h4"},{"text":"tr.DataCache#dump","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#dump","tagName":"a"},{"text":"tr.DataCache#dump","tagName":"a"},{"text":"tr.DataCache#dump","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var options = {\n  \"colNames\": Array.<string>,\n  \"rowCount\": number,\n  \"startIndex\": number,\n  \"getter\": function(Object, string):*,\n  \"withRowIds\": boolean\n};","tagName":"pre"},{"text":"fillSegment(segmentId)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"fillSegments()","tagName":"h4"},{"text":"freeze(boolopt)","tagName":"h4"},{"text":"tr.DataTable#unfreeze","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var prevState = dt.freeze();\nfor(var i = 0; i < 100; ++i) {\n  dt.insertRow({}); // no event is fired\n}\ndt.freeze(prevState); // Restore previous freeze states","tagName":"pre"},{"text":"getAllRics()","tagName":"h4"},{"text":"tr.DataCache#getAllRics","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAllRowData()","tagName":"h4"},{"text":"tr.DataCache#getAllRowData","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAllRowIds(opt_shallowCopyopt)","tagName":"h4"},{"text":"tr.DataCache#getAllRowIds","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#getAllRowIds","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnData(cid)","tagName":"h4"},{"text":"tr.DataCache#getColumnData","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#getColumnData","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getData(rid, cid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#getData","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getDataAt(rowIndex, cid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getDataCloudFields()","tagName":"h4"},{"text":"tr.DataCache#getDataCloudFields","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getDataSource()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getMultipleRowData(rids, opt_fromopt, opt_toopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#getMultipleRowData","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getPreviousData(rid, cid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getPrimaryRic(sub_id)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#getPrimaryRic","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowData(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#getRowData","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowDataAt(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowId(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowIndex(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSegmentChildIds(segmentId)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSegmentIds()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSegmentValues(ridsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getStaticFields()","tagName":"h4"},{"text":"tr.DataCache#getStaticFields","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getSubscription(sub_id)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#getSubscription","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getSubscriptions()","tagName":"h4"},{"text":"tr.DataCache#getSubscriptions","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasDataCloudData(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#hasDataCloudData","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasRowId(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#hasRowId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasSegmentation()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"insertAfter(rowRef, opt_valuesopt, opt_ridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"insertRow(rowRef, valuesopt, rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable#unshiftRow","tagName":"a"},{"text":"tr.DataTable#removeRow","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isFrozen()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isSegmentSeparator(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"log(opt_optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#log","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var options = {\n  \"colNames\": Array.<string>,\n  \"rowCount\": number,\n  \"startIndex\": number,\n  \"getter\": function(Object, string):*,\n  \"withRowIds\": boolean\n};","tagName":"pre"},{"text":"moveRow(fromIndex, toIndex, suppressEventopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"moveRows(startIndex, toIndex, opt_countopt, suppressEventopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable#moveRow","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeAllRows(suppressEventopt)","tagName":"h4"},{"text":"tr.DataTable#clearAllData","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"removeAllSegmentChildren()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"removeDataCloudField(field)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#removeDataCloudField","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeRow(rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable#removeRows","tagName":"a"},{"text":"removeRows(refs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable#removeAllRows","tagName":"a"},{"text":"removeSegmentChild(segmentId, rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeSegmentChildren(segmentId, rids)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeStaticFields(fields)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#removeStaticFields","tagName":"a"},{"text":"removeSubscription(sub)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#removeSubscription","tagName":"a"},{"text":"resetStaticFields()","tagName":"h4"},{"text":"tr.DataCache#resetStaticFields","tagName":"a"},{"text":"setColumnData(cid, valueList, opt_ridListopt)","tagName":"h4"},{"text":"tr.DataTable#setData","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var dt = new tr.DataTable();\ndt.setColumnData(\"column 1\", [\"1st row data\", \"2nd row data\", \"3rd row data\"]);\ndt.log(); // See console for the results","tagName":"pre"},{"text":"setColumnSortingLogic(cid, func)","tagName":"h4"},{"text":"tr.DataTable#setSortingLogic","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"setData(rid, cid, value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#setData","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setDataAt(rowIndex, cid, value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setDataCloudSettings(userId, productId, url, opt_langopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#setDataCloudSettings","tagName":"a"},{"text":"setDataFrom2DArray(ary, opt_cidListopt, opt_ridListopt)","tagName":"h4"},{"text":"tr.DataTable#setRowData","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable#addRows","tagName":"a"},{"text":"tr.DataTable#setDataFromObjectMap","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var data = [\n  [\"a\", 1, 2],\n  [\"b\", 3, 4],\n  [\"c\", 5, 6]\n];\nvar dt = new tr.DataTable();\ndt.setDataFrom2DArray(data, [\"column 1\", \"column 2\", \"column 3\"]);\ndt.log(); // See console for the results","tagName":"pre"},{"text":"setDataFromObjectMap(obj)","tagName":"h4"},{"text":"tr.DataTable#setRowData","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable#addRows","tagName":"a"},{"text":"tr.DataTable#setDataFrom2DArray","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var data = {\n  \"rowId 1\": {\"column 1\": \"a\", \"column 2\": 1, \"column 3\": 2},\n  \"rowId 2\": {\"column 1\": \"b\", \"column 2\": 3, \"column 3\": 4},\n  \"rowId 4\": {\"column 1\": \"d\", \"group_criteria\": 1} // Rows don't need to be in uniform structure\n};\nvar dt = new tr.DataTable();\ndt.setDataFromObjectMap(data);\ndt.log(); // See console for the results\ndt.setDataFromObjectMap({\"rowId 1\": null}); // Remove the row with \"rowId 1\"\ndt.setDataFromObjectMap({\"rowId 2\": {\"column 1\": \"newValue\"} }); // Update existing row","tagName":"pre"},{"text":"setDataSource(source)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowData(rid, valuesopt, eventArgopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#setRowData","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var dt = new tr.DataTable();\ndt.setRowData(\"row 1\", {\"column 1\": \"a\", \"column 2\": 1, \"column 3\": null});\ndt.log(); // See console for the results","tagName":"pre"},{"text":"setRowDataAt(rowIndex, valuesopt, opt_eventArgopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setSegmentSeparator(rid, enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setSortingLogic(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"customLogic = function(a, b, sortOrder) {\n  return (a - b) * sortOrder; // for numeric comparison\n};\nvar dt = new DataTable();\ndt.setSortingLogic(customLogic);\ndt.sortOnce(\"Column id\", \"ascending\");","tagName":"pre"},{"text":"setSubscriptions(subs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#setSubscriptions","tagName":"a"},{"text":"sortOnce(cid, sortOrders, customCompareropt, contextObjopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"sortSegments(compare)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"startAllSubscriptions()","tagName":"h4"},{"text":"tr.DataCache#startAllSubscriptions","tagName":"a"},{"text":"stopAllSubscriptions()","tagName":"h4"},{"text":"tr.DataCache#stopAllSubscriptions","tagName":"a"},{"text":"swapRow(fromIndex, toIndex)","tagName":"h4"},{"text":"tr.DataTable#moveRow","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"unfreeze(boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlisten","tagName":"a"},{"text":"unlistenAll(typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlistenAll","tagName":"a"},{"text":"unsetAllSegmentSeparators()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"unshiftRow(opt_valuesopt, opt_rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable#insertRow","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataTable#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"dataChanged","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            globalChange                                                    boolean                                                            Indicates a big change. User should expect all data has been change        ","tagName":"tr"},{"text":"                            type                                                    string                                                            Type of changes. Possible values are \"inserted\", \"removed\", \"updated\", and undefined        ","tagName":"tr"},{"text":"                            rid                                                    string                                                            Row Id        ","tagName":"tr"},{"text":"                            rowData                                                    Object.<string, *>                                                            Column values of the changed row in JSON object format        ","tagName":"tr"},{"text":"tr.DataCache#event:dataChanged","tagName":"a"},{"text":"dataComposed","tagName":"h4"},{"text":"tr.DataCache#event:dataComposed","tagName":"a"}]},{"title":"tr.DataView","filename":"apis/composite_grid/tr.DataView.html","contents":[{"text":"new DataView(source)","tagName":"h4"},{"text":"tr.DataTable","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable","tagName":"a"},{"text":"tr.DataView","tagName":"a"},{"text":"tr.DataTable","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.EventDispatcher","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"addFooter(opt_numopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addGroup(value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:groupAdded","tagName":"a"},{"text":"tr.DataView#event:pageCountChanged","tagName":"a"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"addRowExpansion(rid, countopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addSegmentChild(segmentRef, rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"addSegmentChildren(segmentRef, rowRefs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"clearFilter()","tagName":"h4"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageCountChanged","tagName":"a"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"collapse(opt_collapsedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"collapseAllGroups(opt_collapsedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"collapseSegment(rowRef, collapsedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"disablePageCorrection(opt_disableopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"dispose()","tagName":"h4"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:preDisposed","tagName":"a"},{"text":"dump(opt_optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataCache#dump","tagName":"a"},{"text":"tr.DataCache#dump","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"enableAutoGroupHiding(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"enableAutoGroupRemoval(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"enableColumnStats(cid, opt_enabledopt, opt_refIdopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ColumnStats","tagName":"a"},{"text":"enableContentAsHeader(boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"expandAllSegments()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"expandSegment(rowRef, expandedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"fillSegment(segmentRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"fillSegments()","tagName":"h4"},{"text":"filterIn(cid, valueopt, opt_filteringOutopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageCountChanged","tagName":"a"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"dv.filterIn(\"FIELD\", \"Some value\");\ndv.filterIn(function(rowId, rowData)) { // This is equivalent with the above statement\n    return rowData[\"FIELD\"] === \"Some value\";\n});","tagName":"pre"},{"text":"filterInOnce(cid, valueopt, opt_filteringOutopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageCountChanged","tagName":"a"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"filterOut(cid, valueopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageCountChanged","tagName":"a"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"dv.filterIn(\"FIELD\", \"Some value\");\ndv.filterOut(function(rowId, rowData)) { // This is equivalent with the above statement\n    return rowData[\"FIELD\"] !== \"Some value\";\n});","tagName":"pre"},{"text":"filterOutOnce(cid, valueopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageCountChanged","tagName":"a"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"firstPage()","tagName":"h4"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAllGroups(out_aryopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataView","tagName":"a"},{"text":"getAllRowData()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getAllRowIds(shallowCopyopt, inclNonDataRowopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataView#getAllRowData","tagName":"a"},{"text":"tr.DataView#getMultipleRowData","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnData(cid, inclNonDataRowopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnStats()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ColumnStats","tagName":"a"},{"text":"getConflationRate()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getCurrentPage()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getData(rid, cid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getDataAt(rowIndex, cid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getDataSource()","tagName":"h4"},{"text":"tr.DataView#getDataTable","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataTable","tagName":"a"},{"text":"tr.DataView","tagName":"a"},{"text":"getDataTable()","tagName":"h4"},{"text":"tr.DataView#getDataSource","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataTable","tagName":"a"},{"text":"getExpansionParents(fromopt, toopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getGroup(groupRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataView","tagName":"a"},{"text":"getGroupId()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getGroupLevel(opt_rowIndexopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getGroupList()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getGroupRowId()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getGroupRows()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataCache","tagName":"a"},{"text":"getGroupValue()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getMultipleRowData(rids, opt_fromopt, opt_toopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getPageCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPageIndex()","tagName":"h4"},{"text":"tr.DataView#getCurrentPage","tagName":"a"},{"text":"getPageSize()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPreviousData(rid, cid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowData(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowDataAt(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowExpansionId(rid, idxopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowExpansionIndex(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowId(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataView#getRowIndex","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowIndex(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataView#getRowId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getSegmentChildIds(segmentRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSegmentIds()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSortedRowIds(opt_shallowCopyopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getTotalPages()","tagName":"h4"},{"text":"tr.DataView#getTotalPages","tagName":"a"},{"text":"getVisibleRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getVisibleRowIds(opt_shallowCopyopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"gotoPage()","tagName":"h4"},{"text":"tr.DataView#setPage","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"groupBy(cid, opt_predefinedGroupsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:groupAdded","tagName":"a"},{"text":"tr.DataView#event:groupCriteriaChanged","tagName":"a"},{"text":"tr.DataView#event:pageCountChanged","tagName":"a"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"hasGroup()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasHiddenRow()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasRowExpansion(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hasSegmentation()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"hideRow(rId, opt_showopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"hideRows(rowRefs, opt_showopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"insertRow(rowRef, opt_valuesopt, opt_rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isCollapsed()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isHidden()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isOnFirstPage()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isOnLastPage()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isRowDataInGroup(rowData, groupIDopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isRowExpansion(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isRowFiltered(rid, rowData)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isRowIdInGroup(rowId, groupIDopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isSegmentCollapsed(rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isSegmentSeparator(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isSorting()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"lastPage()","tagName":"h4"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"log(opt_optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"// Options have the following format:\n// {\n//  \"colNames\": Array.<string>,\n//  \"rowCount\": number,\n//  \"startIndex\": number,\n//  \"getter\": function(Object, string):*,\n//  \"withRowIds\": boolean\n//}\ndv.log({\"rowCount\": 10}); // Showing 10 records\ndv.log({\"getter\": function(rowData, colName){\n    var complexData = rowData[colName];\n    return complextData.someProperty;\n}});","tagName":"pre"},{"text":"moveGroup(groupRef, destIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"moveRow(fromIndex, toIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"ary = [0, 1, 2];\nmove(ary, 0, 1); // [0, 1, 2] Move index 0 to the position before index 1 (nothing is changed)\nmove(ary, 1, 0); // [1, 0, 2] Move index 1 to the position before index 0","tagName":"pre"},{"text":"nextPage()","tagName":"h4"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"previousPage()","tagName":"h4"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"prevPage()","tagName":"h4"},{"text":"tr.DataView#previousPage","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"removeAllRowExpansions()","tagName":"h4"},{"text":"removeAllSegmentChildren()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"removeFooter()","tagName":"h4"},{"text":"removeRow(rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"removeRowExpansion(rid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeRows(refs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeSegmentChild(segmentRef, rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeSegmentChildren(segmentRef, rowRefs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"searchAll(searchLogic, opt_outopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"searchNext(rowRef, searchLogic)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"searchPrev(rowRef, searchLogic)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnData(cid, valueList, opt_ridListopt)","tagName":"h4"},{"text":"tr.DataTable#setData","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnSortingLogic(cid, func)","tagName":"h4"},{"text":"tr.DataView#setSortingLogic","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"setConflationRate(milliSecond)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setData(rid, cid, value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setDataAt(rowIndex, cid, value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setDataSource(source)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable","tagName":"a"},{"text":"tr.DataView","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"setPage(pageIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setPageSize(pageSize)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:pageCountChanged","tagName":"a"},{"text":"tr.DataView#event:pageIndexChanged","tagName":"a"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"setPredefinedGroups(predefinedGroups)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"dv.setPredefinedGroups([\"a\", \"b\", \"c\"]); // Create empty three empty groups\ndv.setPredefinedGroups([ // Create two empty groups, and each group has 3 sub-groups\n  [\"Main Group 1\", \"Main 2\"],\n  [\"Sub 1\", \"Sub 2\", \"Sub 3\"]\n]);","tagName":"pre"},{"text":"setRowData(rid, valuesopt, opt_eventArgopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setRowDataAt(rowIndex, valuesopt, opt_eventArgopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setSegmentSeparator(rowRef, enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setSortingLogic(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"customLogic = function(a, b, sortOrder) {\n  return (a - b) * sortOrder; // for numeric comparison\n};\nvar dt = new DataTable();\nvar dv = new DataView(dt);\ndv.setSortingLogic(customLogic);\ndv.sort(\"Column id\", \"ascending\");","tagName":"pre"},{"text":"showRows(rowRefs, opt_showopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"sort(cid, opt_sortOrder, sortLogics)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"sortGroups(compareopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"sortOnce(cid, opt_sortOrder)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.DataView#event:dataChanged","tagName":"a"},{"text":"sortSegments(compare)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"stall(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"swapRow(fromIndex, toIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"synchronizeRowOrder()","tagName":"h4"},{"text":"toggleCollapsedState()","tagName":"h4"},{"text":"toggleRowExpansion(rowRef, forceopt, countopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unhideAllRows()","tagName":"h4"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlisten","tagName":"a"},{"text":"unlistenAll(typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlistenAll","tagName":"a"},{"text":"unsetAllSegmentSeparators()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"beforeFiltering","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"beforeGroupAdded","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            dataView                                                    tr.DataView                                                            Parent data view that create the new group        ","tagName":"tr"},{"text":"tr.DataView","tagName":"a"},{"text":"                            newGroupId                                                    string                                                                    ","tagName":"tr"},{"text":"                            newGroupValue                                                    *                                                                    ","tagName":"tr"},{"text":"                            newGroupRowId                                                    string                                                            Unique row Id given for the group        ","tagName":"tr"},{"text":"dataChanged","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            globalChange                                                    boolean                                                            Indicates a big change. User should expect all data has been change. With active sorting or filtering, this flag will always be true due to multiple changes in row position.        ","tagName":"tr"},{"text":"                            type                                                    string                                                            Type of changes. Possible values are \"inserted\", \"removed\", \"updated\", and undefined        ","tagName":"tr"},{"text":"                            rid                                                    string                                                            Row Id        ","tagName":"tr"},{"text":"                            rowData                                                    Object.<string, *>                                                            Column values of the changed row in JSON object format        ","tagName":"tr"},{"text":"groupAdded","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            dataView                                                    tr.DataView                                                            Parent data view that create the new group        ","tagName":"tr"},{"text":"tr.DataView","tagName":"a"},{"text":"                            newGroup                                                    tr.DataView                                                            Child data view that is newly created        ","tagName":"tr"},{"text":"tr.DataView","tagName":"a"},{"text":"groupCriteriaChanged","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"pageCountChanged","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            pageCount                                                    number                                                                    ","tagName":"tr"},{"text":"pageIndexChanged","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            pageIndex                                                    number                                                                    ","tagName":"tr"},{"text":"preDisposed","tagName":"h4"}]},{"title":"tr.ElementControl","filename":"apis/composite_grid/tr.ElementControl.html","contents":[{"text":"new ElementControl()","tagName":"h4"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#listen","tagName":"a"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.EventDispatcher","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"dispose()","tagName":"h4"},{"text":"tr.IElementControl#dispose","tagName":"a"},{"text":"tr.IElementControl#dispose","tagName":"a"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"tr.IElementControl#listen","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"tr.EventDispatcher#listen","tagName":"a"},{"text":"tr.IElementControl#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"tr.IElementControl#unlisten","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlisten","tagName":"a"},{"text":"tr.IElementControl#unlisten","tagName":"a"},{"text":"unlistenAll(opt_typeopt)","tagName":"h4"},{"text":"tr.IElementControl#unlistenAll","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlistenAll","tagName":"a"},{"text":"tr.IElementControl#unlistenAll","tagName":"a"}]},{"title":"tr.ElementWrapper","filename":"apis/composite_grid/tr.ElementWrapper.html","contents":[{"text":"new ElementWrapper(opt_elementopt)","tagName":"h4"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#listen","tagName":"a"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"dispose()","tagName":"h4"},{"text":"tr.IElementControl#dispose","tagName":"a"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"tr.IElementControl#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#unlisten","tagName":"a"},{"text":"unlistenAll(opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#unlistenAll","tagName":"a"}]},{"title":"tr.Event","filename":"apis/composite_grid/tr.Event.html","contents":[{"text":"new Event(opt_sender)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Members","tagName":"h3"},{"text":"KeyCodes","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            BACKSPACE                                                    number                                                                    ","tagName":"tr"},{"text":"                            TAB                                                    number                                                                    ","tagName":"tr"},{"text":"                            ENTER                                                    number                                                                    ","tagName":"tr"},{"text":"                            SHIFT                                                    number                                                                    ","tagName":"tr"},{"text":"                            CTRL                                                    number                                                                    ","tagName":"tr"},{"text":"                            ALT                                                    number                                                                    ","tagName":"tr"},{"text":"                            ESC                                                    number                                                                    ","tagName":"tr"},{"text":"                            SPACE                                                    number                                                                    ","tagName":"tr"},{"text":"                            PAGE_UP                                                    number                                                                    ","tagName":"tr"},{"text":"                            PAGE_DOWN                                                    number                                                                    ","tagName":"tr"},{"text":"                            END                                                    number                                                                    ","tagName":"tr"},{"text":"                            HOME                                                    number                                                                    ","tagName":"tr"},{"text":"                            LEFT                                                    number                                                                    ","tagName":"tr"},{"text":"                            UP                                                    number                                                                    ","tagName":"tr"},{"text":"                            RIGHT                                                    number                                                                    ","tagName":"tr"},{"text":"                            DOWN                                                    number                                                                    ","tagName":"tr"},{"text":"                            INSERT                                                    number                                                                    ","tagName":"tr"},{"text":"                            DELETE                                                    number                                                                    ","tagName":"tr"},{"text":"                            ZERO                                                    number                                                                    ","tagName":"tr"},{"text":"                            ONE                                                    number                                                                    ","tagName":"tr"},{"text":"                            TWO                                                    number                                                                    ","tagName":"tr"},{"text":"                            THREE                                                    number                                                                    ","tagName":"tr"},{"text":"                            FOUR                                                    number                                                                    ","tagName":"tr"},{"text":"                            FIVE                                                    number                                                                    ","tagName":"tr"},{"text":"                            SIX                                                    number                                                                    ","tagName":"tr"},{"text":"                            SEVEN                                                    number                                                                    ","tagName":"tr"},{"text":"                            EIGHT                                                    number                                                                    ","tagName":"tr"},{"text":"                            NINE                                                    number                                                                    ","tagName":"tr"},{"text":"                            A                                                    number                                                                    ","tagName":"tr"},{"text":"                            B                                                    number                                                                    ","tagName":"tr"},{"text":"                            C                                                    number                                                                    ","tagName":"tr"},{"text":"                            D                                                    number                                                                    ","tagName":"tr"},{"text":"                            E                                                    number                                                                    ","tagName":"tr"},{"text":"                            F                                                    number                                                                    ","tagName":"tr"},{"text":"                            G                                                    number                                                                    ","tagName":"tr"},{"text":"                            H                                                    number                                                                    ","tagName":"tr"},{"text":"                            I                                                    number                                                                    ","tagName":"tr"},{"text":"                            J                                                    number                                                                    ","tagName":"tr"},{"text":"                            K                                                    number                                                                    ","tagName":"tr"},{"text":"                            L                                                    number                                                                    ","tagName":"tr"},{"text":"                            M                                                    number                                                                    ","tagName":"tr"},{"text":"                            N                                                    number                                                                    ","tagName":"tr"},{"text":"                            O                                                    number                                                                    ","tagName":"tr"},{"text":"                            P                                                    number                                                                    ","tagName":"tr"},{"text":"                            Q                                                    number                                                                    ","tagName":"tr"},{"text":"                            R                                                    number                                                                    ","tagName":"tr"},{"text":"                            S                                                    number                                                                    ","tagName":"tr"},{"text":"                            T                                                    number                                                                    ","tagName":"tr"},{"text":"                            U                                                    number                                                                    ","tagName":"tr"},{"text":"                            V                                                    number                                                                    ","tagName":"tr"},{"text":"                            W                                                    number                                                                    ","tagName":"tr"},{"text":"                            X                                                    number                                                                    ","tagName":"tr"},{"text":"                            Y                                                    number                                                                    ","tagName":"tr"},{"text":"                            Z                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_ZERO                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_ONE                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_TWO                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_THREE                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_FOUR                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_FIVE                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_SIX                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_SEVEN                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_EIGHT                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_NINE                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_MULTIPLY                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_PLUS                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_MINUS                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_PERIOD                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUM_DIVISION                                                    number                                                                    ","tagName":"tr"},{"text":"                            F1                                                    number                                                                    ","tagName":"tr"},{"text":"                            F2                                                    number                                                                    ","tagName":"tr"},{"text":"                            F3                                                    number                                                                    ","tagName":"tr"},{"text":"                            F4                                                    number                                                                    ","tagName":"tr"},{"text":"                            F5                                                    number                                                                    ","tagName":"tr"},{"text":"                            F6                                                    number                                                                    ","tagName":"tr"},{"text":"                            F7                                                    number                                                                    ","tagName":"tr"},{"text":"                            F8                                                    number                                                                    ","tagName":"tr"},{"text":"                            F9                                                    number                                                                    ","tagName":"tr"},{"text":"                            F10                                                    number                                                                    ","tagName":"tr"},{"text":"                            F11                                                    number                                                                    ","tagName":"tr"},{"text":"                            F12                                                    number                                                                    ","tagName":"tr"},{"text":"                            NUMLOCK                                                    number                                                                    ","tagName":"tr"},{"text":"                            SCROLL_LOCK                                                    number                                                                    ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"dispatch(eventArg)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getListenerCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasListener()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isDispatching()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isEnabled()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"listen(listener, opt_priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setEventArgExtender(extender)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSender(sender)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unlisten(listener)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unlistenAll()","tagName":"h4"}]},{"title":"tr.EventDispatcher","filename":"apis/composite_grid/tr.EventDispatcher.html","contents":[{"text":"new EventDispatcher()","tagName":"h4"},{"text":"Methods","tagName":"h3"},{"text":"extendClass(childCtor)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"SomeClass = function () {};\ntr.EventDispatcher.extendClass(SomeClass);\nvar obj = new SomeClass();\nobj.listen(\"customEvent\", function(e) {});","tagName":"pre"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unlistenAll(typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"tr.Grid","filename":"apis/composite_grid/tr.Grid.html","contents":[{"text":"new Grid(opt_initializeropt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.ElementControl","tagName":"a"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"tr.Grid#insertColumn","tagName":"a"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            width                                                    number                                                                                        <optional>                                                                                    Column width        ","tagName":"tr"},{"text":"                            minWidth                                                    number                                                                                        <optional>                                                                                    Minimum column width        ","tagName":"tr"},{"text":"                            minSize                                                    number                                                                                        <optional>                                                                                    Alias to `minWidth`        ","tagName":"tr"},{"text":"                            size                                                    number                                                                                        <optional>                                                                                    Alias to `width`        ","tagName":"tr"},{"text":"                            visible                                                    boolean                                                                                        <optional>                                                                                    Column visibility        ","tagName":"tr"},{"text":"                            scalable                                                    boolean                                                                                        <optional>                                                                                    Column scalability        ","tagName":"tr"},{"text":"                            styles                                                    Object.<string, string>                                                                                        <optional>                                                                                    Key/value pair object specifying CSS styles        ","tagName":"tr"},{"text":"                            classes                                                    Object.<string, string>                                                                                        <optional>                                                                                    Key/value pair object specifying CSS classes        ","tagName":"tr"},{"text":"                            dataColumnName                                                    string                                                                                        <optional>                                                                                    Data column for sorting        ","tagName":"tr"},{"text":"                            renderingHandler                                                    function                                                                                        <optional>                                                                                    Deprecated        ","tagName":"tr"},{"text":"                            dataBindingHandler                                                    function                                                                                        <optional>                                                                                    Column binding function        ","tagName":"tr"},{"text":"                            columnData                                                    string                                                                                        <optional>                                                                                    For attaching context (user data)        ","tagName":"tr"},{"text":"                            layout                                                    tr.grid.TrackLayout                                                                                        <optional>                                                                                    Deprecated        ","tagName":"tr"},{"text":"tr.grid.TrackLayout","tagName":"a"},{"text":"MouseInfo","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            hit                                                    boolean                                                            Indicates whether the given position is on the grid        ","tagName":"tr"},{"text":"                            x                                                    number                                                            Horizontal coordinate that is relative to the top-left of the grid (Zero means left-most)        ","tagName":"tr"},{"text":"                            y                                                    number                                                            Vertical coordinate that is relative to the top-left of the grid (Zero means top-most)        ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            sectionIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            sectionType                                                    string                                                                    ","tagName":"tr"},{"text":"                            sectionSettings                                                    tr.grid.SectionSettings                                                                    ","tagName":"tr"},{"text":"tr.grid.SectionSettings","tagName":"a"},{"text":"                            section                                                    tr.ILayoutGrid                                                                    ","tagName":"tr"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"                            cellElement                                                    Element                                                                    ","tagName":"tr"},{"text":"                            dataSource                                                    tr.DataView                                                                    ","tagName":"tr"},{"text":"tr.DataView","tagName":"a"},{"text":"SectionReference","tagName":"h4"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"tr.grid.SectionSettings","tagName":"a"},{"text":"Type:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"tr.grid.SectionSettings","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#addClass","tagName":"a"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#addContent","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addRow(opt_numopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:postSectionDataBinding","tagName":"a"},{"text":"addSection(opt_typeopt, opt_sectionNameopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"addSectionAt(at, opt_typeopt, opt_sectionNameopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:sectionAdded","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"autoHideScrollbars(opt_hideopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"deactivateRendering(disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#disable","tagName":"a"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enable","tagName":"a"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enableClass","tagName":"a"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"enableColumnClass(colIndex, clsName, enabledopt, opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableColumnVirtualization(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableRowHighlighting(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableRowVirtualization(opt_enabled)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentHeight","tagName":"a"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentWidth","tagName":"a"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"focus()","tagName":"h4"},{"text":"https://developer.mozilla.org/en/docs/Web/API/HTMLElement/focus","tagName":"a"},{"text":"http://help.dottoro.com/ljqmdirr.php","tagName":"a"},{"text":"freezeColumn(frozenColIndexopt, numRightColumnopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"grid.freezeColumn(0); // The first column is pinned to the left side\ngrid.freezeColumn(1); // The first two columns are pinned to the left side\ngrid.freezeColumn(-1); // Grid's horizontal scrollbar will cover entire are of the grid.\ngrid.freezeColumn(null); // Turn off grid's horizontal scrollbar\ngrid.freezeColumn(-1, 1); // The last column is pinned to the right side\ngrid.freezeColumn(-1, 2); // The last two columns are pinned to the right side\ngrid.freezeColumn(0, 2); // Grid's horizontal scrollbar will affect only the middle part","tagName":"pre"},{"text":"freezeFooter(frozenCount)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"freezeLayout(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#isLayoutFrozen","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"freezeSection(opt_frozenSectionopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getAllSections(opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"getAllSectionSettings(opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.SectionSettings","tagName":"a"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getAttribute","tagName":"a"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.ElementControl#getBoundingClientRect","tagName":"a"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCell(sectionRef, colIndex, rowIndex, opt_includeSpanopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"getCellInfo(cellRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.Grid#getRelativePosition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"grid.getCellInfo({\"colIndex\": 0, \"rowIndex\": 0}); // Get cell information about the top left cell in the content section\ngrid.getCellInfo(document.createElement(\"some_element\"); // Get cell information for cell that contains the element with id \"some_element\"\ngrid.getCellInfo(mouseEventArg); // Get cell information from the given MouseEvent argument (this is the same as getRelativePosition() method)\nvar cellInfo = grid.getCellInfo({\"colIndex\": 1, \"rowIndex\": 1});\ncellInfo.colIndex = cellInfo.colIndex + 1; // Get next cell to the right\ngrid.getCellInfo(cellInfo);","tagName":"pre"},{"text":"getClass()","tagName":"h4"},{"text":"tr.ElementControl#getClass","tagName":"a"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnAlignment(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnCustomLaneSize(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnData(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnDataBindingEvent(c)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#setColumnDataBindingHandler","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnDataBindingHandler(c)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnIndex(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnLeft(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnRenderEvent()","tagName":"h4"},{"text":"getColumnRenderingHandler(c)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnRight(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnScalability(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnVirtualizer()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.Virtualizer","tagName":"a"},{"text":"getColumnWidth(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getContent","tagName":"a"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContentWidth()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getData(sectionRef, colRef, rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDataColumnMap()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDataColumnName(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDataConflationRate()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDataSource()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataView","tagName":"a"},{"text":"getDefaultRowHeight()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"tr.ElementControl#getElement","tagName":"a"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getFirstPinnedRightIndex()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getFitContentWidth()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getFooterCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getFrozenColumnCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.ElementControl#getHeight","tagName":"a"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getHiddenInput()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getHScrollbar()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"getId()","tagName":"h4"},{"text":"tr.ElementControl#getId","tagName":"a"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLastSection()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.ElementControl#getLeft","tagName":"a"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getMinimumColumnWidth(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getNextCell(cellRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getNextCellInRow(cellRef, stepopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSection(identifieropt, opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.ElementControl#getNextSibling","tagName":"a"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.ElementControl#getParent","tagName":"a"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getPinnedLeftColumnCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPinnedRightColumnCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPlugin(pluginName)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getPluginList()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPlugins()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPrevCell(cellRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getPrevCellInRow(cellRef, stepopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getPreviousSection(identifieropt, opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"getRelativePosition(obj, contextopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowIndex(sectionIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowVirtualizer()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.Virtualizer","tagName":"a"},{"text":"getScrollHeight()","tagName":"h4"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.ElementControl#getScrollLeft","tagName":"a"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.ElementControl#getScrollTop","tagName":"a"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollWidth()","tagName":"h4"},{"text":"getSection(sectionRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"getSectionCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSectionIndex(identifieropt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSectionSettings(sectionRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.SectionSettings","tagName":"a"},{"text":"getSectionTop(sectionRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getStyle","tagName":"a"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.ElementControl#getTextContent","tagName":"a"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.ElementControl#getTooltip","tagName":"a"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.ElementControl#getTop","tagName":"a"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getVMouseWheelHandler()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getVScrollbar()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"getVScrollView()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.ElementControl#getWidth","tagName":"a"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getYScrollVal(sectionRef, rowIndex, topOfViewopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hasClass","tagName":"a"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasColumnClass(colIndex, clsName, opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hasHiddenRow()","tagName":"h4"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hide","tagName":"a"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"hideBorders(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#toggleBorders","tagName":"a"},{"text":"hideColumn(colIndex, hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#isColumnVisible","tagName":"a"},{"text":"tr.Grid#hideColumns","tagName":"a"},{"text":"tr.Grid#showAllColumns","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"tr.Grid#event:columnVisibilityChanged","tagName":"a"},{"text":"hideColumns(colIndices, hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#hideColumn","tagName":"a"},{"text":"tr.Grid#showAllColumns","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"tr.Grid#event:columnVisibilityChanged","tagName":"a"},{"text":"hideRow(rowId)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"hideRows(rowIds)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertAfter","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertBefore","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"insertColumn(index, jsonObjopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:columnAdded","tagName":"a"},{"text":"tr.Grid#event:postSectionDataBinding","tagName":"a"},{"text":"insertColumns(at, colsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"isBinding()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isColumnVisible(colIndex)","tagName":"h4"},{"text":"tr.Grid#hideColumn","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isDisposed()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.ElementControl#isEnabled","tagName":"a"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isLayoutFrozen()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isPinnedColumn(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.ElementControl#isVisible","tagName":"a"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"loadPlugin(pluginRef, opt_optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"grid.loadPlugin(\"CheckboxPlugin\");\ngrid.loadPlugin(\"ColumnResizing\");\ngrid.loadPlugin(new tr.grid.InCellEditingPlugin());","tagName":"pre"},{"text":"moveColumn(fromCol, destCol)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"newColumnData(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"preserveGridSize(preserve)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"preserveProportion(preserve)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeAllColumns()","tagName":"h4"},{"text":"tr.Grid#removeColumnAt","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"tr.Grid#event:columnRemoved","tagName":"a"},{"text":"removeAllRows()","tagName":"h4"},{"text":"removeAllSections()","tagName":"h4"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeAttribute","tagName":"a"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeClass","tagName":"a"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"removeColumnAt(index)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#removeAllColumns","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"tr.Grid#event:columnRemoved","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#removeContent","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeLastSection()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"removeRow(opt_numopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeRowData(sectionRef, rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeSection(sectionRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"removeSectionAt(at)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"requestRowRefresh()","tagName":"h4"},{"text":"rerender()","tagName":"h4"},{"text":"reserveRightSpace(size)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"resetColumnWidths()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"scrollDown(pixels)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"scrollRight(pixels)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"scrollToColumn(colIndex, leftOfViewopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"scrollToRow(sectionRef, rowIndex, topOfViewopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setAlwaysRenderColumn(colIndex, alwaysRenderopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttribute","tagName":"a"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttributes","tagName":"a"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"setBottomPaddingSection(paddingSize)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setClass","tagName":"a"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"setColumnAlignment(colIndex, alignmentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnCount(num)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:columnAdded","tagName":"a"},{"text":"tr.Grid#event:postSectionDataBinding","tagName":"a"},{"text":"setColumnData(colIndex, userData)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnDataBindingHandler(c, func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#setDefaultDataBindingHandler","tagName":"a"},{"text":"setColumnDefaultWidth(colIndex, width)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnRenderingHandler(c, func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#setDefaultRenderingHandler","tagName":"a"},{"text":"setColumnScalability(val, opt_scalableopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnStyle(colIndex, style, value, opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnWidth(colIndex, px, opt_scalableopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"grid.setColumnWidth(0, 100); // The first column will have a fixed width\ngrid.setColumnWidth(1, 100, true); // The second column will have a percentage width where 100 is the weight comparing with other percentage column","tagName":"pre"},{"text":"setColumnWidths(columnWidths, opt_proportionopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"grid.setColumnWidths([1, 2, 1, 1], true); // The first four columns have percentage width with the second column is twice as big as the others","tagName":"pre"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setContent","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setData(sectionRef, colRef, rowRef, data)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setDataColumnMap(opt_dataMapopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setDataColumnName(colIndex, opt_dataColumnNameopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setDataConflationRate(milliSecond)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setDataSource(dataSource)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataTable","tagName":"a"},{"text":"tr.DataView","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:dataSourceChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataView","tagName":"a"},{"text":"setDefaultColumnScalable(scalable)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setDefaultDataBindingHandler(handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#setColumnDataBindingHandler","tagName":"a"},{"text":"setDefaultRenderingHandler(handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#setColumnRenderingHandler","tagName":"a"},{"text":"setDefaultRowHeight(val, opt_includeTitleopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setFitContentWidth(bool)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setHeight","tagName":"a"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setHidingMethod(method)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setId","tagName":"a"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setLeft","tagName":"a"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setMinimumColumnWidth(colIndex, width)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"setMinimumColumnWidths(minWidths, proportionopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setParent","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"setRowScrollingStep(rowCount)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setScrollLeft(pixels)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setScrollTop(pixels)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSectionRowCount(sectionRef, num)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyle","tagName":"a"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyles","tagName":"a"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTextContent","tagName":"a"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTooltip","tagName":"a"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTop","tagName":"a"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setWidth","tagName":"a"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#show","tagName":"a"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"showAllColumns()","tagName":"h4"},{"text":"tr.Grid#hideColumn","tagName":"a"},{"text":"tr.Grid#hideColumns","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"tr.Grid#event:columnVisibilityChanged","tagName":"a"},{"text":"showBorders(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#toggleBorders","tagName":"a"},{"text":"showRows(rowIds, opt_showopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"synchronizeVScrollbar(subGrid)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"toggleBorders(forcedValopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#toggleClass","tagName":"a"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toggleGridlines(forcedValopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"toggleHorizontalLines(forcedValopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"toggleVerticalLines(forcedValopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.ElementControl#toString","tagName":"a"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"unfreezeLayout(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid#freezeLayout","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"unhideAllRows()","tagName":"h4"},{"text":"unloadPlugin(pluginRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"updateLayout()","tagName":"h4"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:widthChanged","tagName":"a"},{"text":"updateRowData(sectionRefopt, fromRowIndexopt, lastRowIndexopt, userParamopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.Grid#event:postSectionDataBinding","tagName":"a"},{"text":"updateScrollbars(updateHeight, updateWidth)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"columnAdded","tagName":"h4"},{"text":"columnRemoved","tagName":"h4"},{"text":"columnVisibilityChanged","tagName":"h4"},{"text":"dataSourceChanged","tagName":"h4"},{"text":"postSectionDataBinding","tagName":"h4"},{"text":"rowExpansionBinding","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            originalRowData                                                    Object.<string, *>                                                                    ","tagName":"tr"},{"text":"                            originalRowId                                                    string                                                            The row that rowExpansion belongs to        ","tagName":"tr"},{"text":"                            rowExpansion                                                    boolean                                                                    ","tagName":"tr"},{"text":"                            rowId                                                    string                                                                    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"rowHighlighted","tagName":"h4"},{"text":"sectionAdded","tagName":"h4"},{"text":"widthChanged","tagName":"h4"}]},{"title":"tr.IElementControl","filename":"apis/composite_grid/tr.IElementControl.html","contents":[{"text":"tr.IElementControl#listen","tagName":"a"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"dispose()","tagName":"h4"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getWidth()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"isEnabled()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unlistenAll(opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"blur","tagName":"h4"},{"text":"Example:","tagName":"h5"},{"text":"var popup = new tr.Popup();\npopup.listen(\"blur\", function(e) { console.log(\"A popup is out of focus\"); });","tagName":"pre"},{"text":"change","tagName":"h4"},{"text":"click","tagName":"h4"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"contextmenu","tagName":"h4"},{"text":"dblclick","tagName":"h4"},{"text":"drag","tagName":"h4"},{"text":"dragend","tagName":"h4"},{"text":"dragenter","tagName":"h4"},{"text":"dragleave","tagName":"h4"},{"text":"dragover","tagName":"h4"},{"text":"dragstart","tagName":"h4"},{"text":"drop","tagName":"h4"},{"text":"focus","tagName":"h4"},{"text":"formchange","tagName":"h4"},{"text":"forminput","tagName":"h4"},{"text":"input","tagName":"h4"},{"text":"invalid","tagName":"h4"},{"text":"keydown","tagName":"h4"},{"text":"keypress","tagName":"h4"},{"text":"keyup","tagName":"h4"},{"text":"mousedown","tagName":"h4"},{"text":"mousemove","tagName":"h4"},{"text":"mouseout","tagName":"h4"},{"text":"mouseover","tagName":"h4"},{"text":"mouseup","tagName":"h4"},{"text":"mousewheel","tagName":"h4"},{"text":"reset","tagName":"h4"},{"text":"scroll","tagName":"h4"},{"text":"select","tagName":"h4"},{"text":"submit","tagName":"h4"}]},{"title":"tr.ILayoutGrid","filename":"apis/composite_grid/tr.ILayoutGrid.html","contents":[{"text":"Extends","tagName":"h3"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"activateRows(fromopt, toopt, opt_updateRangeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addRow(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"clearCellSpans()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"clearColumnCustomizations()","tagName":"h4"},{"text":"clearColumnSpans(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"clearRowCustomizations()","tagName":"h4"},{"text":"clearSelectedRows()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"disableHorizontalGridLine(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableVerticalGridLine(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"dispose()","tagName":"h4"},{"text":"tr.IElementControl#dispose","tagName":"a"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"enableColumnClass(colIndex, className, enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableRowClass(rowIndex, className, enabled)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableRowHighlighting(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableShading(enabled)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCell(colIndex, rowIndex, opt_includeSpanopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"getCellColSpan(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getCellContent(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getCellHeight(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getCellIndex(colIndex, cellElem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getCellLeft(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getCellRowSpan(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getCellsByRowIndex(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"getCellTop(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getCellWidth(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumn(index)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"getColumnCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnHost()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnIndex(colElem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnScalability(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnStyle(colIndex, styleName)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnWidth(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getComputedStyle()","tagName":"h4"},{"text":"https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContentHeight()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getContentWidth()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDefaultColumnWidth()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDefaultRowHeight()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getFirstIndexInView()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getFirstSelectedRow()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getIndex()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getLastIndexInView()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getLastSelectedRow()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getMinimumColumnWidth(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getMinimumRowHeight(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRelativePosition(obj)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getReservedSpace()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowAnchor()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowHeight(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowHighlight()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowOffset()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowScalability(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedRows()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getStretchedCells()","tagName":"h4"},{"text":"tr.ILayoutGrid#stretchCell","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getVisibleRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasCellSpan()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasColumnClass()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"hideColumn(colIndex, valopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hideRow(rowIndex, valopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hitTest(x, y, opt_omitSpanopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hitTestX(x)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hitTestY(y)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"isColumnActive(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isColumnVisible(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isInCurrentView(index)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isRowVisible(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isSelectedRow(at)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"tr.IElementControl#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeRow(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"reserveRightSpace(size)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"selectRowRange(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"selectSingleRow(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"setBorders(lft, top, rgt, btm)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setCellColSpan(colIndex, rowIndex, colSpan)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setCellContent(colIndex, rowIndex, data)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setCellRowSpan(colIndex, rowIndex, rowSpan)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"setColumnCount(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnScalability(colIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnStyle(colIndex, styleName, value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnWidth(colIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setDefaultColumnWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setDefaultRowHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setMinimumColumnWidth(colIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setMinimumRowHeight(rowIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"setRowAnchor(at)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowAttributes(rowIndex, func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowCount(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowHeight(rowIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setRowHighlight(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowScalability(rowIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setRowStyle(rowIndex, styleName, value, enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSelectedRow(rowIndex, opt_selectedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setTransposedShading(enabled)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"stretchCell(cellRef, rowIndexopt, opt_stretchingopt, onlyToTheRightopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"grid.stretchCell(1, 0); // The second cell on the first row will be stretched covering the entire row\ngrid.stretchCell(cellInstance, 0, true); // The given cell will be stretched covering the entire row","tagName":"pre"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#unlisten","tagName":"a"},{"text":"unlistenAll(opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#unlistenAll","tagName":"a"},{"text":"unstretchCell(cellRef, rowIndexopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"tr.ILayoutGrid#stretchCell","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"updateStretchedCells()","tagName":"h4"},{"text":"tr.ILayoutGrid#stretchCell","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"blur","tagName":"h4"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var popup = new tr.Popup();\npopup.listen(\"blur\", function(e) { console.log(\"A popup is out of focus\"); });","tagName":"pre"},{"text":"change","tagName":"h4"},{"text":"tr.IElementControl#event:change","tagName":"a"},{"text":"click","tagName":"h4"},{"text":"tr.IElementControl#event:click","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"contextmenu","tagName":"h4"},{"text":"tr.IElementControl#event:contextmenu","tagName":"a"},{"text":"dblclick","tagName":"h4"},{"text":"tr.IElementControl#event:dblclick","tagName":"a"},{"text":"drag","tagName":"h4"},{"text":"tr.IElementControl#event:drag","tagName":"a"},{"text":"dragend","tagName":"h4"},{"text":"tr.IElementControl#event:dragend","tagName":"a"},{"text":"dragenter","tagName":"h4"},{"text":"tr.IElementControl#event:dragenter","tagName":"a"},{"text":"dragleave","tagName":"h4"},{"text":"tr.IElementControl#event:dragleave","tagName":"a"},{"text":"dragover","tagName":"h4"},{"text":"tr.IElementControl#event:dragover","tagName":"a"},{"text":"dragstart","tagName":"h4"},{"text":"tr.IElementControl#event:dragstart","tagName":"a"},{"text":"drop","tagName":"h4"},{"text":"tr.IElementControl#event:drop","tagName":"a"},{"text":"focus","tagName":"h4"},{"text":"tr.IElementControl#event:focus","tagName":"a"},{"text":"formchange","tagName":"h4"},{"text":"tr.IElementControl#event:formchange","tagName":"a"},{"text":"forminput","tagName":"h4"},{"text":"tr.IElementControl#event:forminput","tagName":"a"},{"text":"input","tagName":"h4"},{"text":"tr.IElementControl#event:input","tagName":"a"},{"text":"invalid","tagName":"h4"},{"text":"tr.IElementControl#event:invalid","tagName":"a"},{"text":"keydown","tagName":"h4"},{"text":"tr.IElementControl#event:keydown","tagName":"a"},{"text":"keypress","tagName":"h4"},{"text":"tr.IElementControl#event:keypress","tagName":"a"},{"text":"keyup","tagName":"h4"},{"text":"tr.IElementControl#event:keyup","tagName":"a"},{"text":"mousedown","tagName":"h4"},{"text":"tr.IElementControl#event:mousedown","tagName":"a"},{"text":"mousemove","tagName":"h4"},{"text":"tr.IElementControl#event:mousemove","tagName":"a"},{"text":"mouseout","tagName":"h4"},{"text":"tr.IElementControl#event:mouseout","tagName":"a"},{"text":"mouseover","tagName":"h4"},{"text":"tr.IElementControl#event:mouseover","tagName":"a"},{"text":"mouseup","tagName":"h4"},{"text":"tr.IElementControl#event:mouseup","tagName":"a"},{"text":"mousewheel","tagName":"h4"},{"text":"tr.IElementControl#event:mousewheel","tagName":"a"},{"text":"reset","tagName":"h4"},{"text":"tr.IElementControl#event:reset","tagName":"a"},{"text":"scroll","tagName":"h4"},{"text":"tr.IElementControl#event:scroll","tagName":"a"},{"text":"select","tagName":"h4"},{"text":"tr.IElementControl#event:select","tagName":"a"},{"text":"submit","tagName":"h4"},{"text":"tr.IElementControl#event:submit","tagName":"a"}]},{"title":"tr.LayoutGrid","filename":"apis/composite_grid/tr.LayoutGrid.html","contents":[{"text":"new LayoutGrid(opt_initializer, opt_optionsopt)","tagName":"h4"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.ElementControl","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"activateRows(fromopt, toopt, opt_updateRangeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#activateRows","tagName":"a"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#addClass","tagName":"a"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"tr.ILayoutGrid#addClass","tagName":"a"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#addContent","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"tr.ILayoutGrid#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addRow(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#addRow","tagName":"a"},{"text":"clearCellSpans()","tagName":"h4"},{"text":"tr.ILayoutGrid#clearCellSpans","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"clearColumnCustomizations()","tagName":"h4"},{"text":"tr.ILayoutGrid#clearColumnCustomizations","tagName":"a"},{"text":"clearColumnSpans(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#clearColumnSpans","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"clearRowCustomizations()","tagName":"h4"},{"text":"tr.ILayoutGrid#clearRowCustomizations","tagName":"a"},{"text":"clearSelectedRows()","tagName":"h4"},{"text":"tr.ILayoutGrid#clearSelectedRows","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#disable","tagName":"a"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"tr.ILayoutGrid#disable","tagName":"a"},{"text":"disableHorizontalGridLine(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#disableHorizontalGridLine","tagName":"a"},{"text":"disableVerticalGridLine(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#disableVerticalGridLine","tagName":"a"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enable","tagName":"a"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"tr.ILayoutGrid#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enableClass","tagName":"a"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"tr.ILayoutGrid#enableClass","tagName":"a"},{"text":"enableColumnClass(colIndex, className, enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#enableColumnClass","tagName":"a"},{"text":"enableRowClass(rowIndex, className, enabled)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#enableRowClass","tagName":"a"},{"text":"enableRowHighlighting(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#enableRowHighlighting","tagName":"a"},{"text":"enableShading(enabled)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#enableShading","tagName":"a"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentHeight","tagName":"a"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"tr.ILayoutGrid#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentWidth","tagName":"a"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"tr.ILayoutGrid#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getAttribute","tagName":"a"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"tr.ILayoutGrid#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.ElementControl#getBoundingClientRect","tagName":"a"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"tr.ILayoutGrid#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCell(colIndex, rowIndex, opt_includeSpanopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCell","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"getCellColSpan(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCellColSpan","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCellContent(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCellContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCellHeight(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCellHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCellIndex(colIndex, cellElem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCellIndex","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCellLeft(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCellLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCellRowSpan(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCellRowSpan","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCellsByRowIndex(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCellsByRowIndex","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"getCellTop(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCellTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getCellWidth(colIndex, rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getCellWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"tr.ElementControl#getClass","tagName":"a"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"tr.ILayoutGrid#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumn(index)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getColumn","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"getColumnCount()","tagName":"h4"},{"text":"tr.ILayoutGrid#getColumnCount","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnHost()","tagName":"h4"},{"text":"tr.ILayoutGrid#getColumnHost","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnIndex(colElem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getColumnIndex","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnScalability(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getColumnScalability","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnStyle(colIndex, styleName)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getColumnStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnWidth(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getColumnWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getComputedStyle()","tagName":"h4"},{"text":"tr.ILayoutGrid#getComputedStyle","tagName":"a"},{"text":"https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getContent","tagName":"a"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"tr.ILayoutGrid#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContentHeight()","tagName":"h4"},{"text":"tr.ILayoutGrid#getContentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContentWidth()","tagName":"h4"},{"text":"tr.ILayoutGrid#getContentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getDefaultColumnWidth()","tagName":"h4"},{"text":"tr.ILayoutGrid#getDefaultColumnWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getDefaultRowHeight()","tagName":"h4"},{"text":"tr.ILayoutGrid#getDefaultRowHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"tr.ElementControl#getElement","tagName":"a"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"tr.ILayoutGrid#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getFirstIndexInView()","tagName":"h4"},{"text":"tr.ILayoutGrid#getFirstIndexInView","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getFirstSelectedRow()","tagName":"h4"},{"text":"tr.ILayoutGrid#getFirstSelectedRow","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.ElementControl#getHeight","tagName":"a"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"tr.ILayoutGrid#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"tr.ElementControl#getId","tagName":"a"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"tr.ILayoutGrid#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getIndex()","tagName":"h4"},{"text":"tr.ILayoutGrid#getIndex","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLastIndexInView()","tagName":"h4"},{"text":"tr.ILayoutGrid#getLastIndexInView","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLastSelectedRow()","tagName":"h4"},{"text":"tr.ILayoutGrid#getLastSelectedRow","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.ElementControl#getLeft","tagName":"a"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"tr.ILayoutGrid#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getMinimumColumnWidth(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getMinimumColumnWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getMinimumRowHeight(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getMinimumRowHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.ElementControl#getNextSibling","tagName":"a"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"tr.ILayoutGrid#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.ElementControl#getParent","tagName":"a"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"tr.ILayoutGrid#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRelativePosition(obj)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ILayoutGrid#getRelativePosition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getReservedSpace()","tagName":"h4"},{"text":"tr.ILayoutGrid#getReservedSpace","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowAnchor()","tagName":"h4"},{"text":"tr.ILayoutGrid#getRowAnchor","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowCount()","tagName":"h4"},{"text":"tr.ILayoutGrid#getRowCount","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowHeight(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getRowHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowHighlight()","tagName":"h4"},{"text":"tr.ILayoutGrid#getRowHighlight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowOffset()","tagName":"h4"},{"text":"tr.ILayoutGrid#getRowOffset","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRowScalability(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#getRowScalability","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.ElementControl#getScrollLeft","tagName":"a"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"tr.ILayoutGrid#getScrollLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.ElementControl#getScrollTop","tagName":"a"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"tr.ILayoutGrid#getScrollTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedRowCount()","tagName":"h4"},{"text":"tr.ILayoutGrid#getSelectedRowCount","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedRows()","tagName":"h4"},{"text":"tr.ILayoutGrid#getSelectedRows","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getStretchedCells()","tagName":"h4"},{"text":"tr.ILayoutGrid#getStretchedCells","tagName":"a"},{"text":"tr.ILayoutGrid#stretchCell","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getStyle","tagName":"a"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"tr.ILayoutGrid#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.ElementControl#getTextContent","tagName":"a"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"tr.ILayoutGrid#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.ElementControl#getTooltip","tagName":"a"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"tr.ILayoutGrid#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.ElementControl#getTop","tagName":"a"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"tr.ILayoutGrid#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getVisibleRowCount()","tagName":"h4"},{"text":"tr.ILayoutGrid#getVisibleRowCount","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.ElementControl#getWidth","tagName":"a"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"tr.ILayoutGrid#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasCellSpan()","tagName":"h4"},{"text":"tr.ILayoutGrid#hasCellSpan","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hasClass","tagName":"a"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"tr.ILayoutGrid#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasColumnClass()","tagName":"h4"},{"text":"tr.ILayoutGrid#hasColumnClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hide","tagName":"a"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"tr.ILayoutGrid#hide","tagName":"a"},{"text":"hideColumn(colIndex, valopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#hideColumn","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hideRow(rowIndex, valopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#hideRow","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hitTest(x, y, opt_omitSpanopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#hitTest","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hitTestX(x)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#hitTestX","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hitTestY(y)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#hitTestY","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertAfter","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"tr.ILayoutGrid#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertBefore","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"tr.ILayoutGrid#insertBefore","tagName":"a"},{"text":"isColumnActive(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#isColumnActive","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isColumnVisible(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#isColumnVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.ElementControl#isEnabled","tagName":"a"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"tr.ILayoutGrid#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"tr.ILayoutGrid#isEndOfHorizontalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"tr.ILayoutGrid#isEndOfVerticalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isInCurrentView(index)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#isInCurrentView","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isRowVisible(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#isRowVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isSelectedRow(at)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#isSelectedRow","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.ElementControl#isVisible","tagName":"a"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"tr.ILayoutGrid#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeAttribute","tagName":"a"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"tr.ILayoutGrid#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeClass","tagName":"a"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"tr.ILayoutGrid#removeClass","tagName":"a"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#removeContent","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"tr.ILayoutGrid#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeRow(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#removeRow","tagName":"a"},{"text":"reserveRightSpace(size)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#reserveRightSpace","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"selectRowRange(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#selectRowRange","tagName":"a"},{"text":"selectSingleRow(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#selectSingleRow","tagName":"a"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttribute","tagName":"a"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"tr.ILayoutGrid#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttributes","tagName":"a"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"tr.ILayoutGrid#setAttributes","tagName":"a"},{"text":"setBorders(lft, top, rgt, btm)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setBorders","tagName":"a"},{"text":"setCellColSpan(colIndex, rowIndex, colSpan)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setCellColSpan","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setCellContent(colIndex, rowIndex, data)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ILayoutGrid#setCellContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setCellRowSpan(colIndex, rowIndex, rowSpan)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setCellRowSpan","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setClass","tagName":"a"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"tr.ILayoutGrid#setClass","tagName":"a"},{"text":"setColumnCount(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setColumnCount","tagName":"a"},{"text":"setColumnScalability(colIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setColumnScalability","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnStyle(colIndex, styleName, value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setColumnStyle","tagName":"a"},{"text":"setColumnWidth(colIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setColumnWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setContent","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"tr.ILayoutGrid#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setDefaultColumnWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setDefaultColumnWidth","tagName":"a"},{"text":"setDefaultRowHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setDefaultRowHeight","tagName":"a"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setHeight","tagName":"a"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"tr.ILayoutGrid#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setId","tagName":"a"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"tr.ILayoutGrid#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setLeft","tagName":"a"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"tr.ILayoutGrid#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setMinimumColumnWidth(colIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setMinimumColumnWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setMinimumRowHeight(rowIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setMinimumRowHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setParent","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"tr.ILayoutGrid#setParent","tagName":"a"},{"text":"setRowAnchor(at)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setRowAnchor","tagName":"a"},{"text":"setRowAttributes(rowIndex, func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setRowAttributes","tagName":"a"},{"text":"setRowCount(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setRowCount","tagName":"a"},{"text":"setRowHeight(rowIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setRowHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setRowHighlight(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setRowHighlight","tagName":"a"},{"text":"setRowScalability(rowIndex, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setRowScalability","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setRowStyle(rowIndex, styleName, value, enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setRowStyle","tagName":"a"},{"text":"setSelectedRow(rowIndex, opt_selectedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setSelectedRow","tagName":"a"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyle","tagName":"a"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"tr.ILayoutGrid#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyles","tagName":"a"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"tr.ILayoutGrid#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTextContent","tagName":"a"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"tr.ILayoutGrid#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTooltip","tagName":"a"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"tr.ILayoutGrid#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTop","tagName":"a"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"tr.ILayoutGrid#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setTransposedShading(enabled)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid#setTransposedShading","tagName":"a"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setWidth","tagName":"a"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"tr.ILayoutGrid#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#show","tagName":"a"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"tr.ILayoutGrid#show","tagName":"a"},{"text":"stretchCell(cellRef, rowIndexopt, opt_stretchingopt, onlyToTheRightopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"tr.ILayoutGrid#stretchCell","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"grid.stretchCell(1, 0); // The second cell on the first row will be stretched covering the entire row\ngrid.stretchCell(cellInstance, 0, true); // The given cell will be stretched covering the entire row","tagName":"pre"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#toggleClass","tagName":"a"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"tr.ILayoutGrid#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.ElementControl#toString","tagName":"a"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"tr.ILayoutGrid#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"unstretchCell(cellRef, rowIndexopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"tr.ILayoutGrid#unstretchCell","tagName":"a"},{"text":"tr.ILayoutGrid#stretchCell","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.Cell","tagName":"a"},{"text":"updateStretchedCells()","tagName":"h4"},{"text":"tr.ILayoutGrid#updateStretchedCells","tagName":"a"},{"text":"tr.ILayoutGrid#stretchCell","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"rowCountChanged","tagName":"h4"},{"text":"rowHeightChanged","tagName":"h4"},{"text":"rowHighlighted","tagName":"h4"}]},{"title":"tr.grid.Cell","filename":"apis/composite_grid/tr.grid.Cell.html","contents":[{"text":"new Cell(opt_elementopt, opt_sectionopt)","tagName":"h4"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.ElementWrapper","tagName":"a"},{"text":"Members","tagName":"h3"},{"text":"freezeLayout","tagName":"h4"},{"text":"isFrozen","tagName":"h4"},{"text":"setAutoContentClipping","tagName":"h4"},{"text":"Methods","tagName":"h3"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#addClass","tagName":"a"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementWrapper#addContent","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#disable","tagName":"a"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"dispose()","tagName":"h4"},{"text":"tr.ElementWrapper#dispose","tagName":"a"},{"text":"tr.IElementControl#dispose","tagName":"a"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#enable","tagName":"a"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#enableClass","tagName":"a"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#fillParentHeight","tagName":"a"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#fillParentWidth","tagName":"a"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#getAttribute","tagName":"a"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.ElementWrapper#getBoundingClientRect","tagName":"a"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"tr.ElementWrapper#getClass","tagName":"a"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#getContent","tagName":"a"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"tr.ElementWrapper#getElement","tagName":"a"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.ElementWrapper#getHeight","tagName":"a"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"tr.ElementWrapper#getId","tagName":"a"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.ElementWrapper#getLeft","tagName":"a"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.ElementWrapper#getNextSibling","tagName":"a"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.ElementWrapper#getParent","tagName":"a"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.ElementWrapper#getScrollLeft","tagName":"a"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.ElementWrapper#getScrollTop","tagName":"a"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"getSection()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#getStyle","tagName":"a"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.ElementWrapper#getTextContent","tagName":"a"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextElement()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.ElementWrapper#getTooltip","tagName":"a"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.ElementWrapper#getTop","tagName":"a"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.ElementWrapper#getWidth","tagName":"a"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#hasClass","tagName":"a"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasElement()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#hide","tagName":"a"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"initialize()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementWrapper#insertAfter","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementWrapper#insertBefore","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"insertFloatingIcon(elem, opt_orderopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"insertFrontIcon(elem, opt_orderopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.ElementWrapper#isEnabled","tagName":"a"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.ElementWrapper#isEndOfHorizontalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.ElementWrapper#isEndOfVerticalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.ElementWrapper#isVisible","tagName":"a"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl#event:blur","tagName":"a"},{"text":"tr.ElementWrapper#listen","tagName":"a"},{"text":"tr.IElementControl#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"lockContent(opt_locked)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#removeAttribute","tagName":"a"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#removeClass","tagName":"a"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementWrapper#removeContent","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeFloatingIcon(elemRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeFrontIcon(elemRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeIcon()","tagName":"h4"},{"text":"reset()","tagName":"h4"},{"text":"resetClass()","tagName":"h4"},{"text":"resetToInitialState()","tagName":"h4"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setAttribute","tagName":"a"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setAttributes","tagName":"a"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setClass","tagName":"a"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementWrapper#setContent","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setContentTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setHeight","tagName":"a"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setId","tagName":"a"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setLeft","tagName":"a"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementWrapper#setParent","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setStyle","tagName":"a"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setStyles","tagName":"a"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setTextContent","tagName":"a"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setTooltip","tagName":"a"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setTop","tagName":"a"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#setWidth","tagName":"a"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#show","tagName":"a"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#toggleClass","tagName":"a"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.ElementWrapper#toString","tagName":"a"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#unlisten","tagName":"a"},{"text":"tr.IElementControl#unlisten","tagName":"a"},{"text":"unlistenAll(opt_typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementWrapper#unlistenAll","tagName":"a"},{"text":"tr.IElementControl#unlistenAll","tagName":"a"},{"text":"updateIcon(icon)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"updatePadding()","tagName":"h4"}]},{"title":"tr.grid.CellSpans","filename":"apis/composite_grid/tr.grid.CellSpans.html","contents":[{"text":"new CellSpans()","tagName":"h4"},{"text":"Methods","tagName":"h3"},{"text":"clearAllSpans()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"getAllSpans()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"getColSpan(indexX, indexY)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getOccupyingSpan(indexX, indexY)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"getRowSpan(indexX, indexY)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSpan(indexX, indexY)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"hasSpan()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"removeColumn(at)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeSpan()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"removeSpanByColIndex(at, opt_aryopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"removeSpanStartedFromRowIndex(at, opt_aryopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"setColSpan(indexX, indexY, spanVal)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"setRowSpan(indexX, indexY, spanVal)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.CellSpan","tagName":"a"},{"text":"shiftColumn(from, amount)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"}]},{"title":"tr.grid.DragAndDropTitlePlugin","filename":"apis/composite_grid/tr.grid.DragAndDropTitlePlugin.html","contents":[{"text":"new DragAndDropTitlePlugin(opt_restrictions, opt_exclusions, opt_targetSectionopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.IPlugin","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.grid.Plugin","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableDragBox(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableMoving(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getGridElementFromPoint(x, y)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Plugin#getGridElementFromPoint","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getMarker()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.IndexMarker","tagName":"a"},{"text":"getName()","tagName":"h4"},{"text":"tr.grid.Plugin#getName","tagName":"a"},{"text":"tr.grid.IPlugin#getName","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRelativeGrid(e)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.grid.Plugin#getRelativeGrid","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"initialize(ownernon-null)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"tr.grid.Plugin#initialize","tagName":"a"},{"text":"tr.grid.IPlugin#initialize","tagName":"a"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"lockFrozenColumn(lock)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlisten","tagName":"a"},{"text":"unlistenAll(typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlistenAll","tagName":"a"},{"text":"unload(ownernon-null)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"tr.grid.Plugin#unload","tagName":"a"},{"text":"tr.grid.IPlugin#unload","tagName":"a"},{"text":"Events","tagName":"h3"},{"text":"columnMoved","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            startColumnIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            destColumnIndex                                                    number                                                                    ","tagName":"tr"},{"text":"dragged","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            *                                                    *                                                            Depends on the browser's mouse event arguments        ","tagName":"tr"}]},{"title":"tr.grid.HScrollbar","filename":"apis/composite_grid/tr.grid.HScrollbar.html","contents":[{"text":"new HScrollbar()","tagName":"h4"},{"text":"Extends","tagName":"h3"},{"text":"tr.grid.Scrollbar","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#addClass","tagName":"a"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#addContent","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addWheelListener(elem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#addWheelListener","tagName":"a"},{"text":"attachToExternalElement(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#attachToExternalElement","tagName":"a"},{"text":"calculateContentSize()","tagName":"h4"},{"text":"tr.grid.Scrollbar#calculateContentSize","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#disable","tagName":"a"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"disableKeyboardInput(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#disableKeyboardInput","tagName":"a"},{"text":"disableMouseWheel(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#disableMouseWheel","tagName":"a"},{"text":"disableTouchInput(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#disableTouchInput","tagName":"a"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#enable","tagName":"a"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enableClass","tagName":"a"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentHeight","tagName":"a"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentWidth","tagName":"a"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"flash()","tagName":"h4"},{"text":"tr.grid.Scrollbar#flash","tagName":"a"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getAttribute","tagName":"a"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAutoHide()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getAutoHide","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.ElementControl#getBoundingClientRect","tagName":"a"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"tr.ElementControl#getClass","tagName":"a"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getContent","tagName":"a"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContentSize()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getContentSize","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContentWidth()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDefaultMouseWheelLogic()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getDefaultMouseWheelLogic","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"tr.ElementControl#getElement","tagName":"a"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.ElementControl#getHeight","tagName":"a"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"tr.ElementControl#getId","tagName":"a"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.ElementControl#getLeft","tagName":"a"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.ElementControl#getNextSibling","tagName":"a"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.ElementControl#getParent","tagName":"a"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollGap()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getScrollGap","tagName":"a"},{"text":"scrollHeight","tagName":"a"},{"text":"scrollWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getScrollLeft","tagName":"a"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.ElementControl#getScrollTop","tagName":"a"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getStyle","tagName":"a"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.ElementControl#getTextContent","tagName":"a"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.ElementControl#getTooltip","tagName":"a"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.ElementControl#getTop","tagName":"a"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTrackSize()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getTrackSize","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTrackThickness()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getTrackThickness","tagName":"a"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getWidth","tagName":"a"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hasClass","tagName":"a"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hide","tagName":"a"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertAfter","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertBefore","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"isActive()","tagName":"h4"},{"text":"tr.grid.Scrollbar#isActive","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.grid.Scrollbar#isEnabled","tagName":"a"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.grid.Scrollbar#isEndOfHorizontalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.ElementControl#isVisible","tagName":"a"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeAttribute","tagName":"a"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeClass","tagName":"a"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#removeContent","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeWheelListener(elem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#removeWheelListener","tagName":"a"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttribute","tagName":"a"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttributes","tagName":"a"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"setAutoHide(hide)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setAutoHide","tagName":"a"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setClass","tagName":"a"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setContent","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setHeight","tagName":"a"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setId","tagName":"a"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setLeft","tagName":"a"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setMouseWheelSpeed(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setMouseWheelSpeed","tagName":"a"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setParent","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"setScrollingStep(px)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setScrollingStep","tagName":"a"},{"text":"setScrollLeft(px)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyle","tagName":"a"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyles","tagName":"a"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTextContent","tagName":"a"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTooltip","tagName":"a"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTop","tagName":"a"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setTrackSize(size, paneSize)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setTrackSize","tagName":"a"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setWidth","tagName":"a"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#show","tagName":"a"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#toggleClass","tagName":"a"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.ElementControl#toString","tagName":"a"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"update()","tagName":"h4"},{"text":"tr.grid.Scrollbar#update","tagName":"a"},{"text":"Returns:","tagName":"h5"}]},{"title":"tr.grid.ResizableTitlePlugin","filename":"apis/composite_grid/tr.grid.ResizableTitlePlugin.html","contents":[{"text":"new ResizableTitlePlugin()","tagName":"h4"},{"text":"tr.grid.IPlugin","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.grid.Plugin","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"setGuidelineColor(color)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableResizing(colIndex, disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getDraggedAnchorX()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDraggedColumnIndex()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getGridElementFromPoint(x, y)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Plugin#getGridElementFromPoint","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getName()","tagName":"h4"},{"text":"tr.grid.Plugin#getName","tagName":"a"},{"text":"tr.grid.IPlugin#getName","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRelativeGrid(e)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.grid.Plugin#getRelativeGrid","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"initialize(ownernon-null)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"tr.grid.Plugin#initialize","tagName":"a"},{"text":"tr.grid.IPlugin#initialize","tagName":"a"},{"text":"isColumnResizable(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"keepScaleColumnAfterResize(keepScalableColumn)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"setColumnFitWidth(colIndex, width)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnWidths(cols, width, opt_scalableopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlisten","tagName":"a"},{"text":"unlistenAll(typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlistenAll","tagName":"a"},{"text":"unload(ownernon-null)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"tr.grid.Plugin#unload","tagName":"a"},{"text":"tr.grid.IPlugin#unload","tagName":"a"}]},{"title":"tr.grid.Scrollbar","filename":"apis/composite_grid/tr.grid.Scrollbar.html","contents":[{"text":"new Scrollbar()","tagName":"h4"},{"text":"tr.IElementControl","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.ElementControl","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"updateTrackThickness()","tagName":"h4"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#addClass","tagName":"a"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#addContent","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addWheelListener(elem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"attachToExternalElement(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"calculateContentSize()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#disable","tagName":"a"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"disableKeyboardInput(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableMouseWheel(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableTouchInput(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enable","tagName":"a"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enableClass","tagName":"a"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentHeight","tagName":"a"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentWidth","tagName":"a"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"flash()","tagName":"h4"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getAttribute","tagName":"a"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAutoHide()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.ElementControl#getBoundingClientRect","tagName":"a"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"tr.ElementControl#getClass","tagName":"a"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getContent","tagName":"a"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContentSize()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDefaultMouseWheelLogic()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"tr.ElementControl#getElement","tagName":"a"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.ElementControl#getHeight","tagName":"a"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"tr.ElementControl#getId","tagName":"a"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.ElementControl#getLeft","tagName":"a"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.ElementControl#getNextSibling","tagName":"a"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.ElementControl#getParent","tagName":"a"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollGap()","tagName":"h4"},{"text":"scrollHeight","tagName":"a"},{"text":"scrollWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.ElementControl#getScrollLeft","tagName":"a"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.ElementControl#getScrollTop","tagName":"a"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getStyle","tagName":"a"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.ElementControl#getTextContent","tagName":"a"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.ElementControl#getTooltip","tagName":"a"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.ElementControl#getTop","tagName":"a"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTrackSize()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getTrackThickness()","tagName":"h4"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.ElementControl#getWidth","tagName":"a"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hasClass","tagName":"a"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hide","tagName":"a"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertAfter","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertBefore","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"isActive()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.ElementControl#isEnabled","tagName":"a"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.ElementControl#isVisible","tagName":"a"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeAttribute","tagName":"a"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeClass","tagName":"a"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#removeContent","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeWheelListener(elem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttribute","tagName":"a"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttributes","tagName":"a"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"setAutoHide(hide)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setClass","tagName":"a"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setContent","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setHeight","tagName":"a"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setId","tagName":"a"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setLeft","tagName":"a"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setMouseWheelSpeed(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setParent","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"setScrollingStep(px)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyle","tagName":"a"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyles","tagName":"a"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTextContent","tagName":"a"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTooltip","tagName":"a"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTop","tagName":"a"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setTrackSize(size, paneSize)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setWidth","tagName":"a"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#show","tagName":"a"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#toggleClass","tagName":"a"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.ElementControl#toString","tagName":"a"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"update()","tagName":"h4"},{"text":"Returns:","tagName":"h5"}]},{"title":"tr.grid.SectionSettings","filename":"apis/composite_grid/tr.grid.SectionSettings.html","contents":[{"text":"new SectionSettings(gridnon-null)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.EventDispatcher","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"activateColumns(activations, firstIndex, lastIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableConflation(opt_disabled)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableDataBinding(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableColumnVirtualization(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"extendDataEventArg(eopt, beginopt, endopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"extendEventArg(eopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"extendRenderEventArg(e, fromR, toR)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getAutoSyncRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getChildren()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.SectionSettings","tagName":"a"},{"text":"getData(colName, rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDataChangedConflator()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.Conflator","tagName":"a"},{"text":"getDataSource()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataView","tagName":"a"},{"text":"getId()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getIndex()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.grid.SectionSettings","tagName":"a"},{"text":"getRootDataSource()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.DataTable","tagName":"a"},{"text":"tr.DataView","tagName":"a"},{"text":"getRowData(rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSection()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"getSectionName()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getType()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isBinding()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"removeRowData(rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"rerender()","tagName":"h4"},{"text":"setAutoSyncRowCount(bool)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setData(colName, rowRef, data)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setDataSource(dataView)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.DataView","tagName":"a"},{"text":"setId(stropt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setType(type)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"snapshot(clone)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ILayoutGrid","tagName":"a"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlisten","tagName":"a"},{"text":"unlistenAll(typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlistenAll","tagName":"a"},{"text":"updateRowData(fromRowIndexopt, lastRowIndexopt, eopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"tr.grid.SortableTitlePlugin","filename":"apis/composite_grid/tr.grid.SortableTitlePlugin.html","contents":[{"text":"new SortableTitlePlugin(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.IPlugin","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"tr.grid.Plugin","tagName":"a"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            sortable                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enable, the column can be sorted by user click        ","tagName":"tr"},{"text":"                            sortBy                                                    string                                                                                        <optional>                                                                                                                                                Field to be used for sorting. If defined, user can click at the header section to sort the column        ","tagName":"tr"},{"text":"                            sortLogic                                                    tr.DataTable.SortLogic                                                                                        <optional>                                                                                                                            null                                                        Custom compare function for sorting        ","tagName":"tr"},{"text":"                            sortingLogic                                                    tr.DataTable.SortLogic                                                                                        <optional>                                                                                                                                                Alias to `sortLogic`        ","tagName":"tr"},{"text":"                            sorter                                                    tr.DataTable.SortLogic                                                                                        <optional>                                                                                                                                                Alias to `sortLogic`        ","tagName":"tr"},{"text":"                            defaultSort                                                    string                                                                                        <optional>                                                                                                                            null                                                        Set to \"d\" for descending order and \"a\" for ascending order        ","tagName":"tr"},{"text":"InitialSort","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                                                                                                                                                    Index of the column        ","tagName":"tr"},{"text":"                            sortOrder                                                    tr.grid.SortableTitlePlugin~SortOrder                                                                                        <optional>                                                                                                                            null                                                        Set to \"d\" for descending order and \"a\" for ascending order        ","tagName":"tr"},{"text":"tr.grid.SortableTitlePlugin~SortOrder","tagName":"a"},{"text":"                            order                                                    tr.grid.SortableTitlePlugin~SortOrder                                                                                        <optional>                                                                                                                                                Alias of sortOrder        ","tagName":"tr"},{"text":"tr.grid.SortableTitlePlugin~SortOrder","tagName":"a"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            initialSort                                                    tr.grid.SortableTitlePlugin~InitialSort | Array.<tr.grid.SortableTitlePlugin.InitialSort>                                                                                        <optional>                                                                                                                            null                                                        Set this config to initiate sorting after grid is created.        ","tagName":"tr"},{"text":"tr.grid.SortableTitlePlugin~InitialSort","tagName":"a"},{"text":"                            multicolumn                                                    boolean | number                                                                                        <optional>                                                                                                                            false                                                        Allow mulitple columns to be sorted at the same time. If number is defined, it is treated as maximum number of column to be sorted.        ","tagName":"tr"},{"text":"                            multiColumn                                                    boolean | number                                                                                        <optional>                                                                                                                            false                                                        Alias to `multicolumn`        ","tagName":"tr"},{"text":"                            threeStatesSorting                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, sorting will cycle through ascending, descending and original order states.        ","tagName":"tr"},{"text":"                            sortLogic                                                    Object.<string, tr.DataTable.SortLogic>                                                                                        <optional>                                                                                                                            null                                                        Custom logic for sorting based on the specified field. The key is field name and the value pair is a function.        ","tagName":"tr"},{"text":"                            disableDoubleClickToSort                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, double click on column title to sort        ","tagName":"tr"},{"text":"                            sortableColumns                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, all columns will be sortable by field automatically        ","tagName":"tr"},{"text":"                            sortableIndicator                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, sort indicator (diamond) icon will always show regardless of sorting states. In Halo theme, this option will be enabled by default.        ","tagName":"tr"},{"text":"                            indicatorOnly                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, data will not be sorted, but the UI is rendered normally. This is useful for server side sorting.        ","tagName":"tr"},{"text":"                            mode                                                    string                                                                                        <optional>                                                                                                                                                Set to \"manual\" to disable data sorting. Deprecated in favor of `indicatorOnly`        ","tagName":"tr"},{"text":"                            disabled                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, header section cannot be clicked and no sort UI is rendered. Sorting can still be triggered only through `sortColumn` method.        ","tagName":"tr"},{"text":"                            columnSorted                                                    function                                                                                        <optional>                                                                                                                                                A shortcut to define the columnSorted event handler        ","tagName":"tr"},{"text":"                            preClicked                                                    function                                                                                        <optional>                                                                                                                                                A shortcut to define the preClicked event handler        ","tagName":"tr"},{"text":"                            clicked                                                    function                                                                                        <optional>                                                                                                                                                A shortcut to define the clicked event handler        ","tagName":"tr"},{"text":"                            preDataSorting                                                    function                                                                                        <optional>                                                                                                                                                A shortcut to define the preDataSorting event handler        ","tagName":"tr"},{"text":"SortOrder","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Methods","tagName":"h3"},{"text":"afterInit()","tagName":"h4"},{"text":"clearSortState(opt_argopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableCellClick(cell, disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"disableColumnSorting(columns, disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableDataSorting(disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableDoubleClickToSort(disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableSortSymbols(disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableTwoStateSorting(disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getColumnMenu(colIndex, config)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnSortingField(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnSortingFields()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDataColumnMap()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getGridElementFromPoint(x, y)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Plugin#getGridElementFromPoint","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getIcons()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName()","tagName":"h4"},{"text":"tr.grid.Plugin#getName","tagName":"a"},{"text":"tr.grid.IPlugin#getName","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getRelativeGrid(e)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.grid.Plugin#getRelativeGrid","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"getSortedColumnIndex(priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSortedColumns()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSortingStates()","tagName":"h4"},{"text":"tr.grid.SortableTitlePlugin#getSortedColumns","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getSortOrder(colIndexopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSortPriority(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(ownernon-null)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"tr.grid.Plugin#initialize","tagName":"a"},{"text":"tr.grid.IPlugin#initialize","tagName":"a"},{"text":"isColumnSorted()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler, opt_priorityopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#listen","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.Grid();\ngrid.listen(\"click\", function(e) { console.log(\"Grid is clicked\"); });","tagName":"pre"},{"text":"refresh()","tagName":"h4"},{"text":"Fires:","tagName":"h5"},{"text":"tr.grid.SortableTitlePlugin#event:preDataSorting","tagName":"a"},{"text":"setClickDelayInterval(opt_msopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnSortingField(colIndex, field, sortLogicopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setDataColumnMap(dataMap)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setFirstSortOrder(colIdentifier, sortOrderopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSortableColumnCount(count)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSortLogic(field, func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSortLogics(sortLogic)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"sortColumn(colIndex, sortOrderopt, opt_argopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.grid.SortableTitlePlugin#event:preDataSorting","tagName":"a"},{"text":"tr.grid.SortableTitlePlugin#event:columnSorted","tagName":"a"},{"text":"sortColumns(sortOptions, opt_argopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"tr.grid.SortableTitlePlugin#event:preDataSorting","tagName":"a"},{"text":"tr.grid.SortableTitlePlugin#event:columnSorted","tagName":"a"},{"text":"unlisten(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlisten","tagName":"a"},{"text":"unlistenAll(typeopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.EventDispatcher#unlistenAll","tagName":"a"},{"text":"unload(ownernon-null)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.Grid","tagName":"a"},{"text":"tr.grid.Plugin#unload","tagName":"a"},{"text":"tr.grid.IPlugin#unload","tagName":"a"},{"text":"updateSortSymbols()","tagName":"h4"},{"text":"Events","tagName":"h3"},{"text":"clicked","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            sortOrder                                                    string                                                            \"a\" for \"ascending, \"d\" for descending, and \"n\" for none        ","tagName":"tr"},{"text":"                            dataColumnName                                                    string                                                            Field that is used for sorting        ","tagName":"tr"},{"text":"columnSorted","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            sortOrder                                                    string                                                            \"a\" for \"ascending, \"d\" for descending, and \"n\" for none        ","tagName":"tr"},{"text":"                            sortedField                                                    string                                                            Field that is used for sorting        ","tagName":"tr"},{"text":"                            colIndices                                                    Array.<number>                                                            An array of colIndex        ","tagName":"tr"},{"text":"                            sortOrders                                                    Array.<string>                                                            An array of sortOrder        ","tagName":"tr"},{"text":"                            sortedFields                                                    Array.<string>                                                            An array of sortedField        ","tagName":"tr"},{"text":"preClicked","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            target                                                    Element                                                            Element being clicked        ","tagName":"tr"},{"text":"Example:","tagName":"h5"},{"text":"function onPreClicked(e) {\n  e.cancel = true; // Cancel sorting operation\n}","tagName":"pre"},{"text":"preDataSorting","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            isUserAction                                                    boolean                                                                                        <optional>                                                                                    This has true value, if event initiate from clicking title/header section        ","tagName":"tr"}]},{"title":"tr.grid.VScrollbar","filename":"apis/composite_grid/tr.grid.VScrollbar.html","contents":[{"text":"new VScrollbar()","tagName":"h4"},{"text":"Extends","tagName":"h3"},{"text":"tr.grid.Scrollbar","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"addClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#addClass","tagName":"a"},{"text":"tr.IElementControl#addClass","tagName":"a"},{"text":"addContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#addContent","tagName":"a"},{"text":"tr.IElementControl#addContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addWheelListener(elem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#addWheelListener","tagName":"a"},{"text":"attachToExternalElement(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#attachToExternalElement","tagName":"a"},{"text":"calculateContentSize()","tagName":"h4"},{"text":"tr.grid.Scrollbar#calculateContentSize","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"disable(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#disable","tagName":"a"},{"text":"tr.IElementControl#disable","tagName":"a"},{"text":"disableKeyboardInput(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#disableKeyboardInput","tagName":"a"},{"text":"disableMouseWheel(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#disableMouseWheel","tagName":"a"},{"text":"disableTouchInput(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#disableTouchInput","tagName":"a"},{"text":"enable(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#enable","tagName":"a"},{"text":"tr.IElementControl#enable","tagName":"a"},{"text":"enableClass(str, opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#enableClass","tagName":"a"},{"text":"tr.IElementControl#enableClass","tagName":"a"},{"text":"fillParentHeight(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentHeight","tagName":"a"},{"text":"tr.IElementControl#fillParentHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"fillParentWidth(opt_percentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#fillParentWidth","tagName":"a"},{"text":"tr.IElementControl#fillParentWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"flash()","tagName":"h4"},{"text":"tr.grid.Scrollbar#flash","tagName":"a"},{"text":"getAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getAttribute","tagName":"a"},{"text":"tr.IElementControl#getAttribute","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAutoHide()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getAutoHide","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getBoundingClientRect()","tagName":"h4"},{"text":"tr.ElementControl#getBoundingClientRect","tagName":"a"},{"text":"tr.IElementControl#getBoundingClientRect","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getClass()","tagName":"h4"},{"text":"tr.ElementControl#getClass","tagName":"a"},{"text":"tr.IElementControl#getClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContent(opt_allContentopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getContent","tagName":"a"},{"text":"tr.IElementControl#getContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getContentHeight()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getContentSize()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getContentSize","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getDefaultMouseWheelLogic()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getDefaultMouseWheelLogic","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"tr.ElementControl#getElement","tagName":"a"},{"text":"tr.IElementControl#getElement","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getHeight()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getHeight","tagName":"a"},{"text":"tr.IElementControl#getHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"tr.ElementControl#getId","tagName":"a"},{"text":"tr.IElementControl#getId","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getLeft()","tagName":"h4"},{"text":"tr.ElementControl#getLeft","tagName":"a"},{"text":"tr.IElementControl#getLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getNextSibling()","tagName":"h4"},{"text":"tr.ElementControl#getNextSibling","tagName":"a"},{"text":"tr.IElementControl#getNextSibling","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"tr.ElementControl#getParent","tagName":"a"},{"text":"tr.IElementControl#getParent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollGap()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getScrollGap","tagName":"a"},{"text":"scrollHeight","tagName":"a"},{"text":"scrollWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollLeft()","tagName":"h4"},{"text":"tr.ElementControl#getScrollLeft","tagName":"a"},{"text":"tr.IElementControl#getScrollLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getScrollTop()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getScrollTop","tagName":"a"},{"text":"tr.IElementControl#getScrollTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getStyle(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#getStyle","tagName":"a"},{"text":"tr.IElementControl#getStyle","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextContent()","tagName":"h4"},{"text":"tr.ElementControl#getTextContent","tagName":"a"},{"text":"tr.IElementControl#getTextContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"tr.ElementControl#getTooltip","tagName":"a"},{"text":"tr.IElementControl#getTooltip","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTop()","tagName":"h4"},{"text":"tr.ElementControl#getTop","tagName":"a"},{"text":"tr.IElementControl#getTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTrackSize()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getTrackSize","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTrackThickness()","tagName":"h4"},{"text":"tr.grid.Scrollbar#getTrackThickness","tagName":"a"},{"text":"getWidth()","tagName":"h4"},{"text":"tr.ElementControl#getWidth","tagName":"a"},{"text":"tr.IElementControl#getWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hasClass","tagName":"a"},{"text":"tr.IElementControl#hasClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hide(opt_hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#hide","tagName":"a"},{"text":"tr.IElementControl#hide","tagName":"a"},{"text":"insertAfter(previousSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertAfter","tagName":"a"},{"text":"tr.IElementControl#insertAfter","tagName":"a"},{"text":"insertBefore(nextSibling)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#insertBefore","tagName":"a"},{"text":"tr.IElementControl#insertBefore","tagName":"a"},{"text":"isActive()","tagName":"h4"},{"text":"tr.grid.Scrollbar#isActive","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEnabled()","tagName":"h4"},{"text":"tr.grid.Scrollbar#isEnabled","tagName":"a"},{"text":"tr.IElementControl#isEnabled","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfHorizontalScroll()","tagName":"h4"},{"text":"tr.ElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfHorizontalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isEndOfVerticalScroll()","tagName":"h4"},{"text":"tr.grid.Scrollbar#isEndOfVerticalScroll","tagName":"a"},{"text":"tr.IElementControl#isEndOfVerticalScroll","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isVisible()","tagName":"h4"},{"text":"tr.ElementControl#isVisible","tagName":"a"},{"text":"tr.IElementControl#isVisible","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeAttribute(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeAttribute","tagName":"a"},{"text":"tr.IElementControl#removeAttribute","tagName":"a"},{"text":"removeClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#removeClass","tagName":"a"},{"text":"tr.IElementControl#removeClass","tagName":"a"},{"text":"removeContent(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#removeContent","tagName":"a"},{"text":"tr.IElementControl#removeContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"removeWheelListener(elem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#removeWheelListener","tagName":"a"},{"text":"setAttribute(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttribute","tagName":"a"},{"text":"tr.IElementControl#setAttribute","tagName":"a"},{"text":"setAttributes(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setAttributes","tagName":"a"},{"text":"tr.IElementControl#setAttributes","tagName":"a"},{"text":"setAutoHide(hide)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setAutoHide","tagName":"a"},{"text":"setClass(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setClass","tagName":"a"},{"text":"tr.IElementControl#setClass","tagName":"a"},{"text":"setContent(content, opt_tooltipopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setContent","tagName":"a"},{"text":"tr.IElementControl#setContent","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setHeight(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setHeight","tagName":"a"},{"text":"tr.IElementControl#setHeight","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setId(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setId","tagName":"a"},{"text":"tr.IElementControl#setId","tagName":"a"},{"text":"setLeft(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setLeft","tagName":"a"},{"text":"tr.IElementControl#setLeft","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setMouseWheelSpeed(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setMouseWheelSpeed","tagName":"a"},{"text":"setParent(parent, opt_prependopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.IElementControl","tagName":"a"},{"text":"tr.ElementControl#setParent","tagName":"a"},{"text":"tr.IElementControl#setParent","tagName":"a"},{"text":"setScrollingStep(px)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setScrollingStep","tagName":"a"},{"text":"setScrollTop(px)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setStyle(str, val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyle","tagName":"a"},{"text":"tr.IElementControl#setStyle","tagName":"a"},{"text":"setStyles(json)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setStyles","tagName":"a"},{"text":"tr.IElementControl#setStyles","tagName":"a"},{"text":"setTextContent(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTextContent","tagName":"a"},{"text":"tr.IElementControl#setTextContent","tagName":"a"},{"text":"setTooltip(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTooltip","tagName":"a"},{"text":"tr.IElementControl#setTooltip","tagName":"a"},{"text":"setTop(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setTop","tagName":"a"},{"text":"tr.IElementControl#setTop","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setTrackSize(size, paneSize)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.grid.Scrollbar#setTrackSize","tagName":"a"},{"text":"setWidth(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#setWidth","tagName":"a"},{"text":"tr.IElementControl#setWidth","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"show(opt_shownopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#show","tagName":"a"},{"text":"tr.IElementControl#show","tagName":"a"},{"text":"toggleClass(str, opt_replacementopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"tr.ElementControl#toggleClass","tagName":"a"},{"text":"tr.IElementControl#toggleClass","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toString()","tagName":"h4"},{"text":"tr.ElementControl#toString","tagName":"a"},{"text":"tr.IElementControl#toString","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"update()","tagName":"h4"},{"text":"tr.grid.Scrollbar#update","tagName":"a"},{"text":"Returns:","tagName":"h5"}]},{"title":"ColumnDefinition","filename":"apis/rt_grid/ColumnDefinition.html","contents":[{"text":"new ColumnDefinition(columnOption, hostGridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnDefinition~Options","tagName":"a"},{"text":"Type Definitions","tagName":"h3"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            field                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Field for real-time, ADC, formula sources        ","tagName":"tr"},{"text":"                            dataType                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        data type eg. string, datetime, number        ","tagName":"tr"},{"text":"                            formulaReference                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                                ","tagName":"tr"},{"text":"                            require                                                    Array.<string>                                                                                        <optional>                                                                                                                            null                                                        Extra fields required by this column will be requested for real-time data.        ","tagName":"tr"},{"text":"                            name                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Label of the column        ","tagName":"tr"},{"text":"                            notRealTimeField                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, the `field` will not be requested for real-time data. By enabling this,  `rowSorting` will also be disabled, if not specified.        ","tagName":"tr"},{"text":"                            tooltip                                                    boolean | string | null                                                                                        <optional>                                                                                                                            null                                                        Show tooltip in header section        ","tagName":"tr"},{"text":"                            headerBinding                                                    function                                                                                        <optional>                                                                                                                            null                                                        Method for custom header rendering.        ","tagName":"tr"},{"text":"                            headerRenderer                                                    function                                                                                        <optional>                                                                                                                            null                                                        Alias to `headerBinding`        ","tagName":"tr"},{"text":"                            binding                                                    function                                                                                        <optional>                                                                                                                            null                                                        Method for custom rendering. It will be executed on each data update and scrolling        ","tagName":"tr"},{"text":"                            renderer                                                    function                                                                                        <optional>                                                                                                                            null                                                        Alias to `binding`        ","tagName":"tr"},{"text":"                            sortLogic                                                    ColumnDefinition~SortLogic                                                                                        <optional>                                                                                                                            null                                                                ","tagName":"tr"},{"text":"ColumnDefinition~SortLogic","tagName":"a"},{"text":"                            sortingLogic                                                    ColumnDefinition~SortLogic                                                                                        <optional>                                                                                                                            null                                                        Alias to `sortLogic`        ","tagName":"tr"},{"text":"ColumnDefinition~SortLogic","tagName":"a"},{"text":"                            sorter                                                    ColumnDefinition~SortLogic                                                                                        <optional>                                                                                                                            null                                                        Alias to `sortLogic`        ","tagName":"tr"},{"text":"ColumnDefinition~SortLogic","tagName":"a"},{"text":"                            rowSorting                                                    boolean                                                                                        <optional>                                                                                                                            null                                                        If set to true, RowDefinition object will be used for sorting comparison. If set to false, data from the given `field` will be used for sorting comparison.        ","tagName":"tr"},{"text":"                            sortable                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, the column cannot be sorted by user click        ","tagName":"tr"},{"text":"                            sort                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        This column will be sorted at the initialization in the specified order (e.g. \"asc\", \"desc\")        ","tagName":"tr"},{"text":"                            width                                                    number                                                                                        <optional>                                                                                                                            NaN                                                        If specified, column will have a fixed width in pixel        ","tagName":"tr"},{"text":"                            minWidth                                                    number                                                                                        <optional>                                                                                                                            NaN                                                        If specified, column will have a minimum width in pixel        ","tagName":"tr"},{"text":"                            className                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                                ","tagName":"tr"},{"text":"                            class                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Alias to `className`        ","tagName":"tr"},{"text":"                            textAlign                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Available values are: left|center|right        ","tagName":"tr"},{"text":"                            alignment                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Alias to `textAlign`        ","tagName":"tr"},{"text":"                            hidden                                                    boolean                                                                                        <optional>                                                                                                                            false                                                                ","tagName":"tr"},{"text":"                            id                                                    string                                                                                                                                                                                                    Id for unique identifier        ","tagName":"tr"},{"text":"SortLogic(valA, valB, order, ctx)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Methods","tagName":"h3"},{"text":"getRealTimeFields(fields, colDef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnDefinition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"isAdcField(field)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isFormulaField(field)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isRealTimeField(field)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"addRenderer(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"dispose()","tagName":"h4"},{"text":"getAllFields()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getClasses()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(colOptionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDataType()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getField()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getFieldDataType()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getFieldDefinition()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getHeaderRenderer()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getId()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getInitialSortOrder()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getMinWidth()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRenderer()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRequiredFields()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRequireFields()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSorter()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getTextAlign()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getTooltip()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getUserModel()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getWidth()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hide(boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"initialize(columnOption)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnDefinition~Options","tagName":"a"},{"text":"isFormulaField()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isHidden()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isRealTimeField()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isSortable()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"setHeaderRenderer(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setName(str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRenderer(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSorter(funcopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnDefinition~SortLogic","tagName":"a"}]},{"title":"Grid","filename":"apis/rt_grid/Grid.html","contents":[{"text":"new Grid(placeholderopt, configopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~GridOptions","tagName":"a"},{"text":"Extends","tagName":"h3"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnReference","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"ColumnDefinition","tagName":"a"},{"text":"GridOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            columns                                                    Array.<(ColumnDefinition~Options|string)>                                                                                        <optional>                                                                                                                                                Collection of the column definitions        ","tagName":"tr"},{"text":"ColumnDefinition~Options","tagName":"a"},{"text":"                            defaultColumnOptions                                                    ColumnDefinition~Options                                                                                        <optional>                                                                                                                                                All Columns will inherit from this default object        ","tagName":"tr"},{"text":"ColumnDefinition~Options","tagName":"a"},{"text":"                            rows                                                    Array.<RowDefinition~Options>                                                                                        <optional>                                                                                                                                                Collection of the row definitions        ","tagName":"tr"},{"text":"RowDefinition~Options","tagName":"a"},{"text":"                            fields                                                    Array.<string>                                                                                        <optional>                                                                                                                                                Shorthand for setting fields        ","tagName":"tr"},{"text":"                            rics                                                    Array.<string>                                                                                        <optional>                                                                                                                                                Shorthand for creating row definition        ","tagName":"tr"},{"text":"                            plugins                                                    Array                                                                                        <optional>                                                                                                                                                Additional plugins for core grid (from getBlotter()/getCoreGrid())        ","tagName":"tr"},{"text":"                            extensions                                                    Array                                                                                        <optional>                                                                                                                                                Alias to `plugins`        ","tagName":"tr"},{"text":"                            scrollbar                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Enable both vertical and horizontal scrollbar in grid        ","tagName":"tr"},{"text":"                            linearWheelScrolling                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, wheel scrolling will move the content linearly regardless of how long the content is (i.e. no skipping).        ","tagName":"tr"},{"text":"                            stepScroll                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, a full row will be scrolled at a time instead of actual scroll value.        ","tagName":"tr"},{"text":"                            pageSize                                                    string                                                                                        <optional>                                                                                                                            0                                                        Make grid show specified number of row        ","tagName":"tr"},{"text":"                            rowHeight                                                    number                                                                                        <optional>                                                                                                                            32                                                        Set default row height for body (content) section        ","tagName":"tr"},{"text":"                            headerRowHeight                                                    number                                                                                        <optional>                                                                                                                            32                                                        Set default row height for header section        ","tagName":"tr"},{"text":"                            noColumnDragging                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        All columns can be moved by dragging. If this option is true, the feature is disabled        ","tagName":"tr"},{"text":"                            columnReorder                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Alias with noColumnDragging but in opposite value. This property deprecated in favor of noColumnDragging.        ","tagName":"tr"},{"text":"                            rowHighlighting                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Highlight a row when hovering mouse over grid        ","tagName":"tr"},{"text":"                            autoLayoutUpdate                                                    boolean | number                                                                                        <optional>                                                                                                                            false                                                        Grid will check for layout change periodically.        ","tagName":"tr"},{"text":"                            columnFreezing                                                    number                                                                                        <optional>                                                                                                                                                Enable horizontal scrollbar after `columnFreezing` index        ","tagName":"tr"},{"text":"                            freezeColumn                                                    number                                                                                        <optional>                                                                                                                                                An alias to columnFreezing        ","tagName":"tr"},{"text":"                            pinnedRightColumns                                                    number                                                                                        <optional>                                                                                                                            0                                                        Number of columns to be frozen/pinned on the right side.        ","tagName":"tr"},{"text":"                            staticDataRows                                                    Array                                                                                        <optional>                                                                                                                                                Shorthand for calling Grid#addStaticDataRows        ","tagName":"tr"},{"text":"Grid#addStaticDataRows","tagName":"a"},{"text":"                            dataFields                                                    Array.<string>                                                                                        <optional>                                                                                                                                                Shorthand for calling Grid#addDataFields        ","tagName":"tr"},{"text":"Grid#addDataFields","tagName":"a"},{"text":"                            rowVirtualization                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, all data rows will be rendered. This will greatly impact grid's performance if the data set is huge.        ","tagName":"tr"},{"text":"                            columnVirtualization                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, all columns will be rendered. This will greatly impact grid's performance if the column set is huge.        ","tagName":"tr"},{"text":"                            topFreezingCount                                                    number | null | boolean                                                                                        <optional>                                                                                                                            null                                                        If number >= 0 will fix number of frozen title section, If false = disabled scrollbar, if null then title section will freeze auto when new section added, this option will not work with scrollbar option.        ","tagName":"tr"},{"text":"                            bottomFreezingCount                                                    number | null                                                                                        <optional>                                                                                                                            null                                                        If number >= 0 will fix nuber of frozen footer section, if null then footer section will freeze auto when new section added, this option will not work with scrollbar option.        ","tagName":"tr"},{"text":"                            borders                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Lines around grid element        ","tagName":"tr"},{"text":"                            gridlines                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Horizontal and Vertical lines for ONLY content sections        ","tagName":"tr"},{"text":"                            verticalLines                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Vertical lines for all sections        ","tagName":"tr"},{"text":"                            horizontalLines                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        Horizontal lines for all sections        ","tagName":"tr"},{"text":"                            RTK                                                    *                                                                                        <optional>                                                                                                                            null                                                        rtk toolkit instance        ","tagName":"tr"},{"text":"                            synapse                                                    Grid~SynapseConfig                                                                                        <optional>                                                                                                                            null                                                        synapse config object        ","tagName":"tr"},{"text":"Grid~SynapseConfig","tagName":"a"},{"text":"                            contentBottomPadding                                                    number                                                                                        <optional>                                                                                                                            0                                                        Padding that is added below the last section. The padding is still a part of scrollable content.        ","tagName":"tr"},{"text":"                            dataConflationRate                                                    number                                                                                        <optional>                                                                                                                            0                                                        set delay for data to avoid to much sorting operation when data changed        ","tagName":"tr"},{"text":"                            dataComposed                                                    function                                                                                        <optional>                                                                                                                                                Handler for dataComposed event        ","tagName":"tr"},{"text":"RowReference","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"SynapseConfig","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            apiKey                                                    string                                                                                                                                                                                                    Synapse api key        ","tagName":"tr"},{"text":"                            contextApp                                                    string                                                                                                                                                                                                    Synapse context app name        ","tagName":"tr"},{"text":"                            auth                                                    string                                                                                        <optional>                                                                                                                                                Synapse authen token        ","tagName":"tr"},{"text":"                            debug                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If true, Synapse response will be mock        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"addDataFields(fieldRef, referreropt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"addStaticDataRows(dataRows, fieldsopt)","tagName":"h4"},{"text":"RowDefinition","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid#logDV","tagName":"a"},{"text":"Grid#logDT","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.rt.Grid(grid_div, options);\ngrid.addStaticDataRows([\n [10, \"a\", true],\n [20, \"b\", false],\n [30, \"c\", true]\n], [\"field1\", \"field2\", \"field3\"]); // 3 rows are appended\n\ngrid.addStaticDataRows([ // Object format can also be used {\"field1\": 40, \"field2\": \"a\",  \"field3\": true}, {\"field1\": 50, \"field2\": \"b\"}, // each row doesn't have to be the same {\"field1\": 60, \"field4\": \"some thing\"}]); // 3 more rows are appendedgrid.logDV({\"colNames\": [\"field1\", \"field2\", \"field3\", \"field4\"]}); // See results in console","tagName":"pre"},{"text":"grid.addStaticDataRows([ // Object format can also be used {\"field1\": 40, \"field2\": \"a\",  \"field3\": true}, {\"field1\": 50, \"field2\": \"b\"}, // each row doesn't have to be the same {\"field1\": 60, \"field4\": \"some thing\"}]); // 3 more rows are appendedgrid.logDV({\"colNames\": [\"field1\", \"field2\", \"field3\", \"field4\"]}); // See results in console","tagName":"p"},{"text":"","tagName":"p"},{"text":"clearSort()","tagName":"h4"},{"text":"dispose()","tagName":"h4"},{"text":"focus()","tagName":"h4"},{"text":"freezeColumn(opt_colIndexopt, pinnedRightColumnsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getAllFields()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnDataType(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnDefinition(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"ColumnDefinition","tagName":"a"},{"text":"getColumnField(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid#getColumnDefinition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnFields()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnId(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid#getColumnDefinition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnIndex(colRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~ColumnReference","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnIndices(colRefs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~ColumnReference","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getCoreGrid()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDataRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDataView()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getElement()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getMultipleRowData(rowIndicesopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"grid.getMultipleRowData(); // all row data is returned\ngrid.getMultipleRowData([0, 2, 4]); // Three row data is returned","tagName":"pre"},{"text":"getPageCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPageIndex()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPageItemCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPageSize()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRelativePosition(obj)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowData(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getRowDefinition(rowIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"getRowDefinitions()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"getSortedColumnIndex()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSortOrder()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasHiddenRow()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hideColumn(colRef, hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~ColumnReference","tagName":"a"},{"text":"Grid#hideColumns","tagName":"a"},{"text":"Grid#showAllColumns","tagName":"a"},{"text":"hideColumns(colRefs, hiddenopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~ColumnReference","tagName":"a"},{"text":"Grid#hideColumn","tagName":"a"},{"text":"Grid#showAllColumns","tagName":"a"},{"text":"hideRow(rowRef, opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~RowReference","tagName":"a"},{"text":"hideRows(rowRefs, opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~RowReference","tagName":"a"},{"text":"Grid~RowReference","tagName":"a"},{"text":"initialize(gridOptionopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~GridOptions","tagName":"a"},{"text":"initSubscription()","tagName":"h4"},{"text":"insertBefore(elem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"insertColumn(columnOption, idxopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnDefinition~Options","tagName":"a"},{"text":"insertRow(rowOptionopt, rowRefopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~RowReference","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.rt.Grid(grid_div, options);\ngrid.insertRow({\"ric\": \"RIC\"}, 0); // A new row is added at the top","tagName":"pre"},{"text":"insertRows(rowOptions, rowRefopt, opt_fieldsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~RowReference","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var grid = new tr.rt.Grid(grid_div, options);\ngrid.insertRows([\n {ric: \"RIC\"},\n {values: {\"field1\": 0, \"field2\": 1}},\n {ric: \"RIC2\", values: [1, 2, 3, 4]},\n null\n]); // 4 rows are appended","tagName":"pre"},{"text":"isSorting()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"listen(type, handler)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"logDT(opt_optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"logDV(opt_optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"// Options have the following format:\n// {\n//    \"colNames\": Array.<string>,\n//    \"rowCount\": number,\n//    \"startIndex\": number,\n//    \"getter\": function(rowData:Object, colName:string):*,\n//    \"withRowIds\": boolean\n// }\ngrid.logDV({\"rowCount\": 10}); // Showing 10 records","tagName":"pre"},{"text":"removeAllColumns()","tagName":"h4"},{"text":"Grid#removeColumn","tagName":"a"},{"text":"Grid#removeColumns","tagName":"a"},{"text":"removeAllRows()","tagName":"h4"},{"text":"Grid#removeRow","tagName":"a"},{"text":"Grid#removeRows","tagName":"a"},{"text":"removeColumn(colRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~ColumnReference","tagName":"a"},{"text":"Grid#removeColumns","tagName":"a"},{"text":"Grid#removeAllColumns","tagName":"a"},{"text":"removeColumns(colRefs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~ColumnReference","tagName":"a"},{"text":"Grid#removeColumn","tagName":"a"},{"text":"Grid#removeAllColumns","tagName":"a"},{"text":"removeDataFields(fieldRef, referreropt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeEventListeners()","tagName":"h4"},{"text":"removeRow(rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~RowReference","tagName":"a"},{"text":"Grid#removeRows","tagName":"a"},{"text":"Grid#removeAllRows","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"removeRows(rowRefs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~RowReference","tagName":"a"},{"text":"Grid#removeRow","tagName":"a"},{"text":"Grid#removeAllRows","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"setColumnFormatter(colIndex, formatter)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnName(colIndex, str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnRenderer(colRef, funcopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~ColumnReference","tagName":"a"},{"text":"setColumns(columns)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnSorter(colRef, funcopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~ColumnReference","tagName":"a"},{"text":"ColumnDefinition~SortLogic","tagName":"a"},{"text":"setFields(ary)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid#setColumns","tagName":"a"},{"text":"setPage(pageIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setPageSize(size)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setParent(elem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRicData(ric, values)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRics(ary)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowContent(rowRef, str)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~RowReference","tagName":"a"},{"text":"setRowData(rowRef, values)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~RowReference","tagName":"a"},{"text":"showAllColumns()","tagName":"h4"},{"text":"Grid#hideColumn","tagName":"a"},{"text":"Grid#hideColumns","tagName":"a"},{"text":"sortColumn(colRef, opt_orderopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Grid~ColumnReference","tagName":"a"},{"text":"toggleChain(rowIndexopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"toggleRowExpansion(rid, forceopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unhideAllRows()","tagName":"h4"},{"text":"updateColumnTitle()","tagName":"h4"},{"text":"updateLayout()","tagName":"h4"},{"text":"updateRowData(opt_rowIndexopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"adcDataReceived","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            data                                                    Array.<Array>                                                            Data part of the server response        ","tagName":"tr"},{"text":"dataComposed","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            grid                                                    Grid                                                                    ","tagName":"tr"},{"text":"Grid","tagName":"a"},{"text":"                            rowDef                                                    RowDefinition                                                                    ","tagName":"tr"},{"text":"RowDefinition","tagName":"a"},{"text":"fieldAdded","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            type                                                    string                                                            \"fieldAdded\"        ","tagName":"tr"},{"text":"                            addedFields                                                    Array.<string>                                                            An array of newly added fields        ","tagName":"tr"},{"text":"                            fields                                                    Array.<string>                                                            All fields        ","tagName":"tr"},{"text":"                            rics                                                    Array.<string>                                                            All rics        ","tagName":"tr"},{"text":"                            rowDefs                                                    Array.<RowDefinition>                                                            All row definitions        ","tagName":"tr"},{"text":"RowDefinition","tagName":"a"},{"text":"fieldRemoved","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            type                                                    string                                                            \"fieldRemoved\"        ","tagName":"tr"},{"text":"                            removedFields                                                    Array.<string>                                                            An array of recently removed fields        ","tagName":"tr"},{"text":"                            fields                                                    Array.<string>                                                            All fields        ","tagName":"tr"},{"text":"                            rics                                                    Array.<string>                                                            All rics        ","tagName":"tr"},{"text":"                            rowDefs                                                    Array.<RowDefinition>                                                            All row definitions        ","tagName":"tr"},{"text":"RowDefinition","tagName":"a"},{"text":"pageCountChanged","tagName":"h4"},{"text":"pageIndexChanged","tagName":"h4"},{"text":"ricAdded","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            type                                                    string                                                            \"ricAdded\"        ","tagName":"tr"},{"text":"                            addedRics                                                    Array.<string>                                                            An array of newly added rics        ","tagName":"tr"},{"text":"                            fields                                                    Array.<string>                                                            All fields        ","tagName":"tr"},{"text":"                            rics                                                    Array.<string>                                                            All rics        ","tagName":"tr"},{"text":"                            rowDefs                                                    Array.<RowDefinition>                                                            All row definitions        ","tagName":"tr"},{"text":"RowDefinition","tagName":"a"},{"text":"ricRemoved","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            type                                                    string                                                            \"ricRemoved\"        ","tagName":"tr"},{"text":"                            removedRics                                                    Array.<string>                                                            An array of recently removed rics        ","tagName":"tr"},{"text":"                            fields                                                    Array.<string>                                                            All fields        ","tagName":"tr"},{"text":"                            rics                                                    Array.<string>                                                            All rics        ","tagName":"tr"},{"text":"                            rowDefs                                                    Array.<RowDefinition>                                                            All row definitions        ","tagName":"tr"},{"text":"RowDefinition","tagName":"a"}]},{"title":"RowDefinition","filename":"apis/rt_grid/RowDefinition.html","contents":[{"text":"new RowDefinition(rowOptionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowDefinition~Options","tagName":"a"},{"text":"Type Definitions","tagName":"h3"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            ric                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        RIC for real-time fields. Prefixing 0# to the ric is equivalent to specifying asChain property.        ","tagName":"tr"},{"text":"                            values                                                    Array | Object                                                                                        <optional>                                                                                                                            null                                                        Values for static data        ","tagName":"tr"},{"text":"                            fields                                                    Array.<string>                                                                                        <optional>                                                                                                                            null                                                        Field that corresponds to the given static values        ","tagName":"tr"},{"text":"                            asChain                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        The given ric will be treated as a chain        ","tagName":"tr"},{"text":"                            chainRic                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        RIC to be used for chain request (overiding ric property)        ","tagName":"tr"},{"text":"                            collapsed                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Chain is expanded by default        ","tagName":"tr"},{"text":"                            label                                                    string | null                                                                                        <optional>                                                                                                                            null                                                                ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"deregisterFromView(rowIds, rowDef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var rowIds = descendants.reduce(RowDefinition.deregisterFromView, []);","tagName":"pre"},{"text":"dispose(rowDef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"hasChain(rowDef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"toRowId(rowDef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addUpdate(e)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"collapseChain()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"dispose()","tagName":"h4"},{"text":"expandChain()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getAllDescendantIds()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getChildCount()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getChildren()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"getData(field)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDataId()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDepthLevel()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDescendants(aryopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"getDisplayText()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getLabel()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getParent()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"RowDefinition","tagName":"a"},{"text":"getRic()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowData()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowId()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getUpdates()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getUserInput()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getUserModel()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(rowOptionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowDefinition~Options","tagName":"a"},{"text":"isAutoGenerated()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isChain()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isChainCollapsed()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isChainExpanded()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isDisposed()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isRealTimeRow()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isRowHeader()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isSubscribing()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"registerToView(view, rowIdopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"resetUpdates()","tagName":"h4"},{"text":"setContent(userInput)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setData(field, value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setDataSource(dataSource)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowData(data)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setStaticData(field, value)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setStaticRowData(data, opt_fieldsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"subscribeForUpdates()","tagName":"h4"},{"text":"unsubscribeForUpdates()","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"updateRowData(data, opt_fieldsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Overview","filename":"extensions/README.html","contents":[{"text":"Grid extensions provide enhancements for the efx-grid element and the underlying core library. This allows for greater extensibility without increasing the size of the main code base.","tagName":"p"},{"text":"Setup guide","tagName":"h2"},{"text":"Use import syntax to import the extension into your app.","tagName":"p"},{"text":"import { EXTENSION_NAME } from '@refinitiv-ui/grid/extensions';","tagName":"pre"},{"text":"For example","tagName":"p"},{"text":"import { AutoTooltip } from '@refinitiv-ui/grid/extensions';","tagName":"pre"},{"text":"Basic usage","tagName":"h2"},{"text":"The simplest way to add extensions to Grid is by passing the extension's instances through the extensions property in the configuration object.","tagName":"p"},{"text":"var grid = document.getElementById('grid');\ngrid.config = {\n  // main option\n  extensions: [\n    EXTENTION_INSTANCE\n  ]\n};","tagName":"pre"},{"text":"There are two kinds of extension options, the main option and the column-specific option. ","tagName":"p"},{"text":"The main option is an option declared as a first-level property. Generally, the main option's attribute name is the extension's name but starting with a lower case letter. For example, autoTooltip. ","tagName":"p"},{"text":"The column specific option is defined in the column option under the columns property of Grid's configuration. ","tagName":"p"},{"text":"Details about both kinds of options are available on each extension's page.","tagName":"p"},{"text":"Example of an extension option:","tagName":"p"},{"text":"var grid = document.getElementById('grid');\ngrid.config = {\n  // main option\n  columns: [\n    // column-specific option\n    {\n        title: \"Number\",\n        field: \"number\",\n        autoTooltip: true // column's specific option\n    }\n  ],\n\n  extensions: [\n    new tr.AutoTooltipExtension()\n  ],\n\n  // extension option\n  autoTooltip: { \n    title: true,\n    content: false\n  }\n};","tagName":"pre"},{"text":"Additional dependencies","tagName":"h2"},{"text":"For details on how to install and use the EF-element see the Refinitiv UI Installation document.","tagName":"p"},{"text":"Refinitiv UI Installation document","tagName":"a"},{"text":"Checkbox Extension","tagName":"h3"},{"text":"The Checkbox Extension supports both the native checkbox and the ef-checkbox. To use with the ef-checkbox, the following dependency is also required:","tagName":"p"},{"text":"ef-checkbox","tagName":"a"},{"text":"npm install @refinitiv-ui/elements\nnpm install @refinitiv-ui/halo-theme","tagName":"pre"},{"text":"Then import to your project index.js.","tagName":"p"},{"text":"// import element\nimport '@refinitiv-ui/elements/lib/checkbox';\n\n// import element's Halo dark theme\nimport '@refinitiv-ui/elements/lib/checkbox/themes/halo/dark'; // Can be any theme","tagName":"pre"},{"text":"Filter Input Extension","tagName":"h3"},{"text":"The Filter Input extension supports various types of input elements. These can be archived by specifying the type property through FilterInputPlugin options. The EF component for each type of inputs is shown below:","tagName":"p"},{"text":"\nType\nRequired EF Element\n","tagName":"tr"},{"text":"\ndefault\nef-search-field\n","tagName":"tr"},{"text":"\nnumber\nef-number-field\n","tagName":"tr"},{"text":"\nselect\nef-select\n","tagName":"tr"},{"text":"\ndropdown\nef-select\n","tagName":"tr"},{"text":"\ndate\nef-datetime-picker\n","tagName":"tr"},{"text":"Note: there is no need to specify a type for the default input element.","tagName":"p"},{"text":"Additional dependencies are required according to the type of input. For example, if specified type is date, the additional dependency is ef-datetime-picker. ","tagName":"p"},{"text":"Pagination Extension","tagName":"h3"},{"text":"The Pagination Extension does not provide any UI. You will need to install @refinitiv-ui/elements separately for the UI. The extension will automatically wire the functionalities to the UI element once it is presented.","tagName":"p"},{"text":"The pagination element is completely independent from the grid element and the Pagination Extension. So, any customization and feature request regarding the element has to be sent to the Refinitiv UI team. The documentation for the element can be found on Refinitiv UI's Pagination page.","tagName":"p"},{"text":"Refinitiv UI team","tagName":"a"},{"text":"Pagination","tagName":"a"},{"text":"Available extensions","tagName":"h2"},{"text":"Auto Tooltip","tagName":"a"},{"text":"Cell Selection","tagName":"a"},{"text":"Checkbox Column","tagName":"a"},{"text":"Column Fitter","tagName":"a"},{"text":"Column Formatting","tagName":"a"},{"text":"Column Grouping","tagName":"a"},{"text":"Column Resizing","tagName":"a"},{"text":"Column Selection","tagName":"a"},{"text":"Column Stack","tagName":"a"},{"text":"Conditional Coloring","tagName":"a"},{"text":"Content Wrap","tagName":"a"},{"text":"Context Menu","tagName":"a"},{"text":"Filter Input","tagName":"a"},{"text":"Heat Map","tagName":"a"},{"text":"In-Cell Editing","tagName":"a"},{"text":"Pagination","tagName":"a"},{"text":"Percent Bar","tagName":"a"},{"text":"Range Bar","tagName":"a"},{"text":"Row Dragging","tagName":"a"},{"text":"Row Filtering","tagName":"a"},{"text":"Row Grouping","tagName":"a"},{"text":"Row Segmenting","tagName":"a"},{"text":"Row Selection","tagName":"a"},{"text":"Row Coloring","tagName":"a"},{"text":"Statistics Row","tagName":"a"},{"text":"Text Formatting","tagName":"a"},{"text":"Title Wrap","tagName":"a"},{"text":"Zoom","tagName":"a"},{"text":"Visit the relevant extensions' sections to see the APIs, their usage and live demos.","tagName":"p"}]},{"title":"Auto Tooltip","filename":"extensions/tr-grid-auto-tooltip.html","contents":[{"text":"Auto Tooltip","tagName":"h2"},{"text":"The Auto Tooltip Extension displays clipped information when the user hovers the pointer over the content or title. ","tagName":"p"},{"text":"Auto Tooltip Extension","tagName":"a"},{"text":"For contributions, check out the Auto Tooltip Extension Repository.","tagName":"p"},{"text":"Auto Tooltip Extension Repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4], width: 150 }\n  ],\n  dataModel: {\n    data: records\n  },\n  autoTooltip: {\n    title: true\n  },\n  extensions: [\n    new tr.AutoTooltipExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"Note: the auto tooltip will not be added to non-clipped text.","tagName":"p"},{"text":"Installation and importing to your project","tagName":"h3"},{"text":"Installation details and examples, along with information on how to import the extension to your project, are available on the Overview page.","tagName":"p"},{"text":"Overview page","tagName":"a"},{"text":"Specific column","tagName":"h3"},{"text":"To enable Auto Tooltip in a specific column only:","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry (On)\", field: fields[4], width: 150, autoTooltip: true },\n    { title: \"Industry (Off)\", field: fields[4], width: 150 }\n  ],\n  dataModel: {\n    data: records\n  },\n  autoTooltip: {\n    title: true,\n    content: false\n  },\n  extensions: [\n    new tr.AutoTooltipExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"var grid = document.getElementById('grid');\ngrid.config = {\n  // any other grid's options\n  columns: [\n    { title: 'Column 1', field: 'field1', autoTooltip: true }\n  ],\n  autoTooltip: {\n    title: true,\n    content: false\n  },\n  extensions: [\n    new tr.AutoTooltipExtension()\n  ]\n};","tagName":"pre"},{"text":"Limitation","tagName":"h3"},{"text":"Since Safari automatically apply tooltip to clipped text by itself. Therefore, Auto tooltip will be disabled in Safari.","tagName":"p"},{"text":"The image shown below is double tooltip issue in Safari.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            autoTooltip                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, the column is qualified for showing tooltip        ","tagName":"tr"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            header                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If true, text in the header sections (top section) will be qualified for showing tooltip.        ","tagName":"tr"},{"text":"                            title                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Alias to `header`        ","tagName":"tr"},{"text":"                            footer                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If true, text in the footer sections will be qualified for showing tooltip.        ","tagName":"tr"},{"text":"                            content                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If true, text in the content section will be qualified for showing tooltip. Use autoTooltip flag in column configuration to turn on auto-tooltip for individual column        ","tagName":"tr"},{"text":"                            quickMode                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Deprecated        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"applyTooltip(colIndex, fromRopt, toRopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"applyTooltipToAllColumns()","tagName":"h4"},{"text":"applyTooltipToColumns(colIndicesopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"requestTooltipUpdate()","tagName":"h4"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Cell Selection","filename":"extensions/tr-grid-cell-selection.html","contents":[{"text":"Cell Selection","tagName":"h2"},{"text":"The Cell Selection Extension lets you select a cell's content in Grid. You can then use the copy (Ctrl+C) command to retrieve text and store it in the clipboard. Copied text will then be available for pasting to a text editor or Excel. ","tagName":"p"},{"text":"Cell Selection Extension","tagName":"a"},{"text":"For contributions, check out the Cell Selection Extension repository.","tagName":"p"},{"text":"Cell Selection Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>\n<textarea rows=\"5\" placeholder=\"Copy (Ctrl+C) the selected cells to retrieve text and store it in clipboard. Paste it to Excel or here and see if it is in tab separated format.\"></textarea>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.CellSelectionExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}\n\ntextarea {\n  width: 100%;\n  font: -webkit-small-control;\n  overflow-x: hidden;\n  overflow-y: auto;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            mode                                                    string                                                                                        <optional>                                                                                                                            \"cell\"                                                        Available options are cell, row, and column        ","tagName":"tr"},{"text":"                            multipleSelection                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, only single cell can be selected at time        ","tagName":"tr"},{"text":"                            autoDeselecting                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, the selection will remain after grid losing focus        ","tagName":"tr"},{"text":"                            tabToSelect                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, the selection can be moved when user press tab key during the time grid is in focus.        ","tagName":"tr"},{"text":"                            selectionChanged                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler        ","tagName":"tr"},{"text":"                            copy                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler        ","tagName":"tr"},{"text":"                            beforeMouseDown                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler        ","tagName":"tr"},{"text":"                            selectableSections                                                    Array                                                                                        <optional>                                                                                                                            ['content'                                                        Use to set which section can be selected, if not specific then only content section can select        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"deselectAll() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"disableSelection(opt_disableopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getAnchorInfo() → {tr.Grid.MouseInfo}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getAutoDeselectingOnBlur() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getLastSelectionBounds(opt_retopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedCells() → {Array.<tr.grid.Cell>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedText() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectionBounds(opt_retopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectionCount() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize()","tagName":"h4"},{"text":"selectAll()","tagName":"h4"},{"text":"selectCells(rect)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"selectNextCell() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"selectPrevCell() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"selectSingleCell(anchor)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"extension.selectSingleCell({colIndex: 1, rowIndex: 0});","tagName":"pre"},{"text":"setAutoDeselectingOnBlur(bool)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSelectableSections(typesopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload()","tagName":"h4"},{"text":"Events","tagName":"h3"},{"text":"beforeMouseDown","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            cancel                                                    boolean                                                                                        <optional>                                                                                    Set to true to cancel operation.        ","tagName":"tr"},{"text":"copy","tagName":"h4"},{"text":"selectionChanged","tagName":"h4"}]},{"title":"Checkbox Column","filename":"extensions/tr-grid-checkbox.html","contents":[{"text":"Checkbox Column","tagName":"h2"},{"text":"The Checkbox Extension adds a column with checkboxes to Grid for selecting single or multiple rows. ","tagName":"p"},{"text":"Checkbox Extension","tagName":"a"},{"text":"For contributions, check out the Checkbox Extension repository.","tagName":"p"},{"text":"Checkbox Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.CheckboxExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Additional dependencies","tagName":"h3"},{"text":"Details of additional dependencies for this extension are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Default display","tagName":"h3"},{"text":"There is no specific option required by default.","tagName":"p"},{"text":"var config = {\n  // any other grid's options\n  extensions: [\n    new CheckboxExtension()\n  ]\n};","tagName":"pre"},{"text":"Using with Row Grouping Extension","tagName":"h3"},{"text":"The Checkbox Extension works out-of-the-box with Row Grouping Extension.","tagName":"p"},{"text":"var config = {\n  // any other grid's options\n  rowGrouping: {\n    groupBy: ['col1', 'col2']\n  },\n  extensions: [\n    new CheckboxExtension(),\n    new RowGroupingExtension()\n  ]\n};","tagName":"pre"},{"text":"Using with Pagination Extension","tagName":"h3"},{"text":"The Checkbox Extension works out-of-the-box with the Pagination Extension. But there are some behaviors that are slightly different from the normal configuration.","tagName":"p"},{"text":"The Select All (Check All) action will only perform checked to the data on the current page. For example, if you perform Select All on the first page, the data on the other pages will not be selected or deselected.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>\n<emerald-pagination id=\"paging_ui\"></emerald-pagination>","tagName":"pre"},{"text":"var paging = document.getElementById('paging_ui');\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 15 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  pagination: {\n    element: paging,\n    pageSize: 5\n  },\n  extensions: [\n    new tr.CheckboxExtension(),\n    new tr.PaginationExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"var config = {\n  // any other grid's options\n  pagination: {\n    pageSize: 5\n  },\n  extensions: [\n    new CheckboxExtension(),\n    new PaginationExtension()\n  ]\n};","tagName":"pre"},{"text":"Checkbox behavior","tagName":"h3"},{"text":"Please note:","tagName":"h4"},{"text":"items in view means only row items that show in view, including the overflowed row, and rows that are hidden in collapsed groups that show in view. It excludes rows in other pages (so when using the pagination plugin), filtered rows, group header rows, and rows in header or footer sections.","tagName":"p"},{"text":"A checkbox in Emerald-Grid and Atlas-Blotter normally has three states: checked, unchecked, partial. But the Composite-Grid has only two: checked, unchecked. The missing partial will be declared as unchecked.","tagName":"p"},{"text":"The top header and group header will automatically change their state according to their group member. See information below under Top checkbox and Group checkbox.","tagName":"p"},{"text":"When a user clicks/unchecks the top-checkbox/group-checkbox, all childs in view will change their state.","tagName":"p"},{"text":"Top checkbox","tagName":"h4"},{"text":"This is the checkbox that appears in the header section. It has the following behaviors:","tagName":"p"},{"text":"Group checkbox","tagName":"h4"},{"text":"This is the checkbox that appears in the group header row under the content section. It has the following behaviors:","tagName":"p"},{"text":"APIs Summary","tagName":"h4"},{"text":"\nMethod\nCollapsed\nOther page\nFiltered\nDisabled\n","tagName":"tr"},{"text":"\ngetCheckbox(sectionRef, rowIndex)\nCannot\nCannot\nCannot\nCan\n","tagName":"tr"},{"text":"\ngetAllCheckedIndices(sectionRef, state)\nCannot\nCannot\nCannot\nCan\n","tagName":"tr"},{"text":"\nsetAllCheckStates(checked)\nIncluded\nIncluded\nIncluded\nIncluded\n","tagName":"tr"},{"text":"\ngetAllSelectedData(field)\nIncluded\nIncluded\nIncluded\nIncluded\n","tagName":"tr"},{"text":"\ngetFilteredSelectedData(field)\nIncluded\nExcluded\nExcluded\nExcluded\n","tagName":"tr"},{"text":"\nselectAll()  (equivalent to clicking at checkbox in  top header)\nIncluded\nExcluded\nExcluded\nExcluded\n","tagName":"tr"},{"text":"\ndeselectAll() (equivalent to clicking at checkbox in  top header)\nIncluded\nExcluded\nExcluded\nExcluded\n","tagName":"tr"},{"text":"\ncheckAll(checked) (equivalent to clicking at checkbox in  top header)\nIncluded\nExcluded\nExcluded\nExcluded\n","tagName":"tr"},{"text":"API Reference","tagName":"h2"},{"text":"Members","tagName":"h3"},{"text":"getSelectedRowData","tagName":"h4"},{"text":"CheckboxPlugin#getAllSelectedData","tagName":"a"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            checkboxColumn                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, the correspondence column will use as checkbox column.        ","tagName":"tr"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            rowSelection                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, grid row will be selected as checkbox is checked.        ","tagName":"tr"},{"text":"                            field                                                    string                                                                                        <optional>                                                                                                                            \"CHECK_BOX\"                                                        Field that will be used for storing check state        ","tagName":"tr"},{"text":"                            disablingField                                                    string                                                                                        <optional>                                                                                                                            \"CHECK_BOX_DISABLED\"                                                        Field that will be used for storing disabling state        ","tagName":"tr"},{"text":"                            checkboxCreated                                                    function                                                                                        <optional>                                                                                                                            null                                                        Function handler for checkboxCreated event        ","tagName":"tr"},{"text":"                            checkboxBinding                                                    function                                                                                        <optional>                                                                                                                            null                                                        Function handler for checkboxBinding event        ","tagName":"tr"},{"text":"                            clicked                                                    function                                                                                        <optional>                                                                                                                            null                                                        Function handler for checkbox clicked event        ","tagName":"tr"},{"text":"                            width                                                    number                                                                                        <optional>                                                                                                                            34                                                        Width for checkbox column        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"beforeProcessOption(optionName, optionVal) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"checkAll(checked)","tagName":"h4"},{"text":"CheckboxPlugin#setAllCheckStates","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"CheckboxPlugin#setAllCheckStates","tagName":"a"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"deselectAll(check)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableCheckbox(rowRef, disabled)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableCheckbox(rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getAllCheckedIndices(sectionRef, stateopt) → {Array.<number>}","tagName":"h4"},{"text":"CheckboxPlugin#getSelectedRowData","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"CheckboxPlugin#getSelectedRowData","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getAllSelectedData(fieldopt) → {Array}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var chkBoxExtension = new tr.CheckboxExtension();\nchkBoxExtension.getSelectedRowData(); // Get all selected row data in this format [{}, {}, ... RowData objects, {}]\nchkBoxExtension.getSelectedRowData(\"field\"); // Get all field values from selected row data in this format [value1, value2, ... values, valueN]","tagName":"pre"},{"text":"getCheckbox(sectionRef, rowIndex) → {Element}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getCheckboxColumnIndex() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDisplayColumn() → {number}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getFilteredSelectedData(fieldopt) → {Array}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"selectAll()","tagName":"h4"},{"text":"setAllCheckStates(checked)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"CheckboxPlugin#checkAll","tagName":"a"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"checkboxBinding","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            checkbox                                                    Element                                                            Checkbox element        ","tagName":"tr"},{"text":"                            rowData                                                    Object                                                                    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"checkboxCreated","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            input                                                    Element                                                            Checkbox element that is an alias to `checkbox`        ","tagName":"tr"},{"text":"                            checkbox                                                    Element                                                            Checkbox element        ","tagName":"tr"},{"text":"                            cell                                                    tr.grid.Cell                                                            Grid Cell object        ","tagName":"tr"},{"text":"                            section                                                    tr.ILayoutGrid                                                            Grid Section object        ","tagName":"tr"},{"text":"                            grid                                                    tr.Grid                                                            Core Grid object        ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"clicked","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            checkbox                                                    Element                                                            element        ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            checked                                                    boolean                                                                    ","tagName":"tr"},{"text":"                            checkState                                                    string                                                                    ","tagName":"tr"}]},{"title":"Column Fitter","filename":"extensions/tr-grid-column-fitter.html","contents":[{"text":"Column Fitter","tagName":"h2"},{"text":"The Column Fitter provides an automatically adjusting column width that fits a column's content or title.","tagName":"p"},{"text":"Column Fitter","tagName":"a"},{"text":"For contributions, check out the Column Fitter Extension repository.","tagName":"p"},{"text":"Column Fitter Extension repository","tagName":"a"},{"text":"<button id=\"toggle_btn\">Toggle Column Fitting</button>\n\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var columnFitterExt = new tr.ColumnFitterExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    columnFitterExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"toggle_btn\").addEventListener(\"click\", function(e) {\n  var btn = e.currentTarget;\n  if (btn.adjusted) {\n    columnFitterExt.resetAllColumns();\n  } else {\n    columnFitterExt.adjustAllColumns();\n  }\n  btn.adjusted = !btn.adjusted;\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Automatic adjusting","tagName":"h3"},{"text":"The live demo below shows how to adjust a column's width when the data are changed – use the extension's API to adjust it manually or use the autoAdjust property for automatic adjusting.","tagName":"p"},{"text":"var grid = document.getElementById(\"grid\");\ngrid.config = {\n  // any other grid's options\n  columnFitting: {\n    autoAdjust: 1000\n  },\n};","tagName":"pre"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var columnFitterExt = new tr.ColumnFitterExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar generateRecord = tr.DataGenerator.generateRecord;\nvar randInt = tr.DataGenerator.randInt;\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  columnFitting: {\n    title: true,\n    autoAdjust: 1000\n  },\n  extensions: [\n    columnFitterExt\n  ],\n  whenDefined: function(e) {\n    var api = e.api;\n    var dt = api.getDataTable();\n    setInterval(function() {\n      var field = \"industry\";\n      var record = generateRecord([field]);\n      var randRow = randInt(0, dt.getRowCount());\n      var rowId = dt.getRowId(randRow);\n      dt.setData(rowId, field, record[field]);\n    }, 500);\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Columns with custom content/elements","tagName":"h3"},{"text":"Normally, this extension will only use the text format inside the cell to calculate the optimal width. Unfortunately, for a cell with custom content, users may want to insert some other elements rather than text format inside the cell (for example, div).","tagName":"p"},{"text":"To support custom content, set contentFitting: true in the column option.","tagName":"p"},{"text":"var grid = document.getElementById(\"grid\");\ngrid.config = {\n  // other grid's option\n  columns: [\n    // other columns\n    {\n      title: 'Custom format',\n      field: 'someField',\n      formatter: customFormatter,\n      contentFitting: true // Turn this on\n    }\n  ],\n};","tagName":"pre"},{"text":"<button id=\"toggle_btn\">Toggle Column Fitting</button>\n\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var columnFitterExt = new tr.ColumnFitterExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\n\nvar customFormatter = {\n  render: function() {}, // required by composite-grid\n  bind: function(rowIndex, colIndex, value, cell /*, columnDef,  dataRow,  dataTable */ ) {\n    var content = cell.getContent();\n    if (!content) {\n      content = document.createElement('div');\n      var span = document.createElement('span');\n      span.textContent = value + \" ★\";\n      content.appendChild(span);\n    }\n    cell.setContent(content);\n  }\n};\n\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0], formatter: customFormatter, contentFitting: true },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    columnFitterExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"toggle_btn\").addEventListener(\"click\", function(e) {\n  var btn = e.currentTarget;\n  if (btn.adjusted) {\n    columnFitterExt.resetAllColumns();\n  } else {\n    columnFitterExt.adjustAllColumns();\n  }\n  btn.adjusted = !btn.adjusted;\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            noFitting                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, the given column will not be included in the calculation        ","tagName":"tr"},{"text":"                            contentFitting                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        By default, fitting extension only calculate text content. Enable this option to support custom rendering fitting for a specified column        ","tagName":"tr"},{"text":"                            minWidth                                                    number                                                                                        <optional>                                                                                                                                                Minimum width of the column        ","tagName":"tr"},{"text":"                            maxWidth                                                    number                                                                                        <optional>                                                                                                                                                Maximum width of the column        ","tagName":"tr"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            proportion                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Proportionally expand columns, if there is enough space        ","tagName":"tr"},{"text":"                            constraint                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Prevents column width to go lower than its content size        ","tagName":"tr"},{"text":"                            autoAdjust                                                    boolean | number                                                                                        <optional>                                                                                                                            false                                                        Automatic column width adjusting on each data update        ","tagName":"tr"},{"text":"                            autoAdjusting                                                    boolean | number                                                                                        <optional>                                                                                                                            false                                                        Alias to `autoAdjust`        ","tagName":"tr"},{"text":"                            title                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Include title section in the fitting calculation        ","tagName":"tr"},{"text":"                            paddingSize                                                    number                                                                                        <optional>                                                                                                                            2                                                        Additional padding from existing cell padding. This will add extra space (in pixel) to the right of the longest text.        ","tagName":"tr"},{"text":"                            shrinkable                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Allow column width to be shrunken during autoAdjust enabled        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"adjustAllColumns() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"adjustColumns(colIndicesopt, forceopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"adjustColumnWidth(colIndexopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"calculateColumnWidth(colIndex) → {number}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnFitterPlugin~Options","tagName":"a"},{"text":"getAdjustedColumnWidth(colIndex) → {number}","tagName":"h4"},{"text":"ColumnFitterPlugin#calculateColumnWidth","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnMenu(colIndex, config) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"resetAllColumns()","tagName":"h4"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Column Formatting","filename":"extensions/tr-grid-column-formatting.html","contents":[{"text":"Column Formatting","tagName":"h2"},{"text":"The Column Formatting Extension incorporates all features from the Conditional Coloring Extension, the TextFormatting Extension and the HeatMap Extension.","tagName":"p"},{"text":"Column Formatting Extension","tagName":"a"},{"text":"Conditional Coloring Extension","tagName":"a"},{"text":"TextFormatting Extension","tagName":"a"},{"text":"HeatMap Extension","tagName":"a"},{"text":"For contributions, check out the Column Formatting Extension repository.","tagName":"p"},{"text":"Column Formatting Extension repository","tagName":"a"},{"text":"<div>\n  <span style=\"line-height: 24px;\">IPO Date column </span>\n  <button id=\"btn_1\">MMM-DD-YYYY</button>\n  <button id=\"btn_2\">MMM-DD-YY</button>\n  <button id=\"btn_3\">Get format</button>\n</div>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var columnFormattingExt = new tr.ColumnFormattingExtension();\nvar fields = [\"companyName\", \"market\", \"CF_VOLUME\", \"CF_NETCHNG\", \"PCTCHNG2\", \"TR.IPODate\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [{\n      title: \"Company\",\n      field: fields[0],\n      colorText: {\n        field: \"PCTCHNG2\"\n      }\n    },\n    {\n      title: \"Market\",\n      field: fields[1],\n      width: 120,\n      alignment: \"center\"\n    },\n    {\n      title: \"Volume\",\n      field: fields[2],\n      width: 120,\n      alignment: \"right\",\n      formatType: {\n        type: \"number\",\n        separator: true,\n        decimalPlaces: 0\n      }\n    },\n    {\n      title: \"Net. Chng\",\n      field: fields[3],\n      width: 120,\n      formatType: {\n        type: \"number\",\n        plusSign: true\n      },\n      heatMap: {\n        midPoint: 0,\n        mode: \"cell\"\n      }\n    },\n    {\n      title: \"Pct. Chng\",\n      field: fields[4],\n      width: 100,\n      formatType: {\n        type: \"percent\"\n      },\n      conditions: [{\n        condition: \"GTE\",\n        name: \"GTE\",\n        value1: 10,\n        backgroundColor: \"lightgreen\",\n        color: \"black\"\n      }]\n    },\n    {\n      title: \"IPO Date\",\n      field: fields[5],\n      alignment: \"center\",\n      formatType: {\n        type: \"datetime\",\n        dateTimeFormat: \"DD-MMM-YYYY\"\n      }\n    }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    columnFormattingExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"btn_1\").addEventListener(\"click\", function(e) {\n  var options = {\n    valueFormatTab: {\n      type: \"datetime\",\n      dateTimeFormat: \"MMM-DD-YYYY\"\n    }\n  }\n  columnFormattingExt.setColumnFormatOptions(5, options);\n});\n\ndocument.getElementById(\"btn_2\").addEventListener(\"click\", function(e) {\n  var options = {\n    valueFormatTab: {\n      type: \"datetime\",\n      dateTimeFormat: \"MMM-DD-YY\"\n    }\n  }\n  columnFormattingExt.setColumnFormatOptions(5, options);\n});\n\ndocument.getElementById(\"btn_3\").addEventListener(\"click\", function(e) {\n  var value = columnFormattingExt.getColumnFormatOptions(5);\n  alert(JSON.stringify(value));\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Working with the Column Format dialog","tagName":"h3"},{"text":"The Column Formatting Extension has no UI by itself, but it works well with the Column Format dialog. Details of usage are available on the Column Format dialog page.","tagName":"p"},{"text":"Column Format dialog","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Members","tagName":"h3"},{"text":"getField","tagName":"h4"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnFormatOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            valueFormatTab                                                    Object                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"                            displayStyleTab                                                    Object                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"                            colorTextTab                                                    Object                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"                            fieldDataType                                                    string                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            fieldDataType                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Change UIs based on the value. Available values are general, number, dateTime and FX.        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getColumnAlignment(colIndex) → {string}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnCount() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnFormatOptions(colIndex) → {ColumnFormattingPlugin~ColumnFormatOptions}","tagName":"h4"},{"text":"ColumnFormattingPlugin~ColumnFormatOptions","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"ColumnFormattingPlugin~ColumnFormatOptions","tagName":"a"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getFieldList() → {Array.<string>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasHiddenColumn() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hideColumn(colIndex, opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"initialize()","tagName":"h4"},{"text":"isColumnHidden(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"openDialog(colIndex, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnAlignment(colIndex, align)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnFormatOptions(colIndex, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnFormattingPlugin~ColumnFormatOptions","tagName":"a"},{"text":"setFieldDataType(colIndex, type)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"showAllColumns()","tagName":"h4"},{"text":"unload()","tagName":"h4"},{"text":"Events","tagName":"h3"},{"text":"formatChanged","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            field                                                    string                                                            Field defined in the column        ","tagName":"tr"}]},{"title":"Column Grouping","filename":"extensions/tr-grid-column-grouping.html","contents":[{"text":"Column Grouping","tagName":"h2"},{"text":"The Column Grouping Extension is a categorization based on the column field. Columns can be grouped and put under a spanned header cell. Groups can be defined hierarchically, with an unlimited number of levels in the structure. Grouped columns can be dragged together to reorder columns without breaking the group structure.","tagName":"p"},{"text":"Column Grouping Extension","tagName":"a"},{"text":"A group header can be formatted using a formatter just like a normal cell.","tagName":"p"},{"text":"For contributions, check out the Column Grouping Extension repository.","tagName":"p"},{"text":"Column Grouping Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\nvar configObj = {\n  columnReorder: true,\n  columns: [\n    { id: \"c1\", title: \"Company\", field: fields[0] },\n    { id: \"c2\", title: \"Market\", field: fields[1], width: 100 },\n    { id: \"c3\", title: \"Last\", field: fields[2], width: 80 },\n    { id: \"c4\", title: \"Net. Chng\", field: fields[3], width: 80 },\n    { id: \"c5\", title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  columnGrouping: [{\n      id: \"g1\",\n      title: \"Company Info\",\n      alignment: \"center\",\n      children: [\"c1\", \"c2\"]\n    },\n    {\n      id: \"g2\",\n      title: \"Price\",\n      alignment: \"center\",\n      children: [\"c3\", \"c4\"]\n    },\n    {\n      id: \"g4\",\n      title: \"Top 6 Companies\",\n      alignment: \"center\",\n      children: [\"g1\", \"g2\"],\n      render: function(e) {\n        var cell = e.cell;\n        var colIndex = e.colIndex;\n        var groupNode = e.groupNode;\n        cell.setStyle(\"color\", \"orange\");\n        cell.setContent(groupNode.title);\n      }\n    }\n  ],\n  extensions: [\n    new tr.ColumnGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Default usage","tagName":"h3"},{"text":"var gridConfig = {\n    ...\n    columns: [\n      { id: \"c1\", title: \"Column 1\" },\n      { id: \"c2\", title: \"Column 2\" },\n      { id: \"c3\", title: \"Column 3\" },\n      { id: \"c4\", title: \"Column 4\" },\n    ],\n    columnGrouping: [\n      { id: \"g1\", title: \"Group 1\", children: [\"c1\", \"c2\"] },\n      { id: \"g2\", title: \"Group 2\", children: [\"c3\"] },\n      { id: \"g3\", title: \"Group 3\", children: [\"c4\", \"g1\", \"g2\"] },\n    ],\n    ...\n}","tagName":"pre"},{"text":"You can also assign a nested columnGrouping object in the children.","tagName":"p"},{"text":"var gridConfig = {\n    ...\n    columns: [\n      { id: \"c1\", title: \"Column 1\" },\n      { id: \"c2\", title: \"Column 2\" },\n      { id: \"c3\", title: \"Column 3\" },\n      { id: \"c4\", title: \"Column 4\" },\n    ],\n    columnGrouping: [\n      {\n        id: \"g3\", title: \"Group 3\", children: [\n          \"c4\",\n          { id: \"g2\", title: \"Group 2\", children: [\"c3\"] },\n          { id: \"g1\", title: \"Group 1\", children: [\"c1\", \"c2\"] },\n        ]\n      },\n    ],\n    ...\n}","tagName":"pre"},{"text":"Custom render the group header","tagName":"h3"},{"text":"To custom render the group header, you can pass the render configuration as a function to receive e as an argument. Then you can use e.cell to customize cell properties.","tagName":"p"},{"text":"var gridConfig = {\n    ...\n    columns: [\n      { id: \"c1\", title: \"Column 1\" },\n      { id: \"c2\", title: \"Column 2\" },\n      { id: \"c3\", title: \"Column 3\" },\n      { id: \"c4\", title: \"Column 4\" },\n    ],\n    columnGrouping: [\n      {\n        id: \"g1\",\n        title: \"Group 1\",\n        children: [\"c1\", \"c2\"],\n        render: function(e) {\n          e.cell.setStyle(\"color\", \"red\");\n        }\n      },\n      { id: \"g2\", title: \"Group 2\", children: [\"c3\"] },\n      { id: \"g3\", title: \"Group 3\", children: [\"c4\", \"g1\", \"g2\"] },\n    ],\n    ...\n}","tagName":"pre"},{"text":"Migrating from built-in column grouping","tagName":"h3"},{"text":"Due to the built-in libraries being migrated out from the Core Grid to extensions, built-in column grouping will be deprecated and will no longer be maintained.","tagName":"p"},{"text":"The differences between the legacy (built-in) version of column grouping and the new extension can be seen in the examples below.","tagName":"p"},{"text":"Note: The Column Grouping Extension is backward compatible with the old built-in. But we suggest still moving to our new implementation.","tagName":"p"},{"text":"Built-in","tagName":"h4"},{"text":"var gridConfig = {\n    ...\n    columns: [\n      { id: \"c1\", title: \"Column 1\", columnGroup: \"g1\" },\n      { id: \"c2\", title: \"Column 2\", columnGroup: \"g1\" },\n      { id: \"c3\", title: \"Column 3\", columnGroup: \"g2\" },\n    ],\n    columnGroups: [\n      { id: \"g1\", title: \"Group 1\", parent: \"g3\" },\n      { id: \"g2\", title: \"Group 2\", parent: \"g3\" },\n      {\n        id: \"g3\",\n        title: \"Group 3\",\n        formatter: {\n          render: function(colIndex, cell, groupDefinition) {\n            cell.setStyle(\"color\", \"red\");\n          }\n        }\n      },\n    ],\n    ...\n}","tagName":"pre"},{"text":"As seen above, in the legacy version of Column Grouping you needed to specify the mandatory options in both columns and columnGroups, which can be confusing.","tagName":"p"},{"text":"New extension","tagName":"h4"},{"text":"var gridConfig = {\n    ...\n    columns: [\n      { id: \"c1\", title: \"Column 1\" },\n      { id: \"c2\", title: \"Column 2\" },\n      { id: \"c3\", title: \"Column 3\" },\n      { id: \"c4\", title: \"Column 4\" },\n    ],\n    columnGrouping: [\n      { id: \"g1\", title: \"Group 1\", children: [\"c1\", \"c2\"] },\n      { id: \"g2\", title: \"Group 2\", children: [\"c3\"] },\n      {\n        id: \"g3\",\n        title: \"Group 3\",\n        children: [\"c4\", \"g1\", \"g2\"],\n        render: function(e) {\n          e.cell.setStyle(\"color\", \"red\");\n        }\n      },\n    ],\n    ...\n}","tagName":"pre"},{"text":"For the new implementation, the new children option is used and you can specify an array of either Group or Column ID for how you want it to be grouped.","tagName":"p"},{"text":"Also, note that the render config has moved out of the formatter config and receives only e as an argument.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"GroupDefinition","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            id                                                    string                                                                                                                                                                                                    Group id        ","tagName":"tr"},{"text":"                            name                                                    string                                                                                                                                                                                                    Display group name        ","tagName":"tr"},{"text":"                            tooltip                                                    boolean | string                                                                                        <optional>                                                                                                                            true                                                        Show tooltip in column's header        ","tagName":"tr"},{"text":"                            children                                                    Array.<string>                                                                                                                                                                                                    Child member in this group        ","tagName":"tr"},{"text":"                            alignment                                                    string                                                                                        <optional>                                                                                                                                                eg. left, center, right        ","tagName":"tr"},{"text":"                            render                                                    function                                                                                        <optional>                                                                                                                                                render function handler        ","tagName":"tr"},{"text":"GroupDefinitions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"ColumnGroupingPlugin~GroupDefinition","tagName":"a"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"ColumnGroupingPlugin~GroupDefinition","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"addColumnGrouping(groupDef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnGroupingPlugin~GroupDefinition","tagName":"a"},{"text":"ColumnGroupingPlugin#addGroup","tagName":"a"},{"text":"addColumnToGroup(column, groupId, colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addGroup(groupDef) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnGroupingPlugin~GroupDefinition","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"beforeProcessOption(optionName, optionValue) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"config(options)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getGroupChildren(groupId) → {ColumnGroupingPlugin~GroupDefinition}","tagName":"h4"},{"text":"ColumnGroupingPlugin~GroupDefinition","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"ColumnGroupingPlugin~GroupDefinition","tagName":"a"},{"text":"getGroupDefinition(groupId) → {ColumnGroupingPlugin~GroupDefinition}","tagName":"h4"},{"text":"ColumnGroupingPlugin~GroupDefinition","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"ColumnGroupingPlugin~GroupDefinition","tagName":"a"},{"text":"getGroupDefinitions() → {ColumnGroupingPlugin~GroupDefinitions}","tagName":"h4"},{"text":"ColumnGroupingPlugin~GroupDefinitions","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"ColumnGroupingPlugin~GroupDefinitions","tagName":"a"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeGroup(groupId) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setGroupChildren(groupId, newChildList)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setGroupDefinition(groupId, newDef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnGroupingPlugin~GroupDefinition","tagName":"a"},{"text":"setGroupDefinitions(groupDefs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnGroupingPlugin~GroupDefinitions","tagName":"a"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Column Resizing","filename":"extensions/tr-grid-column-resizing.html","contents":[{"text":"Column Resizing","tagName":"h2"},{"text":"The Column Resizing Extension provides drag-to-resize for columns and double-click to fit a column to its content (when using with the Column Fitter Extension).","tagName":"p"},{"text":"Column Resizing Extension","tagName":"a"},{"text":"Column Fitter Extension","tagName":"a"},{"text":"For contributions, check out the Column Resizing Extension repository.","tagName":"p"},{"text":"Column Resizing Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.ColumnResizingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            noResizing                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, it will disable an ability to drag and resize the column        ","tagName":"tr"},{"text":"                            defaultWidth                                                    number                                                                                        <optional>                                                                                                                                                Specified default width used when user double clicks the column edge        ","tagName":"tr"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            preserveProportion                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        By setting this to true, it will try to preserve proportion of the resized column compared to other columns        ","tagName":"tr"},{"text":"                            preserveGridSize                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        By setting this to true, grid size will not change after double click to resize column        ","tagName":"tr"},{"text":"                            noResizing                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, all columns cannot be dragged to resize (column can still be resized programmatically). This overrides column config.        ","tagName":"tr"},{"text":"                            columnResized                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler        ","tagName":"tr"},{"text":"                            dblClicked                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler        ","tagName":"tr"},{"text":"                            dragStart                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler        ","tagName":"tr"},{"text":"                            dragEnd                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"beforeProcessOption(optionName, optionVal) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableResizing(colIndex, opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableHandlebarMode(boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enablePipeHandleMode(boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getColumnSizeStates() → {Array.<Object>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnWidths() → {Array.<number>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDraggedAnchorX() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getDraggedColumnIndex() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"resetAllColumnsToDefaultWidth() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"setAllColumnWidths(colWidth, scalabilityopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnSizeStates(columns)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnWidths(cols, width, opt_scalableopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"columnResized","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                                                                                                ","tagName":"tr"},{"text":"                            width                                                    number                                                                                                                                                ","tagName":"tr"},{"text":"                            colIndices                                                    Array.<number>                                                                                                                                                ","tagName":"tr"},{"text":"                            scalability                                                    boolean                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"dblClicked","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"dragEnd","tagName":"h4"},{"text":"dragStart","tagName":"h4"}]},{"title":"Column Selection","filename":"extensions/tr-grid-column-selection.html","contents":[{"text":"Column Selection","tagName":"h2"},{"text":"The Column Selection Extension will add the ability to select columns in Grid by column or by multiple columns.","tagName":"p"},{"text":"Column Selection Extension","tagName":"a"},{"text":"For contributions, check out the Column Selection Extension repository.","tagName":"p"},{"text":"Column Selection Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.ColumnSelectionExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            unselectable                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, the specified column is not selectable        ","tagName":"tr"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            singleSelection                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, user can have one selection at any moment        ","tagName":"tr"},{"text":"                            clickToggle                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, click at the already selected column will deselect it        ","tagName":"tr"},{"text":"                            selectionChanged                                                    function                                                                                        <optional>                                                                                                                            null                                                        selectionChanged event handler        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"clearAllSelections()","tagName":"h4"},{"text":"clearSelectedColumns()","tagName":"h4"},{"text":"ColumnSelectionPlugin#clearAllSelections","tagName":"a"},{"text":"clearSelection(colsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"deselectAll()","tagName":"h4"},{"text":"ColumnSelectionPlugin#clearSelection","tagName":"a"},{"text":"disable(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getActiveGrid() → {tr.Grid}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getFirstSelectedColumn() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getLastSelectedColumn() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedColumns() → {Array.<number>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasSelectedColumn() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"isEnabled() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"isSelectedColumn(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"selectAll()","tagName":"h4"},{"text":"ColumnSelectionPlugin#selectAllColumns","tagName":"a"},{"text":"selectAllColumns()","tagName":"h4"},{"text":"selectRange(anchorIndex, len, opt_gridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"selectSingleColumn(opt_colIndexopt, opt_gridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSelectedColumn(colIndex, opt_selectopt, opt_gridopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"unload(hostopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"selectionChanged","tagName":"h4"}]},{"title":"Column Stack","filename":"extensions/tr-grid-column-stack.html","contents":[{"text":"Column Stack","tagName":"h2"},{"text":"The Column Stack Extension is an extension that provides a single representative column that can switch to another stacked column.","tagName":"p"},{"text":"Column Stack Extension","tagName":"a"},{"text":"For contributions, check out the Column Stack Extension repository.","tagName":"p"},{"text":"Column Stack Extension repository","tagName":"a"},{"text":"Note: the column ID is required for proper stacking.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>\n<emerald-popup-menu id=\"popup_menu\"></emerald-popup-menu>","tagName":"pre"},{"text":"var columnStackExt = new tr.ColumnStackExtension();\nvar fields = [\"companyName\", \"CF_LAST\", \"CF_NETCHNG\", \"PCTCHNG2\", \"CF_VOLUME\", \"market\", \"industry\", \"TR.IPODate\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [{\n      id: \"c1\",\n      title: \"Company\",\n      field: fields[0]\n    },\n    {\n      id: \"c2\",\n      title: \"Last\",\n      field: fields[1],\n      width: 100\n    },\n    {\n      id: \"c3\",\n      title: \"Net. Chng\",\n      field: fields[2],\n      width: 100,\n      stackId: \"stack1\"\n    },\n    {\n      id: \"c4\",\n      title: \"PCt. Chng\",\n      field: fields[3],\n      width: 100,\n      stackId: \"stack1\"\n    },\n    {\n      id: \"c5\",\n      title: \"Volume\",\n      field: fields[4],\n      width: 100\n    },\n    {\n      id: \"c6\",\n      title: \"Market\",\n      field: fields[5],\n      width: 120,\n      stack: {\n        id: \"stack2\",\n        spreading: true\n      }\n    },\n    {\n      id: \"c7\",\n      title: \"Industry\",\n      field: fields[6],\n      stack: {\n        id: \"stack2\",\n        spreading: true\n      }\n    },\n    {\n      id: \"c8\",\n      title: \"IPO Date\",\n      field: fields[7],\n      stack: {\n        id: \"stack2\",\n        spreading: true\n      }\n    }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    columnStackExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\nvar popupMenu = document.getElementById(\"popup_menu\");\ncolumnStackExt.listen(\"clicked\", function(e) {\n  popupMenu.data = e.menuData;\n  popupMenu.values = [e.activeIndex]; // Select the active menu item\n  popupMenu._colIndex = e.activeColIndex; // Cache for later referencing\n\n  var button = e.event.srcElement;\n  popupMenu.positionTarget = button;\n  popupMenu.opened = true;\n});\n\npopupMenu.addEventListener(\"item-trigger\", function(e) {\n  var val = e.detail.value;\n  if (popupMenu.values[0] !== val) { // If different item is selected, swap the column\n    columnStackExt.swapColumn(popupMenu._colIndex, +val);\n  }\n  popupMenu.opened = false;\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Usage","tagName":"h3"},{"text":"This extension supports two modes for displaying grouped columns, which are stacking mode and collapsing mode.","tagName":"p"},{"text":"Stacking mode","tagName":"h4"},{"text":"With stacking mode, grouped columns will be displayed as only one column per group, so other columns will be invisible.","tagName":"p"},{"text":"You need to listen to the event \"clicked\", which is triggered when the stack icon near the stacked column's title is clicked.","tagName":"p"},{"text":"columnStackExt.listen(\"clicked\", function(e) {\n        // Do something here, eg. show drop down menu for another columns selection\n        var menuData = e.menuData;\n        var activeMenuIndex = e.activeIndex;\n        var columnIndices = e.columnIndices;\n        var activeColIndex = e.activeColIndex;\n});","tagName":"pre"},{"text":"When a new column is selected, use the extension's API to swap selected column.","tagName":"p"},{"text":"columnStackExt.swapColumn(activeColIndex, selectedIndex);","tagName":"pre"},{"text":"Collapsing mode","tagName":"h4"},{"text":"In collapsing mode, grouped columns will be expanded or collapsed. The stack icon in the header row becomes a trigger button that can be used to collapse or expand a group.","tagName":"p"},{"text":"Note: with collapsing mode there is no need to listen to the event \"clicked\".","tagName":"p"},{"text":"Column's state","tagName":"h3"},{"text":"\nWorking Mode\nActive-State\nInactive-State\n","tagName":"tr"},{"text":"\nStacking Mode\nCurrent visible column\nOther membered columns\n","tagName":"tr"},{"text":"\nCollapsing Mode\nAll expanded columns\nAll collapsed columns\n","tagName":"tr"},{"text":"API Reference","tagName":"h2"},{"text":"Members","tagName":"h3"},{"text":"isInCollection :function","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            stackId                                                    string                                                                                        <optional>                                                                                    Group ID        ","tagName":"tr"},{"text":"                            stack                                                    string | StackOptions                                                                                        <optional>                                                                                    Group ID or StackOptions object        ","tagName":"tr"},{"text":"StackOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            id                                                    string                                                                                                                                                                                                    Group ID        ","tagName":"tr"},{"text":"                            spreading                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If specified true, this group will be running in collapsing mode        ","tagName":"tr"},{"text":"                            collapsed                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, this group will be expanded at the first time        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"_afterInit()","tagName":"h4"},{"text":"collapseGroup(colIndex, collapsedopt) → {Array.<number>}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"expandGroup(colIndex) → {Array.<number>}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getMemberIndices(colIndex) → {Array.<number>}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getStackId(colIndex) → {string}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"isActiveStackedColumn(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isCollapsingMode(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isColumnActive(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isColumnCollapsed(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isColumnInCollection(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isColumnStackable(colIndices) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isColumnStacked(colIndicesopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isInactiveStackedColumn(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isStackingMode(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeAllStacks() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"stackColumns(colIndicesopt, stackIdopt, optionsopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"swapColumn(colRef, swappingIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unstackColumns(colIndicesopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"}]},{"title":"Conditional Coloring","filename":"extensions/tr-grid-conditional-coloring.html","contents":[{"text":"Conditional Coloring","tagName":"h2"},{"text":"The Conditional Coloring Extension provides a conditional coloring for a column's field, which will be triggered when a condition is met. For example, fill green when the value is more than zero.","tagName":"p"},{"text":"Conditional Coloring Extension","tagName":"a"},{"text":"For contributions, check out the Conditional Coloring Extension repository.","tagName":"p"},{"text":"Conditional Coloring Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var configObj = {\n  columnReorder: true,\n  columns: [{\n      title: \"Value > 0\",\n      field: \"c1\",\n      sortBy: \"c1\",\n      conditions: [{\n        backgroundColor: \"green\",\n        color: \"white\",\n        expression: \"[c1] > 0\"\n      }]\n    },\n    {\n      title: \"Multiple Conditions\",\n      field: \"c2\",\n      sortBy: \"c2\",\n      conditions: [{\n        backgroundColor: \"\",\n        color: \"green\",\n        expression: \"[c2] > 0\"\n      }, {\n        backgroundColor: \"\",\n        color: \"red\",\n        expression: \"[c2] < 0\"\n      }, {\n        backgroundColor: \"\",\n        color: \"blue\",\n        expression: \"[c2] == 0\"\n      }]\n    },\n    {\n      title: \"Range between -3 and 3\",\n      field: \"c3\",\n      sortBy: \"c3\",\n      conditions: [{\n        backgroundColor: \"lightskyblue\",\n        color: \"\",\n        expression: \"[c3] >= -3 && [c3] <= 3\"\n      }]\n    }\n  ],\n  dataModel: {\n    fields: [\"c1\", \"c2\", \"c3\"],\n    format: \"array\",\n    data: [\n      [10, -10, 4],\n      [2, 10, 1],\n      [0, -50, 2],\n      [-1, 0, 9],\n      [-5, 123.23, 3],\n      [40, 0, 5],\n      [500, -509.1, -1],\n      [1200, 20.9, -2],\n      [20, -40.8, -8],\n      [-70, 2.7, 0],\n      [-40, 1.3, 0],\n      [100, -0.1, 0]\n    ]\n  },\n  extensions: [\n    new tr.ConditionalColoringExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 208px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Blinking feature","tagName":"h3"},{"text":"For required scenarios, there are features to deal with real-time data. For example, stock market data changes all the time, and a user needs to know that the data has changed. The Blinking feature was created to deal with scenarios like this. See the Blinking's typedef section for more details on this feature.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var conditionalColoringExt = new tr.ConditionalColoringExtension();\n\nvar DataGenerator = tr.DataGenerator;\nDataGenerator.addFieldInfo(\"num1\", { type: \"number\", min: -10, max: 11 });\nDataGenerator.addFieldInfo(\"num2\", { type: \"number\", min: -1, max: 11 });\nDataGenerator.addFieldInfo(\"num3\", { type: \"number\", min: -10, max: 3 });\nDataGenerator.addFieldInfo(\"num4\", { type: \"number\", min: -1, max: 3 });\nDataGenerator.addFieldInfo(\"num5\", { type: \"number\", min: -5000, max: 5001 });\nDataGenerator.addFieldInfo(\"char\", { type: \"number\", min: (\"A\").charCodeAt(0), max: (\"Z\").charCodeAt(0) + 1 });\n\nvar fields = [\"num1\", \"num2\", \"num3\", \"num4\", \"num5\", \"char\"];\nvar records = DataGenerator.generateRecords(fields, { numRows: 15 });\nrecords.forEach(function(record) {\n  record.char = String.fromCharCode(record.char);\n});\n\nvar configObj = {\n  columnReorder: true,\n  columns: [{\n      title: \"Blink with Theme Color\",\n      field: \"num1\",\n      sortBy: \"num1\",\n      blinking: true\n    },\n    {\n      title: \"Blink on Top of Condtional Coloring\",\n      field: \"num2\",\n      sortBy: \"num2\",\n      blinking: true,\n      conditions: [{\n        backgroundColor: \"green\",\n        color: \"white\",\n        expression: \"[num2] > 0\"\n      }, {\n        backgroundColor: \"red\",\n        color: \"white\",\n        expression: \"[num2] < 0\"\n      }]\n    },\n    {\n      title: \"Blinking Border\",\n      field: \"num3\",\n      sortBy: \"num3\",\n      blinking: {\n        border: true\n      },\n      conditions: [{\n        backgroundColor: \"\",\n        color: \"green\",\n        expression: \"[num3] > 0\"\n      }, {\n        backgroundColor: \"\",\n        color: \"red\",\n        expression: \"[num3] < 0\"\n      }, {\n        backgroundColor: \"\",\n        color: \"blue\",\n        expression: \"[num3] == 0\"\n      }]\n    },\n    {\n      title: \"Custom Blinking Color\",\n      field: \"num4\",\n      sortBy: \"num4\",\n      blinking: {\n        up: \"#aaDD88\",\n        down: \"#ff33cc\",\n        level: \"#111111\"\n      },\n      conditions: [{\n        backgroundColor: \"lightskyblue\",\n        color: \"\",\n        expression: \"[num4] >= -3 && [num4] <= 3\"\n      }]\n    },\n    {\n      title: \"Blinking Border with Custom Color\",\n      field: \"num5\",\n      sortBy: \"num5\",\n      blinking: {\n        border: true,\n        up: \"blue\",\n        down: \"#ffff00\"\n      },\n      conditions: [{\n        backgroundColor: \"salmon\",\n        color: \"white\",\n        expression: \"[num2] > 0\"\n      }]\n    },\n    {\n      title: \"Blink Only Specific State\",\n      field: \"char\",\n      sortBy: \"char\",\n      blinking: {\n        level: \"#bbbbbb\"\n      },\n      colorText: \"num3\" // Using eikon theme to color\n    }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    conditionalColoringExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\nvar randBetween = tr.DataGenerator.randBetween;\n\nsetInterval(function() { // Slow Update for testing\n  var dv = grid.api.getDataView();\n  var record = DataGenerator.generateRecord(fields);\n  record.char = String.fromCharCode(record.char);\n  dv.setRowDataAt(0, record);\n}, 2000);\n\nsetInterval(function() { // Fast Updates\n  var record = DataGenerator.generateRecord(fields);\n  record.char = String.fromCharCode(record.char);\n\n  // remove some fields randomly\n  for (var key in record) {\n    if (randBetween(0, 10) > 3) {\n      delete record[key];\n    }\n  }\n\n  var dv = grid.api.getDataView();\n  var rowCount = dv.getRowCount();\n  var at = randBetween(1, rowCount);\n  dv.setRowDataAt(at, record);\n}, 200);","tagName":"pre"},{"text":"emerald-grid {\n  height: 208px;\n}","tagName":"pre"},{"text":"Updating the movement color theme","tagName":"h3"},{"text":"Call the reloadThemeColor function to update the theme color after the movement color theme has changed.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Blinking","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            border                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, border will be blinked instead of background        ","tagName":"tr"},{"text":"                            field                                                    string                                                                                        <optional>                                                                                                                                                If not specified, field from column definition will be used        ","tagName":"tr"},{"text":"                            up                                                    string                                                                                        <optional>                                                                                                                                                CSS color (e.g. #00ff00, green)        ","tagName":"tr"},{"text":"                            down                                                    string                                                                                        <optional>                                                                                                                                                CSS color (e.g. #ff0000, red)        ","tagName":"tr"},{"text":"                            level                                                    string                                                                                        <optional>                                                                                                                                                CSS color (e.g. #33333, grey)        ","tagName":"tr"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            conditions                                                    Array.<ConditionalColoringPlugin~Condition>                                                                                        <optional>                                                                                                                            null                                                        List of condition options        ","tagName":"tr"},{"text":"ConditionalColoringPlugin~Condition","tagName":"a"},{"text":"                            colorText                                                    string | boolean                                                                                        <optional>                                                                                                                            null                                                        A shorthand for specifying default condition based on the field.        ","tagName":"tr"},{"text":"                            tickColor                                                    string | boolean                                                                                        <optional>                                                                                                                            null                                                        Alias of colorText.        ","tagName":"tr"},{"text":"                            blinking                                                    ConditionalColoringPlugin~Blinking                                                                                        <optional>                                                                                                                            null                                                        Blink Options. If specified, the cell will be blinked on data change.        ","tagName":"tr"},{"text":"ConditionalColoringPlugin~Blinking","tagName":"a"},{"text":"                            field                                                    string                                                                                        <optional>                                                                                                                                                        ","tagName":"tr"},{"text":"Condition","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            expression                                                    string | function                                                                                        <optional>                                                                                                                                                Expression could be `[FIELD_1] > 0`        ","tagName":"tr"},{"text":"                            backgroundColor                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        CSS color (e.g. #ffffff, black)        ","tagName":"tr"},{"text":"                            color                                                    string                                                                                        <optional>                                                                                                                                                CSS=\"\" color (e.g. #000000, white)        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"setThemeColors(colors)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"applyColor(colIndex, cell, rowDataopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"beforeProcessOption(optionName, optionVal) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"blinkRow(rowIndex, blinkSignal, hostopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getColumnColoring(colIndex, out_objopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnPainter(colIndex) → {CellPainter}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"reloadThemeColors() → {Promise.<Object>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnColoring(colIndex, columnOptions)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ConditionalColoringPlugin~ColumnOptions","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var colDef = {\n  \"conditions\": [{ // Array.<Object> Condition Object Properties\n    \"expression\": \"[column0] > 0\", // string\n    \"backgroundColor\": \"\", // Optional string e.g. #ffffff, black\n    \"color\": \"\" // Optional string e.g. #000000, white\n  }]\n};\nvar colDef2 = {\n  \"field\": \"string\",\n  \"colorText\": true // string as Field or boolean for text coloring mode\n};","tagName":"pre"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Content Wrap","filename":"extensions/tr-grid-content-wrap.html","contents":[{"text":"Content Wrap","tagName":"h2"},{"text":"The Content Wrap Extension is an extension that shows all text information in a cell, even if it is too small to show the text horizontally. The extension will automatically line break.","tagName":"p"},{"text":"Content Wrap Extension","tagName":"a"},{"text":"For contributions, check out the Content Wrap Extension repository.","tagName":"p"},{"text":"Content Wrap Extension repository","tagName":"a"},{"text":"Normal mode","tagName":"h3"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  rowVirtualRendering: false,\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4], width: 120, contentWrap: true }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.ContentWrapExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Even row height mode","tagName":"h3"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  rowVirtualRendering: false,\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4], width: 120, contentWrap: true }\n  ],\n  dataModel: {\n    data: records\n  },\n  contentWrap: {\n    evenRowHeight: true\n  },\n  extensions: [\n    new tr.ContentWrapExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and How to import to your project","tagName":"h3"},{"text":"The detail and examples of installation and how to import extension to your project are available on Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Note: There are conflicting limitations when using Content Wrap and Row Virtualization together. The two functions should not be used at the same time due to a conflict relating to the row height, as per the following:","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            contentWrap                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Content wrapping flag. If enabled, the column will be counted toward row height calculation.        ","tagName":"tr"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            evenRowHeight                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, max row height will be applied for all the rows        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"adjustRowHeight(sectionRef, fromopt, toopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"adjustRowHeightAt(sectionRef, rowIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"beforeProcessOption(optionName) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableContentWrapping(colIndex, boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"isWrappingContent(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Context Menu","filename":"extensions/tr-grid-contextmenu.html","contents":[{"text":"Context Menu","tagName":"h2"},{"text":"The Context Menu Extension provides the capability to display a customized contextual menu when a user right-clicks on the grid. The menu items to be displayed are totally customizable based on the position of the mouse, the data, and also any customized logic of your application.","tagName":"p"},{"text":"Context Menu Extension","tagName":"a"},{"text":"For contributions, check out the Context Menu Extension repository.","tagName":"p"},{"text":"Context Menu Extension repository","tagName":"a"},{"text":"<span id=\"text\"></span>\n\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  contextMenu: {\n    items: {\n      HEADER: {\n        text: 'Header 1',\n        value: '1',\n        callback: function(e) {\n          document.getElementById(\"text\").textContent = \"Column: \" + (e.colIndex + 1) + \", \" + e.item.text + \" Clicked!\";\n        }\n      },\n      MENU_1: {\n        text: 'Menu 1',\n        value: '1',\n        callback: function(e) {\n          document.getElementById(\"text\").textContent = \"Column: \" + (e.colIndex + 1) + \", \" + e.item.text + \" Clicked!\";\n        }\n      },\n      MENU_2: {\n        text: 'Menu 2',\n        value: '2',\n        callback: function(e) {\n          document.getElementById(\"text\").textContent = \"Column: \" + (e.colIndex + 1) + \", \" + e.item.text + \" Clicked!\";\n        }\n      },\n      MENU_3: {\n        text: 'Menu 3',\n        value: '3',\n        callback: function(e) {\n          document.getElementById(\"text\").textContent = \"Column: \" + (e.colIndex + 1) + \", \" + e.item.text + \" Clicked!\";\n        }\n      }\n    },\n    onMenu: function(e) {\n      if (e.context === 'header') {\n        e.menu.addItem('HEADER');\n      }\n      if (e.context === 'content') {\n        e.menu.addItem('MENU_1');\n        e.menu.addItem('MENU_2');\n        e.menu.addSeparator();\n        e.menu.addItem('MENU_3');\n      }\n    }\n  },\n  extensions: [\n    new tr.ContextMenuExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Basic menu display","tagName":"h3"},{"text":"To show the menu, you need to define menu items in the grid's configuration object. Each menu item is assigned to a name so it can be referenced later at the display time in the onMenu() event handler. onMenu() is an event handler triggered when a user right-clicks at an area on the grid. You can choose to display the menu only at a specific place on the grid by checking the value of e.context.","tagName":"p"},{"text":"var config = {\n    //...any other grid's options...\n  contextMenu: {\n    items: {\n      HEADER: {text: 'Header 1', value: '1', callback: function (e) {\n        // Do something\n        console.log(e.item);\n      }},\n      MENU_1: {text: 'Menu 1', value: '1', callback: function (e) {\n        // Do something\n        console.log(e.item);\n      }},\n      MENU_2: {text: 'Menu 2', value: '2', callback: function (e) {\n        // Do something\n        console.log(e.item);\n      }},\n      MENU_3: {text: 'Menu 3', value: '3', callback: function (e) {\n        // Do something\n        console.log(e.item);\n      }}\n    },\n    onMenu: function (e) {\n      if (e.context === 'header') {\n        e.menu.addItem('HEADER');\n      }\n      if (e.context === 'content') {\n        e.menu.addItem('MENU_1');\n        e.menu.addItem('MENU_2');\n        e.menu.addSeparator();\n        e.menu.addItem('MENU_3');\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"Custom menu display","tagName":"h3"},{"text":"To use the context menu with other UIs, this extension exposes the 'contextmenu' event and provide related information to the event argument for integration. See the example below:","tagName":"p"},{"text":"var config = {\n  //...any other grid's options...\n  contextMenu: true, // Default UI is disabled\n};\nvar cme = new ContextMenu();\ncme.listen(\"contextmenu\", function(e) { \n    console.log(e); \n    // Create your custom pop up menu here\n});","tagName":"pre"},{"text":"Or you can define the context menu event handler directly (see below), which is equivalent to the codes above:","tagName":"p"},{"text":"var config = {\n  //...any other grid's options...\n  contextMenu: function(e) {\n    console.log(e); \n  },\n};","tagName":"pre"},{"text":"Group menu display","tagName":"h3"},{"text":"Several menu items can be grouped together under a name and can be inserted only once into the menu. From the snippet below, all three menus–SORT_ASCENDING, SORT_DESCENDING, and SORT_ORIGINAL–are inserted together.","tagName":"p"},{"text":"var config = {\n  //...any other grid's options...\n  contextMenu: {\n    items: {\n      SORT_ASCENDING: {text: 'Sort Ascending', value: 's'},\n      SORT_DESCENDING: {text: 'Sort Descending', value: 'd'},\n      SORT_ORIGINAL: {text: 'Original Order', value: 'n'},\n      SORTING: [\n        'SORT_ASCENDING',\n        'SORT_DESCENDING',\n        'SORT_ORIGINAL',\n      ]\n    },\n    onMenu: function (e) {\n      if (e.context === 'content') {\n        //Insert the whole group in 1 statement\n        e.menu.addItem('SORTING');\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"Runtime menu disabling","tagName":"h3"},{"text":"You may find you want to disable or hide a menu item for a specific condition. You can do this by adding your condition inside the onMenu() event handler. The event argument of onMenu() contains a reference called items which is pointing back to the menu item definitions in the configuration object. So, you can set a property like isDisabled or isVisible to each menu item before the menu is rendered.","tagName":"p"},{"text":"In the example below, the menu 'Hide Column' is disabled for the first column of the grid.","tagName":"p"},{"text":"var config = {\n  //...any other grid's options...\n  contextMenu: {\n    items: {\n      HIDE_COLUMN: {text: 'Hide Column', value: 'hide'},\n      SHOW_ALL_COLUMNS: {text: 'Show All Columns', value: 'show'}\n    },\n    onMenu: function (e) {\n      if (e.context === 'header') {\n        //isDisabled is `true` when column index is 0\n        e.items.HIDE_COLUMN.isDisabled = (e.colIndex === 0);\n\n        e.menu.addItem('HIDE_COLUMN');\n        e.menu.addItem('SHOW_ALL_COLUMNS');\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"Submenu","tagName":"h3"},{"text":"A multi-level submenu can be added to an item using the items property. With a submenu you can also handle a menu click event at the parent level, to simplify your code.","tagName":"p"},{"text":"var config = {\n  //...any other grid's options...\n  contextMenu: {\n    items: {\n      SET_ROW_COLOR: {text: 'Set Row Color', items: [\n        {text: 'Red', value: '#FF0000'},\n        {text: 'Green', value: '#00FF00'},\n        {text: 'Blue', value: '#0000FF'},\n        {isSeparator: true},\n        {text: 'Clear Color', value: ''}\n      ], callback: function (e) {\n        //Single place of callback handling for all sub-menu item clicking\n        console.log(e.item.getValue());\n      }},\n    },\n    onMenu: function (e) {\n      if (e.context === 'header') {\n        //isDisabled is `true` when column index is 0\n        e.items.HIDE_COLUMN.isDisabled = (e.colIndex === 0);\n\n        e.menu.addItem('HIDE_COLUMN');\n        e.menu.addItem('SHOW_ALL_COLUMNS');\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Context","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"MenuItem","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            text                                                    string                                                                                        <optional>                                                                                    Text to diplay at the item        ","tagName":"tr"},{"text":"                            value                                                    string | number                                                                                        <optional>                                                                                    Value attached to the item        ","tagName":"tr"},{"text":"                            isDisabled                                                    boolean                                                                                        <optional>                                                                                    If true the item will be disabled, default is false        ","tagName":"tr"},{"text":"                            isVisible                                                    boolean                                                                                        <optional>                                                                                    If false the item will not be displayed, default is true        ","tagName":"tr"},{"text":"                            isSeparator                                                    boolean                                                                                        <optional>                                                                                    If true the item is rendered as an item separator        ","tagName":"tr"},{"text":"                            items                                                    Array.<ContextMenuPlugin~MenuItem>                                                                                        <optional>                                                                                    Array of sub-menu items        ","tagName":"tr"},{"text":"ContextMenuPlugin~MenuItem","tagName":"a"},{"text":"                            renderer                                                    function                                                                                        <optional>                                                                                    Callback function to do custom rendering of the item, see more information in later section        ","tagName":"tr"},{"text":"                            callback                                                    ContextMenuPlugin~MenuItemEventCallback                                                                                        <optional>                                                                                    Menu item clicked handler function        ","tagName":"tr"},{"text":"ContextMenuPlugin~MenuItemEventCallback","tagName":"a"},{"text":"MenuItemEvent","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            altKey                                                    boolean                                                            Flag to indicate if ALT key is pressed when the mouse is clicked        ","tagName":"tr"},{"text":"                            cell                                                    tr.grid.Cell                                                            Cell object at the mouse clicked position        ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                            Index number of the column that the mouse clicked on        ","tagName":"tr"},{"text":"                            columnDef                                                    object                                                            Column Definition of the column that the mouse clicked on        ","tagName":"tr"},{"text":"                            context                                                    ContextMenuPlugin~Context                                                            Area of the grid that the mouse clicked on        ","tagName":"tr"},{"text":"ContextMenuPlugin~Context","tagName":"a"},{"text":"                            ctrlKey                                                    boolean                                                            Flag to indicate if CTRL key is pressed when the mouse is clicked        ","tagName":"tr"},{"text":"                            item                                                    ContextMenuPlugin~MenuItem                                                            The item the mouse is clicked on        ","tagName":"tr"},{"text":"ContextMenuPlugin~MenuItem","tagName":"a"},{"text":"                            items                                                    Object.<string, ContextMenuPlugin~MenuItem>                                                            Object reference to the menu items under items option        ","tagName":"tr"},{"text":"ContextMenuPlugin~MenuItem","tagName":"a"},{"text":"                            menu                                                    MenuEventAPI                                                            API for adding menu items to be rendered        ","tagName":"tr"},{"text":"MenuEventAPI","tagName":"a"},{"text":"                            rowIndex                                                    number                                                            Index number of the row the mouse clicked on        ","tagName":"tr"},{"text":"                            section                                                    tr.LayoutGrid                                                            Wraper Object of the grid's area the mouse clicked on        ","tagName":"tr"},{"text":"                            shiftKey                                                    boolean                                                            Flag to indicate if SHIFT key is pressed when the mouse is clicked        ","tagName":"tr"},{"text":"MenuItemEventCallback(e)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ContextMenuPlugin~MenuItemEvent","tagName":"a"},{"text":"OnMenuEvent","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            cell                                                    tr.grid.Cell                                                            Cell object at the mouse clicked position        ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                            Index number of the column that the mouse clicked on        ","tagName":"tr"},{"text":"                            columnDef                                                    object                                                            Column Definition of the column that the mouse clicked on        ","tagName":"tr"},{"text":"                            context                                                    ContextMenuPlugin~Context                                                            Area of the grid that the mouse clicked on        ","tagName":"tr"},{"text":"ContextMenuPlugin~Context","tagName":"a"},{"text":"                            items                                                    object                                                            Object reference to the menu items under items option        ","tagName":"tr"},{"text":"                            menu                                                    MenuEventAPI                                                            API for adding menu items to be rendered        ","tagName":"tr"},{"text":"MenuEventAPI","tagName":"a"},{"text":"                            rowIndex                                                    number                                                            Index number of the row the mouse clicked on        ","tagName":"tr"},{"text":"                            section                                                    tr.LayoutGrid                                                            Wraper Object of the grid's area the mouse clicked on        ","tagName":"tr"},{"text":"                            selectedColumns                                                    Array.<number>                                                            Array of selected indices. Return null, if no selection        ","tagName":"tr"},{"text":"                            selectedRows                                                    Array.<number>                                                            Array of selected indices. Return null, if no selection        ","tagName":"tr"},{"text":"OnMenuEventCallback(e)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ContextMenuPlugin~OnMenuEvent","tagName":"a"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            items                                                    Object.<string, ContextMenuPlugin~MenuItem>                                                                                                                                                ","tagName":"tr"},{"text":"ContextMenuPlugin~MenuItem","tagName":"a"},{"text":"                            onMenu                                                    ContextMenuPlugin~OnMenuEventCallback                                                                                        <optional>                                                                                    @ @property {Function=} contextmenu        ","tagName":"tr"},{"text":"ContextMenuPlugin~OnMenuEventCallback","tagName":"a"},{"text":"Methods","tagName":"h3"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getMenuModel() → {Object}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Filter Input","filename":"extensions/tr-grid-filter-input.html","contents":[{"text":"Filter Input","tagName":"h2"},{"text":"The Filter Input Extension provides a search tool for each column that supports text search and custom functions.","tagName":"p"},{"text":"Filter Input Extension","tagName":"a"},{"text":"For contributions, check out the Filter Input Extension repository.","tagName":"p"},{"text":"Filter Input Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"rowNumber\", {\n  type: \"function\",\n  generate: function(info, seed) {\n    return ++info.count;\n  },\n  count: 0,\n});\nvar markets = [\"NYSE\", \"NASDAQ\", \"SET\", \"DJI\", \"HSCEI\", \"HKEX\", \"NIKKEI\"];\nvar fields = [\"rowNumber\", \"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 40 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [{\n      field: fields[0],\n      filterInput: false,\n      width: 40\n    },\n    {\n      title: \"Company\",\n      field: fields[1]\n    },\n    {\n      title: \"Market\",\n      field: fields[2],\n      width: 120,\n      filterInput: {\n        type: \"select\",\n        entries: markets\n      }\n    },\n    {\n      title: \"Last\",\n      field: fields[3],\n      width: 100,\n      filterInput: {\n        type: \"number\"\n      }\n    },\n    {\n      title: \"Net. Chng\",\n      field: fields[4],\n      width: 100,\n      filterInput: {\n        type: \"number\"\n      }\n    },\n    {\n      title: \"Industry\",\n      field: fields[5]\n    }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.FilterInputExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Additional dependencies","tagName":"h3"},{"text":"Details of additional dependencies for this extension are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            defaultLogic                                                    function                                                                                        <optional>                                                                                                                            null                                                        Logic for filtering        ","tagName":"tr"},{"text":"                            filterLogic                                                    function                                                                                        <optional>                                                                                                                            null                                                        Alias to `defaultLogic`        ","tagName":"tr"},{"text":"                            disabled                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Disable UI        ","tagName":"tr"},{"text":"                            placeholder                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Placeholder text inside the input        ","tagName":"tr"},{"text":"                            type                                                    string                                                                                        <optional>                                                                                                                            \"text\"                                                        Type of UI. Available types are \"number\", \"select\", \"dropdown\", \"date\"        ","tagName":"tr"},{"text":"                            entries                                                    Array                                                                                        <optional>                                                                                                                                                Entries of dropdown filters when type is \"select\"        ","tagName":"tr"},{"text":"FilterLogic()","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            e                                                    Object                                                            Object contains all related information provided by the extension                Properties                        Name                Type                Attributes                        Description                                                    inputText                                                    string                                                                                        <optional>                                                                                    Text for filter                                                input                                                    Element                                                                                                                                        Input element                                                field                                                    string                                                                                                                                        Field of the column being filtered                                    ","tagName":"tr"},{"text":"Properties","tagName":"h6"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            inputText                                                    string                                                                                        <optional>                                                                                    Text for filter        ","tagName":"tr"},{"text":"                            input                                                    Element                                                                                                                                        Input element        ","tagName":"tr"},{"text":"                            field                                                    string                                                                                                                                        Field of the column being filtered        ","tagName":"tr"},{"text":"                            rowData                                                    Object                                                            Row Data of the filtered row        ","tagName":"tr"},{"text":"GridColumn","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            filterInput                                                    FilterInputPlugin~ColumnOptions                                                                                        <optional>                                                                                                                            null                                                                ","tagName":"tr"},{"text":"FilterInputPlugin~ColumnOptions","tagName":"a"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            inputCreated                                                    function                                                                                        <optional>                                                                                                                            null                                                        Handler executed after filter input is created        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"filterColumn(colIndex, text)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getColumnInput(colIndex) → {Element}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(out_objopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"refresh(delayMsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeColumnFilter(colIndexopt)","tagName":"h4"},{"text":"FilterInputPlugin#removeColumnFilters","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"removeColumnFilters(colIndexopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setFilterLogic(colIndex, func, ctxopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"inputCreated","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            input                                                    Element                                                            Input element        ","tagName":"tr"},{"text":"                            cell                                                    Element                                                                    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            colId                                                    number | null                                                                    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            grid                                                    tr.Grid                                                                    ","tagName":"tr"},{"text":"                            section                                                    tr.ILayoutGrid                                                            Section contains all of the filter inputs        ","tagName":"tr"}]},{"title":"Heat Map","filename":"extensions/tr-grid-heat-map.html","contents":[{"text":"Heat Map","tagName":"h2"},{"text":"The Heat Map Extension provides heat map coloring for column fields, which will be the type set by the heatMap property.","tagName":"p"},{"text":"Heat Map Extension","tagName":"a"},{"text":"For contributions, check out the Heat Map Extension repository.","tagName":"p"},{"text":"Heat Map Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"volume\", {\n  type: \"number\",\n  min: \"1\",\n  max: \"1001\"\n});\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"volume\", \"PCTCHNG2\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [{\n      title: \"Company\",\n      field: fields[0]\n    },\n    {\n      title: \"Market\",\n      field: fields[1],\n      width: 120\n    },\n    {\n      title: \"Last\",\n      field: fields[2],\n      width: 100,\n      heatMap: {\n        mode: \"text\",\n        midPoint: 500\n      }\n    },\n    {\n      title: \"Volume\",\n      field: fields[3],\n      sortBy: fields[3],\n      width: 100,\n      heatMap: {\n        midPoint: 300\n      }\n    },\n    {\n\n      title: \"Pct. Chng\",\n      field: fields[4],\n      sortBy: fields[4],\n      width: 100,\n      heatMap: true\n    }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.HeatMapExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            field                                                    string                                                                                                                                                                                                    Field used by the heat map        ","tagName":"tr"},{"text":"                            heatMap                                                    HeatMapPlugin~Heatmap                                                                                        <optional>                                                                                                                            null                                                        Heat map options        ","tagName":"tr"},{"text":"HeatMapPlugin~Heatmap","tagName":"a"},{"text":"Heatmap","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            midPoint                                                    number                                                                                        <optional>                                                                                                                            0                                                        Middle point between values representing up and down colors        ","tagName":"tr"},{"text":"                            mode                                                    string                                                                                        <optional>                                                                                                                            \"cell\"                                                        In cell mode, heat map color will be applied to the entire cell        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"config(optionsopt, opt_gridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getColumnHeatMap(colIndex, gridopt) → {CellPainter}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnHeatMapOptions(colIndex, optionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"var obj = {\n \"heatMap\": {\n   \"midPoint\": 0, // optional number\n   \"mode\": \"cell\", // optional string\n }\n};","tagName":"pre"},{"text":"getConfigObject(out_objopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnHeatMap(colIndex, columnDef, opt_gridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"plugin.setColumnHeatMap(1, {\n  \"field\": \"CF_LAST\"\n  \"heatMap\": {\n    \"midPoint\": 0, // optional number\n    \"mode\": \"cell\" // optional string (cell|text)\n  }\n});","tagName":"pre"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"In-Cell Editing","filename":"extensions/tr-grid-in-cell-editing.html","contents":[{"text":"In-Cell Editing","tagName":"h2"},{"text":"The In-Cell Editing Extension provides full editing abilities for your grid, including content and title editing in cell.","tagName":"p"},{"text":"In-Cell Editing Extension","tagName":"a"},{"text":"For contributions, check out the In-Cell Editing Extension repository.","tagName":"p"},{"text":"In-Cell Editing Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var inCellEditingExt = new tr.InCellEditingExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  inCellEditing: {\n    editableContent: true\n  },\n  extensions: [\n    inCellEditingExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Single click for editing","tagName":"h3"},{"text":"The live demo below demonstrates how to open editor with single click event. In this setting, you do not need to double click to open the editor. You can disable double click mode by setting doubleClick to false then handle it with your own implementation like the following example.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var inCellEditingExt = new tr.InCellEditingExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  inCellEditing: {\n    doubleClick: false\n  },\n  extensions: [\n    inCellEditingExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ngrid.addEventListener(\"click\", function(e) {\n  var mousePos = grid.api.getRelativePosition(e);\n  if (mousePos.sectionType == \"content\") {\n    inCellEditingExt.openEditor(mousePos.colIndex, mousePos.rowIndex);\n  }\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Row editor","tagName":"h3"},{"text":"Use the function openRowEditor(rowIndex, option_grid) to open the row editor at specific rowIndex. If another editor is open, this function will close that editor without committing changes.","tagName":"p"},{"text":"Use the function closeRowEditor(isCommit) to close an open row editor. If isCommit = true then all changes that have been made will be saved in the row data.","tagName":"p"},{"text":"Use the function toggleRowEditor(rowIndex, isCommit, option_grid) to open row editor at specific rowIndex. If that row already has an editor open, this function will close the row editor instead. If another rowIndex has a row editor open, this function will close that row editor and open a row editor at a specific rowIndex instead. If isCommit = true all changes that have been made will be saved when the row editor closes. It does not have any effect if a row editor was not already open.","tagName":"p"},{"text":"Using the event beforeRowCommit to allow a developer verify the user input before an actual commit process occurs. A developer can mutate the user input or decide to cancel the commit process if the verifying process fails.","tagName":"p"},{"text":"The live demo below demonstrates how to control the row editor with the openRowEditor, closeRowEditor, toggleRowEditor APIs and beforeRowCommit event.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var inCellEditingExt = new tr.InCellEditingExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\n\nvar editIconFormatter = {\n  render: function() {}, // required by composite-grid\n  bind: function(rowIndex, colIndex, value, cell /*, columnDef,  dataRow,  dataTable */ ) {\n    var icon = cell.getContent(); // Utilize caching\n    if (!icon) {\n      icon = document.createElement(\"span\");\n      icon.textContent = \"✎\";\n      icon.style = \"cursor: pointer\";\n      icon.addEventListener(\"click\", function(e) {\n        var isCommit = true;\n        var pos = grid.api.getRelativePosition(e);\n        inCellEditingExt.toggleRowEditor(pos.rowIndex, isCommit);\n      });\n    }\n    cell.setContent(icon);\n  }\n};\n\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { width: 30, editableContent: false, formatter: editIconFormatter },\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100, editableContent: false },\n    { title: \"Industry\", field: fields[4], editableContent: false }\n  ],\n  dataModel: {\n    data: records\n  },\n  inCellEditing: {\n    editableContent: true,\n    doubleClick: false,\n    beforeRowCommit: function(e) {\n      var fieldValue = e.fieldValue;\n      for (var field in fieldValue) {\n        if (!fieldValue.hasOwnProperty(field)) continue;\n        var value = fieldValue[field];\n        if (typeof value === \"string\" && value.length === 0) {\n          fieldValue[field] = \"commited\"; // you also can modify value\n        }\n      }\n      // e.cancel = true; // you can cancel the commit process but rowEditor will continue closing, anyway.\n    }\n  },\n  extensions: [\n    inCellEditingExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Cache","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            editor                                                    Element                                                            Input element such as text input, numeric stepper, date-time picker.        ","tagName":"tr"},{"text":"                            balloon                                                    Element                                                            Container element of input.        ","tagName":"tr"},{"text":"                            balloonPopup                                                    Element                                                            balloon popup. It contains balloon element inside.        ","tagName":"tr"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            editableContent                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Make the column editable by double click        ","tagName":"tr"},{"text":"                            inCellEditing                                                    InCellEditingPlugin~EditorOptions                                                                                        <optional>                                                                                                                                                Editor options give more refinements, such as \"type\" for specific editor type or \"entries\" for dropdown box        ","tagName":"tr"},{"text":"InCellEditingPlugin~EditorOptions","tagName":"a"},{"text":"EditorOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            type                                                    string                                                                                        <optional>                                                                                                                            \"text\"                                                        Specify type of the editor. Available types are text, number, dropdown, date, checkbox, and combobox.        ","tagName":"tr"},{"text":"                            entries                                                    Array                                                                                        <optional>                                                                                                                            null                                                        Specify list of items available in the dropdown box        ","tagName":"tr"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            balloonMode                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Show editor in a balloon. This is useful when there is not much space in the cell        ","tagName":"tr"},{"text":"                            editableTitle                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, all column headers can be edited by double click        ","tagName":"tr"},{"text":"                            editableContent                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, all content cells can be edited by double click. This can be overridden individual column configuration.        ","tagName":"tr"},{"text":"                            autoCommitText                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, the text will be committed even if user leaving editor midway        ","tagName":"tr"},{"text":"                            dataBinding                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, text will not be updated in the grid's data table        ","tagName":"tr"},{"text":"                            popupElement                                                    Element                                                                                        <optional>                                                                                                                            null                                                        Element to be attached under the editor        ","tagName":"tr"},{"text":"                            doubleClick                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, double click will not trigger editor        ","tagName":"tr"},{"text":"                            tabToMove                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, pressing tab key while editor is active will open editor on the next editable cell.        ","tagName":"tr"},{"text":"                            contentSource                                                    boolean                                                                                        <optional>                                                                                                                            \"textContent\"                                                        By default, the text in the editor will be populated with textContent of the target cell. Use \"field\" to populated data from grid's data model. Use \"empty\" to shows empty editor.        ","tagName":"tr"},{"text":"                            inlineStyling                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        force inline styles regardless of elf version.        ","tagName":"tr"},{"text":"                            preEditorOpening                                                    function                                                                                        <optional>                                                                                                                            null                                                        Handler before editor is opened        ","tagName":"tr"},{"text":"                            editorOpened                                                    function                                                                                        <optional>                                                                                                                            null                                                        Handler after editor is opened        ","tagName":"tr"},{"text":"                            beforeCommit                                                    function                                                                                        <optional>                                                                                                                            null                                                        Handler before data binding, allowing data type conversion        ","tagName":"tr"},{"text":"                            editorClosed                                                    function                                                                                        <optional>                                                                                                                            null                                                        Handler after editor is closed        ","tagName":"tr"},{"text":"                            keyUp                                                    function                                                                                        <optional>                                                                                                                            null                                                        Handler for each keyup of the input text box        ","tagName":"tr"},{"text":"                            beforeRowCommit                                                    function                                                                                        <optional>                                                                                                                            null                                                        Handler before all editor in row commit        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"appendText(word)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"beforeProcessOption(optionName, optionVal) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"clearText()","tagName":"h4"},{"text":"closeCellEditor(opt_forceCommitopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"closeRowEditor(isCommit)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"InCellEditingPlugin#event:beforeRowCommit","tagName":"a"},{"text":"commitText(wordopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableCellEditing(cell, opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableDataBinding(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableDblClick(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableTitleEditing(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableAutoCommitText(opt_enableopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableBalloonMode(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableTitleEditing(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getActiveColIndex() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getActiveGrid() → {tr.Grid|null}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getBalloonPopup() → {Popup|null}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(out_objopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getInitialText() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getInputElementPosition() → {Object}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getText() → {string}","tagName":"h4"},{"text":"InCellEditingPlugin#getValue","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"getTextBox() → {Element}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getValue() → {*}","tagName":"h4"},{"text":"InCellEditingPlugin#getText","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, options)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"isColumnEditable(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isEditing() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"openEditor(colIndex, rowIndex, sectionRefopt, gridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Fires:","tagName":"h5"},{"text":"InCellEditingPlugin#event:editorOpened","tagName":"a"},{"text":"openRowEditor(rowIndex, gridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setPopupElement(elm)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setText(content)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"toggleRowEditor(rowIndex, isCommitopt, gridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload()","tagName":"h4"},{"text":"Events","tagName":"h3"},{"text":"beforeCommit","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            text                                                    string                                                                                        <optional>                                                                                    Text that user has entered        ","tagName":"tr"},{"text":"                            cancel                                                    boolean                                                                                        <optional>                                                                                    Set to true to cancel the commit operation.        ","tagName":"tr"},{"text":"Example:","tagName":"h5"},{"text":"var cep = new InCellEditingPlugin();\ncep.listen(\"beforeCommit\", function(e) {\n  var num = +e.text; // Cast input type to number\n  if(num === num) { // Check if string can be converted to number\n    e.text = num; // Modify user input and continue commit operation (i.e. set data back to grid model)\n  } else { // User entered something other than number\n    e.cancel = true; // Cancel the commiting process\n  }\n});","tagName":"pre"},{"text":"beforeRowCommit","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            grid                                                    tr.grid                                                                                                                                        grid instance        ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                                                                                        row index        ","tagName":"tr"},{"text":"                            fieldValue                                                    object                                                                                                                                        object that contain text in each field        ","tagName":"tr"},{"text":"                            cancel                                                    boolean                                                                                        <optional>                                                                                    Set to true to cancel the commit operation.        ","tagName":"tr"},{"text":"Example:","tagName":"h5"},{"text":"var cep = new InCellEditingPlugin();\ncep.listen(\"beforeRowCommit\", function(e) {\n        var fieldValue = e.fieldValue;\n        for (var field in fieldValue) {\n            if (!fieldValue.hasOwnProperty(field)) continue;\n            var value = fieldValue[field];\n            if (checkValid(value)) { // check value is valid\n                fieldValue[field] = value + \"foo bar\"; // modify text\n            } else {\n                e.cancel = true; // if not valid maybe cancel commit\n                break;\n            }\n        }\n});","tagName":"pre"},{"text":"editorClosed","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            text                                                    string                                                                                        <optional>                                                                                    Text that user has entered        ","tagName":"tr"},{"text":"                            cancelled                                                    boolean                                                                                                                                        Readonly flag. Indicates whether the commit operation has been cancelled        ","tagName":"tr"},{"text":"                            committed                                                    boolean                                                                                                                                        Readonly flag. The opposite of `cancelled` flag        ","tagName":"tr"},{"text":"editorOpened","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            dataSource                                                    tr.DataView                                                                    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            field                                                    string                                                                    ","tagName":"tr"},{"text":"                            inputElement                                                    Element                                                                    ","tagName":"tr"},{"text":"Example:","tagName":"h5"},{"text":"var cep = new InCellEditingPlugin();\ncep.listen(\"editorOpened\", function(e) {\n  var data = e.dataSource.getDataAt(e.rowIndex, e.field);\n  e.inputElement.value = data + \" aaa\";\n});","tagName":"pre"},{"text":"keyUp","tagName":"h4"},{"text":"preEditorOpening","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            cancel                                                    boolean                                                                                        <optional>                                                                                    Set to true to cancel the openning operation.        ","tagName":"tr"},{"text":"Example:","tagName":"h5"},{"text":"var cep = new InCellEditingPlugin();\ncep.listen(\"preEditorOpening\", function(e) {\n  e[\"cancel\"] = true; // Cancel the editing process\n});","tagName":"pre"}]},{"title":"Pagination","filename":"extensions/tr-grid-pagination.html","contents":[{"text":"Pagination","tagName":"h2"},{"text":" The Pagination Extension provides behaviors that allow you to split a huge amount of content within your grid into smaller parts. This extension is for client side pagination, where all data is already available at the client side. For server side pagination, see our pagination usage guide. ","tagName":"p"},{"text":"Pagination Extension","tagName":"a"},{"text":"pagination usage guide","tagName":"a"},{"text":" For contributions, check out the Pagination Extension repository.","tagName":"p"},{"text":"Pagination Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>\n<emerald-pagination id=\"pagination\"></emerald-pagination>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"rowNumber\", {\n  type: \"function\",\n  generate: function(info, seed) {\n    return ++info.count;\n  },\n  count: 0,\n});\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\", \"rowNumber\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"ID\", field: fields[5], alignment: \"center\", width: 40 },\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  pagination: {\n    element: document.getElementById(\"pagination\"),\n    page: 1,\n    pageSize: 5\n  },\n  extensions: [\n    new tr.PaginationExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}\n\nemerald-pagination {\n  margin-bottom: 30px;\n}","tagName":"pre"},{"text":"Note: If there is only one pagination element in the document, the extension is capable of finding the element automatically. However, if there are multiple pagination elements in a document, it is necessary to specify the element into the element field of pagination's configuration.","tagName":"p"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Additional dependencies","tagName":"h3"},{"text":"Details of additional dependencies for this extension are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Performing additional tasks after page change","tagName":"h3"},{"text":"After each page change, you can do some custom tasks by specifying event handler to pageChanged property of the extension configuration object, like so:","tagName":"p"},{"text":"var onPageChanged = function(e) {\n    console.log(\"Page is changed to \" + e.page);\n};\nvar configObj = {\n    // ...\n    pagination: {\n        element: \"elem_id\",\n        page: 1,\n        pageSize: 5,\n        pageChanged: onPageChanged\n    },\n    // ...\n};","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            page                                                    number                                                                                        <optional>                                                                                                                            1                                                        Initial page to be shown        ","tagName":"tr"},{"text":"                            pageSize                                                    number                                                                                        <optional>                                                                                                                            10                                                        Number of rows per page        ","tagName":"tr"},{"text":"                            element                                                    string | Element                                                                                        <optional>                                                                                                                                                A reference to pagination element. This can be a direct pointer or element's id        ","tagName":"tr"},{"text":"                            elements                                                    Array                                                                                        <optional>                                                                                                                            null                                                        Multiple references can be linked to a single grid        ","tagName":"tr"},{"text":"                            pageChanged                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler for event after page has been changed        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"beforeProcessOption(optionName, options) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"first()","tagName":"h4"},{"text":"getConfigObject(out_objopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPageCount() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPageIndex() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPageSize() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getTotalRows() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"goto(pageIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, options)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"last()","tagName":"h4"},{"text":"next()","tagName":"h4"},{"text":"previous()","tagName":"h4"},{"text":"setElement(elemRefopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setPage(page)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setPageSize(size)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"pageChanged","tagName":"h4"}]},{"title":"Percent Bar","filename":"extensions/tr-grid-percent-bar.html","contents":[{"text":"Percent Bar","tagName":"h2"},{"text":"The Percent Bar Extension is an extension that provides formatter for rendering percent bar in column. ","tagName":"p"},{"text":"Percent Bar Extension","tagName":"a"},{"text":"For contributions, check out the Percent Bar Extension repository.","tagName":"p"},{"text":"Percent Bar Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 150, percentBar: { alignment: \"l\" } },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.PercentBarExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Update movement color theme","tagName":"h3"},{"text":"Call the reloadThemeColor function to update the theme color after the movement color theme has changed.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            alignment                                                    string                                                                                        <optional>                                                                                                                                                By default percent bar will have the same alignment as the column        ","tagName":"tr"},{"text":"                            field                                                    string                                                                                        <optional>                                                                                                                            THIS_COLUMN                                                        Data field        ","tagName":"tr"},{"text":"                            textHidden                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, displays percent bar only        ","tagName":"tr"},{"text":"                            textWidth                                                    number | string                                                                                        <optional>                                                                                                                                                If specified, percent bar text will have fixed width        ","tagName":"tr"},{"text":"                            useMovementColor                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, percent bar will not use up and down colors        ","tagName":"tr"},{"text":"                            padding                                                    number                                                                                        <optional>                                                                                                                            8                                                        Extra space added to max width from autoTextSizing calculation        ","tagName":"tr"},{"text":"                            percentageLabel                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, the value will not convert into percent format        ","tagName":"tr"},{"text":"                            autoTextSizing                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, text space will be fixed        ","tagName":"tr"},{"text":"                            autoFitting                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, text space will be auto adjusted but if disabled, text space will stay extended to the longest length        ","tagName":"tr"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            padding                                                    number                                                                                        <optional>                                                                                                                            8                                                        Extra space added to max width from autoTextSizing calculation        ","tagName":"tr"},{"text":"                            percentageLabel                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, the value will not convert into percent format        ","tagName":"tr"},{"text":"                            autoTextSizing                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, text space will be fixed        ","tagName":"tr"},{"text":"                            autoFitting                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, text space will be auto adjusted .  but if disabled, text space will stay extended to the longest length        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"_afterInit()","tagName":"h4"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(out_objopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"reloadThemeColors()","tagName":"h4"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Range Bar","filename":"extensions/tr-grid-range-bar.html","contents":[{"text":"Range Bar","tagName":"h2"},{"text":"The Range Bar Extension provides graphical bar for last value ranking visualization based on low and high value. ","tagName":"p"},{"text":"Range Bar Extension","tagName":"a"},{"text":"For contributions, check out the Range Bar Extension repository.","tagName":"p"},{"text":"Range Bar Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"CFLOW\", \"CF_LAST\", \"CFHIGH\", \"percent\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\n\nvar configObj = {\n  scrollbar: true,\n  columns: [{\n      title: \"Low\",\n      field: fields[0],\n      width: 60\n    },\n    {\n      title: \"Last\",\n      field: fields[1],\n      width: 60\n    },\n    {\n      title: \"High\",\n      field: fields[2],\n      width: 60\n    },\n    {\n      title: \"Range (Low, Last, High)\",\n      field: fields[1],\n      rangeBar: {\n        low: \"CFLOW\",\n        high: \"CFHIGH\",\n        last: \"CF_LAST\"\n      }\n    },\n    {\n      title: \"Percent\",\n      field: fields[3],\n      width: 60\n    },\n    {\n      title: \"Range 1\",\n      field: fields[3],\n      rangeBar: {\n        field: fields[3]\n      }\n    },\n    {\n      title: \"Range 2\",\n      field: fields[3],\n      rangeBar: {\n        field: fields[3],\n        start: 10, // default 0\n        end: 70 // default 100\n      }\n    },\n    {\n      title: \"Range 3\",\n      field: fields[1],\n      rangeBar: {\n        field: fields[3]\n      }\n    }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.RangeBarExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 208px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            rangeBar                                                    RangeBarPlugin~RangeDefinition                                                                                        <optional>                                                                                    Range definition object        ","tagName":"tr"},{"text":"RangeBarPlugin~RangeDefinition","tagName":"a"},{"text":"RangeDefinition","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            field                                                    string                                                                                        <optional>                                                                                                                            THIS_COLUMN                                                        Field used as percentage. If specified, `low`, `high`, and `last` fields will be ignored.        ","tagName":"tr"},{"text":"                            start                                                    number                                                                                        <optional>                                                                                                                            0                                                        minimum value used with percentage `field`        ","tagName":"tr"},{"text":"                            end                                                    number                                                                                        <optional>                                                                                                                            100                                                        maximum value used with percentage `field`        ","tagName":"tr"},{"text":"                            low                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Field used as minimum range        ","tagName":"tr"},{"text":"                            high                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Field used as maximum range        ","tagName":"tr"},{"text":"                            last                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Field used as current absolute value (white bar)        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"_afterInit()","tagName":"h4"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(out_objopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Row Dragging","filename":"extensions/tr-grid-row-dragging.html","contents":[{"text":"Row Dragging","tagName":"h2"},{"text":"The Row Dragging Extension allows the user to drag and reorder selected rows. ","tagName":"p"},{"text":"Row Dragging Extension","tagName":"a"},{"text":"For contributions, check out the Row Dragging Extension repository.","tagName":"p"},{"text":"Row Dragging Extension repository","tagName":"a"},{"text":"<button id=\"get_btn\">Show Data</button>\n\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"rowNumber\", {\n  type: \"function\",\n  generate: function(info, seed) {\n    return ++info.count;\n  },\n  count: 0,\n});\n\nvar fields = [\"rowNumber\", \"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { field: fields[0], width: 30, alignment: \"center\" },\n    { title: \"Company\", field: fields[1] },\n    { title: \"Market\", field: fields[2], width: 120 },\n    { title: \"Last\", field: fields[3], width: 100 },\n    { title: \"Net. Chng\", field: fields[4], width: 100 },\n    { title: \"Industry\", field: fields[5] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.RowDraggingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"get_btn\").addEventListener(\"click\", function(e) {\n  var dv = grid.api.getDataView();\n  var colData = dv.getColumnData(\"rowNumber\");\n  alert(colData.join(\"\\n\"));\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 308px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Custom dragbox","tagName":"h3"},{"text":"This allows users to customize the dragBox by providing a dragBoxRenderer option. It is not enabled initially.","tagName":"p"},{"text":"var gridConfig = {\n    ...\n    columns: [\n        { title: \"Column 1\", field: \"col1\" },\n        { title: \"Column 2\", field: \"col2\" },\n        { title: \"Column 3\", field: \"col3\" },\n        { title: \"Column 4\", field: \"col4\" },\n    ],\n    rowDragging: {\n        dragBoxRenderer: function(e) {\n            e.dragBox.textContent = e.dataRow.col1;\n        }\n    }\n    ...\n}","tagName":"pre"},{"text":"Drag and drop content outside grid's area","tagName":"h3"},{"text":"The Row Dragging Extension can be used together with the RowSelectionPlugin to allow users to drag a selected row and drop it to a target outside of a Grid. Then, add dragEnd handler to perform content copying of the selected rows as illustrated below:","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>\n<textarea id=\"drop_target\" placeholder=\"Drop Content Here\"></textarea>","tagName":"pre"},{"text":"function onDragEnd(e) {\n  var dropTargetEl = document.getElementById(\"drop_target\");\n  if (e.dropTarget !== dropTargetEl) {\n    return;\n  }\n  var rowSelectionExt = e.srcGrid.getPlugin(\"RowSelectionPlugin\");\n  var rowIds = rowSelectionExt.getSelectedRowIds();\n\n  var text = \"No Selected Row\";\n  if (rowIds) {\n    var dataView = e.srcGrid.getDataSource();\n    var rows = dataView.getMultipleRowData(rowIds);\n    text = JSON.stringify(rows, null, 2)\n  }\n  dropTargetEl.value = text;\n}\n\ntr.DataGenerator.addFieldInfo(\"rowNumber\", {\n  type: \"function\",\n  generate: function(info, seed) {\n    return ++info.count;\n  },\n  count: 0,\n});\n\nvar fields = [\"rowNumber\", \"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { field: fields[0], width: 30, alignment: \"center\" },\n    { title: \"Company\", field: fields[1] },\n    { title: \"Market\", field: fields[2], width: 120 },\n    { title: \"Last\", field: fields[3], width: 100 },\n    { title: \"Net. Chng\", field: fields[4], width: 100 },\n    { title: \"Industry\", field: fields[5] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowDragging: {\n    autoScroll: false,\n    dragEnd: onDragEnd\n  },\n  extensions: [\n    new tr.RowSelectionExtension(), new tr.RowDraggingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"get_btn\").addEventListener(\"click\", function(e) {\n  var dv = grid.api.getDataView();\n  var colData = dv.getColumnData(\"rowNumber\");\n  alert(colData.join(\"\\n\"));\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 308px;\n}\n\n#drop_target {\n  width: 100%;\n  height: 100px;\n}","tagName":"pre"},{"text":"Migrating from built-in column grouping","tagName":"h3"},{"text":"Due to the built-in libraries being migrated out from the Core Grid to extensions, built-in column grouping will be deprecated and will no longer be maintained.","tagName":"p"},{"text":"The differences between the legacy (built-in) version of Row Dragging and the new extension can be seen in the examples below","tagName":"p"},{"text":"Note: The Row Dragging Extension is backward compatible with the old built-in (with some breaking changes). Therefore, the new implementation is recommended.","tagName":"p"},{"text":"Built-in","tagName":"h4"},{"text":"var gridConfig = {\n    ...\n    rowReorder: {\n        dragBoxRenderer: function (dragEvent, dragBox, dataRows) {\n            dragBox.setContent(\"test\");\n        }\n    },\n    ...\n}","tagName":"pre"},{"text":"New extension","tagName":"h4"},{"text":"var gridConfig = {\n    ...\n    rowDragging: {\n        dragBoxRenderer: function (e) {\n            // e.dragBox\n            // e.dataRows\n            e.dragBox.textContent = \"test\";\n        }\n    },\n    ...\n}","tagName":"pre"},{"text":"For the new implementation, you need to change to the rowDragging option. And the dragBoxRenderer receives an event only as an argument.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            dragBox                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, information box will be shown during the drag        ","tagName":"tr"},{"text":"                            disabled                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, dataTransfer and autoScroll will be disabled, and guileline UI will not been shown.        ","tagName":"tr"},{"text":"                            mouseInput                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, mousemove/mousedown will not trigger the drag operation.        ","tagName":"tr"},{"text":"                            dataTransfer                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, internal row data will not be moved at the end of the drag operation.        ","tagName":"tr"},{"text":"                            autoScroll                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, grid will not be verticallly scrolled when mouse is hovering around the edges of the grid.        ","tagName":"tr"},{"text":"                            dragBoxRenderer                                                    function                                                                                        <optional>                                                                                                                                                Allow user to customize dragBox        ","tagName":"tr"},{"text":"                            dragStart                                                    function                                                                                        <optional>                                                                                                                            null                                                        Function handler for dragStart event        ","tagName":"tr"},{"text":"                            drag                                                    function                                                                                        <optional>                                                                                                                            null                                                        Function handler for drag event        ","tagName":"tr"},{"text":"                            dragEnd                                                    function                                                                                        <optional>                                                                                                                            null                                                        Function handler for dragEnd event        ","tagName":"tr"},{"text":"                            dataMoved                                                    function                                                                                        <optional>                                                                                                                            null                                                        Function handler for dataMoved event        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"beforeProcessOption(optionName, optionValue) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"cancelDrag()","tagName":"h4"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(out_objopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getGuideline() → {Element}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, options)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"startDrag(startRef, opt_suppressEventopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"stopDrag()","tagName":"h4"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"dataMoved","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"drag","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"dragEnd","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"dragInterval","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"dragStart","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Example:","tagName":"h5"},{"text":"// ...\ndragStart: function(e) {\n  e.cancel = true; // To cancel the operation\n}, // ..","tagName":"pre"}]},{"title":"Row Filtering","filename":"extensions/tr-grid-row-filtering.html","contents":[{"text":"Row Filtering","tagName":"h2"},{"text":"The Row Filtering Extension provides filtering rows according expression that uses to filter. The extension also supports multiple columns for filtering. ","tagName":"p"},{"text":"Row Filtering Extension","tagName":"a"},{"text":"For contributions, check out the Row Filtering Extension repository.","tagName":"p"},{"text":"Row Filtering Extension repository","tagName":"a"},{"text":"<button id=\"filter_btn1\">Change &gt; 20%</button>\n\n<button id=\"filter_btn2\">Change 10%-20%</button>\n<button id=\"filter_btn3\">In NASDAQ</button>\n<button id=\"filter_btn4\">Services industry</button>\n<button id=\"filter_btn5\">Clear Filter</button>\n<hr>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var rowFilterExt = new tr.RowFilteringExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 50 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    rowFilterExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"filter_btn1\").addEventListener(\"click\", function() {\n  rowFilterExt.removeAllFilters();\n  rowFilterExt.addGridFilter(moreThanTwenty);\n});\ndocument.getElementById(\"filter_btn2\").addEventListener(\"click\", function() {\n  rowFilterExt.removeAllFilters();\n  rowFilterExt.addGridFilter(between10And20);\n});\ndocument.getElementById(\"filter_btn3\").addEventListener(\"click\", function() {\n  rowFilterExt.removeAllFilters();\n  rowFilterExt.addGridFilter(inNASDAQ);\n});\ndocument.getElementById(\"filter_btn4\").addEventListener(\"click\", function() {\n  rowFilterExt.removeAllFilters();\n  rowFilterExt.addGridFilter(findServices);\n});\ndocument.getElementById(\"filter_btn5\").addEventListener(\"click\", function() {\n  rowFilterExt.removeAllFilters();\n});\n\nfunction moreThanTwenty(rowData, rowId, ctx) {\n  return rowData.CF_NETCHNG > 20;\n}\n\nfunction between10And20(rowData, rowId, ctx) {\n  return rowData.CF_NETCHNG >= 10 && rowData.CF_NETCHNG <= 20;\n}\n\nfunction inNASDAQ(rowData, rowId, ctx) {\n  return rowData.market === \"NASDAQ\";\n}\n\nfunction findServices(rowData, rowId, ctx) {\n  let industry = rowData.industry.toLowerCase();\n  return industry.indexOf(\"service\") >= 0;\n}","tagName":"pre"},{"text":"html hr {\n  margin: 5px;\n}\n\nemerald-grid {\n  height: 280px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Basic filtering","tagName":"h3"},{"text":"First, create a new RowFilteringExtension instance and then push it to the extensions array config.","tagName":"p"},{"text":"var filterExt = new tr.RowFilteringExtension();\nvar config = {\n    // ... other config\n    extensions: [\n        filterExt\n    ]\n}\ngrid.config = config;","tagName":"pre"},{"text":"A filterExt instance can be used to apply a filter when an action is occurring (for example, a button click) using the addGridFilter method.","tagName":"p"},{"text":"It receives a compare function as a first argument and will immediately trigger the Grid to perform the filter after the call. This function should return as a boolean.","tagName":"p"},{"text":"function filterFunc(data) {\n    // Filter logic here\n    return data.field > 1;\n};\n\nfilterExt.addGridFilter(filterFunc);","tagName":"pre"},{"text":"To clear a filter, you can use removeAllFilters method.","tagName":"p"},{"text":"filterExt.removeAllFilters();","tagName":"pre"},{"text":"Filtering with a search box","tagName":"h3"},{"text":"<input id=\"search_input\" placeholder=\"Search Anything...\" type=\"search\">\n\n<hr>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var rowFilterExt = new tr.RowFilteringExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 50 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    rowFilterExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\nvar searchInput = document.getElementById(\"search_input\");\nsearchInput.addEventListener(\"keyup\", function(e) {\n  var input = e.currentTarget;\n  if (input._prevValue !== input.value) {\n    input._prevValue = input.value;\n    rowFilterExt.refresh(); // Force filter triggering\n  }\n});\n\nfunction filterFunc(rowData, rowId, context) {\n  var str = \"\";\n  var val = context.input.value.toLowerCase();\n  for (var key in rowData) {\n    str += rowData[key] + \" \";\n  }\n  return str.toLowerCase().indexOf(val) > -1;\n};\n\nvar context = {\n  input: searchInput\n};\nrowFilterExt.addGridFilter(filterFunc, context);","tagName":"pre"},{"text":"html hr {\n  margin: 5px;\n}\n\nemerald-grid {\n  height: 280px;\n}\n\n#search_input {\n  margin: 5px;\n  width: 250px;\n}","tagName":"pre"},{"text":"It is normal to tie the filter functionality with a search box. In order to do this, you can listen a keyup event on the search input. Then you can    call refresh method in the event callback.","tagName":"p"},{"text":"This will trigger RowFilteringExtension to apply a filter function every keyup event.","tagName":"p"},{"text":"var searchInput = document.getElementById(\"search_input\");\n\nsearchInput.addEventListener(\"keyup\", function(e) {\n    filterExt.refresh(); // Force filter triggering\n});","tagName":"pre"},{"text":"For below example, the search input will be passed in the second parameter. Then, in the filter function you can retrieve a value from search input to perform a comparison.","tagName":"p"},{"text":"The addGridFilter can recieve any type in the second parameter. The given input will be passed to the third argument in filter function.","tagName":"p"},{"text":"function filterFunc(rowData, rowId, context) {\n    // context is an object passed from a second parameter of addGridFilter()\n    var str = \"\";\n    var val = context.input.value.toLowerCase();\n    for (var key in rowData) {\n        str += rowData[key] + \" \";\n    }\n    return str.toLowerCase().indexOf(val) >= 0;\n};\n\n// Here we can pass search input to the second parameter.\nvar context = {\n    input: searchInput\n};\nfilterExt.addGridFilter(filterFunc, context);","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            filter                                                    string | RowFilteringPlugin~FilterLogic                                                                                        <optional>                                                                                    An expression string or Function        ","tagName":"tr"},{"text":"RowFilteringPlugin~FilterLogic","tagName":"a"},{"text":"                            filterState                                                    *                                                                                        <optional>                                                                                    Context object that will be passed as the third parameter for the filter logic        ","tagName":"tr"},{"text":"FilterDialogOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            sortUI                                                    boolean                                                                                        <optional>                                                                                    show/hide sort UI        ","tagName":"tr"},{"text":"                            filterUI                                                    boolean                                                                                        <optional>                                                                                    show/hide filter UI        ","tagName":"tr"},{"text":"                            fieldDataType                                                    string                                                                                        <optional>                                                                                    data type of column        ","tagName":"tr"},{"text":"                            lang                                                    string                                                                                        <optional>                                                                                    dialog language        ","tagName":"tr"},{"text":"FilterLogic(rowData, rid, ctx) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            disabledUI                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, filter icon will not be created/shown.        ","tagName":"tr"},{"text":"                            click                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler dispatched when a user clicks the column filter icon.        ","tagName":"tr"},{"text":"                            clicked                                                    function                                                                                        <optional>                                                                                                                            null                                                        Alias to `click` event handler        ","tagName":"tr"},{"text":"                            iconCreated                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler dispatched when a new column filter icon is created.        ","tagName":"tr"},{"text":"                            filterChanged                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler dispatched whenever global or column filter is changed by either adding or removing.        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"addColumnFilter(colIndex, exp, ctxopt) → {boolean}","tagName":"h4"},{"text":"RowFilteringPlugin#setColumnFilter","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"RowFilteringPlugin~FilterLogic","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"RowFilteringPlugin#event:filterChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addDataView(dv)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addFilter(exp, funcNameopt, ctxopt) → {string}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowFilteringPlugin~FilterLogic","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"RowFilteringPlugin#event:filterChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"addGridFilter(exp, ctxopt) → {string}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowFilteringPlugin~FilterLogic","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"RowFilteringPlugin#event:filterChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disable(opt_disabledopt, opt_idopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getAllColumnFilters() → {Array.<function()>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnFilterIcons(colIndex) → {Array.<Element>}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnFilterState(colIndex) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnFilterStates() → {Array}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getFilters() → {Array.<function()>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getUniqueValues(columnName, opt_formatteropt, opt_fmtColNameopt) → {Object.<string, *>}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hasColumnFilter() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"openDialog(colIndex, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowFilteringPlugin~FilterDialogOptions","tagName":"a"},{"text":"refresh()","tagName":"h4"},{"text":"Fires:","tagName":"h5"},{"text":"RowFilteringPlugin#event:refreshed","tagName":"a"},{"text":"removeAllColumnFilters() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"removeAllFilters()","tagName":"h4"},{"text":"removeColumnFilter(colIndex) → {boolean}","tagName":"h4"},{"text":"RowFilteringPlugin#removeColumnFilters","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeColumnFilters(colIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeDataView(dv)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeFilter(funcRef) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnFilter(colIndex, exp, ctxopt) → {boolean}","tagName":"h4"},{"text":"RowFilteringPlugin#removeColumnFilters","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"RowFilteringPlugin~FilterLogic","tagName":"a"},{"text":"Fires:","tagName":"h5"},{"text":"RowFilteringPlugin#event:filterChanged","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setColumnFilterState(colIndex, ctx) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setOverridingFilter(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setPreTransform(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowTransform(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"updateAllColumnIcons()","tagName":"h4"},{"text":"Events","tagName":"h3"},{"text":"click","tagName":"h4"},{"text":"filterChanged","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            filterType                                                    string                                                            This can be either \"global\" or \"column\"        ","tagName":"tr"},{"text":"                            changeType                                                    string                                                            This can be either \"add\" or \"remove\"        ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                            Column index        ","tagName":"tr"},{"text":"                            field                                                    string                                                            specified by the current column        ","tagName":"tr"},{"text":"iconCreated","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            icon                                                    Element                                                            Filter icon element        ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                            Column index        ","tagName":"tr"},{"text":"                            grid                                                    tr.Grid                                                            Core grid instance        ","tagName":"tr"},{"text":"refreshed","tagName":"h4"}]},{"title":"Row Grouping","filename":"extensions/tr-grid-row-grouping.html","contents":[{"text":"Row Grouping","tagName":"h2"},{"text":"The Row Grouping Extension uses categorization based on column field. Each group will have arrow button for expansion and collapsing of its members. ","tagName":"p"},{"text":"Row Grouping Extension","tagName":"a"},{"text":"For contributions, check out the Row Grouping Extension repository.","tagName":"p"},{"text":"Row Grouping Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"companyName\", {\n  type: \"set\",\n  members: [\"Kunze LLC\", \"Rohan-Kohler\", \"Bosco-Terry\", \"Prohaska\", \"Ziemann Group\"]\n});\ntr.DataGenerator.addFieldInfo(\"industry\", {\n  type: \"set\",\n  members: [\"Chemicals\", \"Auto\", \"Finance\", \"Electric\", \"Biotechnology\"]\n});\nvar fields = [\"companyName\", \"market\", \"industry\", \"CF_NETCHNG\", \"date1\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Industry\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Updated\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowGrouping: {\n    groupBy: fields[1]\n  },\n  extensions: [\n    new tr.RowGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 225px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Basic usage","tagName":"h3"},{"text":"To group your data together, You can specify groupBy option under rowGrouping. The value can be either a string or an array of column field. If input as an array, the Grid will display as a nested group.","tagName":"p"},{"text":"By default, there will be an extra row display as a header of each group.","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    columns: [{\n        { id: 'c1', title: 'Column 1', field: 'col1' },\n        // more column options\n    }],\n    rowGrouping: {\n        groupBy: 'col1' // Or ['col2', 'col3', ...]\n    },\n};","tagName":"pre"},{"text":"Data sorting","tagName":"h3"},{"text":"This extension can work with the Sorting Extension out-of-the-box. But only the data within the group will be sorted, not the columns which are grouped.","tagName":"p"},{"text":"Sorting Extension","tagName":"a"},{"text":"Note: Try clicking on column header","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"companyName\", {\n  type: \"set\",\n  members: [\"Kunze LLC\", \"Rohan-Kohler\", \"Bosco-Terry\", \"Prohaska\", \"Ziemann Group\"]\n});\ntr.DataGenerator.addFieldInfo(\"industry\", {\n  type: \"set\",\n  members: [\"Chemicals\", \"Auto\", \"Finance\", \"Electric\", \"Biotechnology\"]\n});\nvar fields = [\"companyName\", \"market\", \"industry\", \"CF_NETCHNG\", \"date1\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Industry\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Updated\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowGrouping: {\n    groupBy: fields[1]\n  },\n  extensions: [\n    new tr.RowGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 225px;\n}","tagName":"pre"},{"text":"Group sorting","tagName":"h3"},{"text":"In some case you might want to prioritize some group over another. We provide a way to sort the group with groupSortLogic option. If so, you can sort a group using the groupSortLogic option. It receives the same compare function as Array.prototype.sort().","tagName":"p"},{"text":"Array.prototype.sort()","tagName":"a"},{"text":"var config = {\n    // any other grid's options\n    rowGrouping: {\n        groupSortLogic: function(grp1, grp2) { // Sort in ascending order (A -> Z)\n            if(grp1 < grp2) return -1;\n            if(grp1 > grp2) return 1;\n            return 0;\n        },\n        groupBy: 'col1' // Or ['col2', 'col3', ...]\n    },\n};","tagName":"pre"},{"text":"You can now see that DJI has more priority over HKEX.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"companyName\", {\n  type: \"set\",\n  members: [\"Kunze LLC\", \"Rohan-Kohler\", \"Bosco-Terry\", \"Prohaska\", \"Ziemann Group\"]\n});\ntr.DataGenerator.addFieldInfo(\"industry\", {\n  type: \"set\",\n  members: [\"Chemicals\", \"Auto\", \"Finance\", \"Electric\", \"Biotechnology\"]\n});\nvar fields = [\"companyName\", \"market\", \"industry\", \"CF_NETCHNG\", \"date1\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Industry\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Updated\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowGrouping: {\n    groupBy: fields[1],\n    groupSortLogic: function(grp1, grp2) { // Sort in ascending order (A -> Z)\n      if (grp1 < grp2) return -1;\n      if (grp1 > grp2) return 1;\n      return 0;\n    }\n  },\n  extensions: [\n    new tr.RowGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 225px;\n}","tagName":"pre"},{"text":"Nested group","tagName":"h3"},{"text":"This is achieved by setting groupBy options with array of fields.","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    rowGrouping: {\n        groupBy: [\"group\", \"c1\"]\n    },\n};","tagName":"pre"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"companyName\", {\n  type: \"set\",\n  members: [\"Kunze LLC\", \"Rohan-Kohler\", \"Bosco-Terry\", \"Prohaska\", \"Ziemann Group\"]\n});\ntr.DataGenerator.addFieldInfo(\"industry\", {\n  type: \"set\",\n  members: [\"Chemicals\", \"Auto\", \"Finance\", \"Electric\", \"Biotechnology\"]\n});\nvar fields = [\"companyName\", \"market\", \"industry\", \"CF_NETCHNG\", \"date1\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Industry\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Updated\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowGrouping: {\n    groupBy: [fields[1], fields[2]]\n  },\n  extensions: [\n    new tr.RowGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 225px;\n}","tagName":"pre"},{"text":"Rendering group header rows","tagName":"h3"},{"text":"By default, group header rows are rendered by their group value. To override default rendering, you need to define groupHeaderBinding and nonGroupBinding methods in the configuration. groupHeaderBinding will be executed for every group header rows and is used for custom rendering. nonGroupBinding is used to cleared any special styles set in groupHeaderBinding, since the same cell are re-used for both group header rows and non-group header rows (content rows). ","tagName":"p"},{"text":"By default, group header rows are displayed as a single cell that spans across multiple columns. It works by stretching existing cells from the first column to fill entire grid's width. You can turn off cell spanning by setting headerSpanning to false in the configuration. The option can be useful, if you want to show some content, such as statistics, on group header rows for every column. You can also specify which cells to be stretched by setting displayColumn to other column (default is the first column).","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"companyName\", {\n  type: \"set\",\n  members: [\"Kunze LLC\", \"Rohan-Kohler\"]\n});\ntr.DataGenerator.addFieldInfo(\"industry\", {\n  type: \"set\",\n  members: [\"Chemicals\", \"Auto\", \"Finance\", \"Electric\", \"Biotechnology\"]\n});\ntr.DataGenerator.addFieldInfo(\"market\", {\n  type: \"set\",\n  members: [\"NASDAQ\", \"DJI\", \"NIKKEI\"]\n});\nvar fields = [\"companyName\", \"industry\", \"CF_NETCHNG\", \"integer\", \"market\"];\nvar records = tr.DataGenerator.generateRecords(fields, { seed: 1, numRows: 7 });\n\nfunction onGroupHeaderBinding(e) {\n  // Calculate Summation\n  var colCount = e.api.getColumnCount();\n  var fields = e.api.getColumnFields();\n  var rows = e.dataSource.getAllRowData();\n  var rowCount = rows.length;\n  var stats = [];\n  for (var c = 0; c < colCount; ++c) {\n    var sum = 0;\n    var valid = false;\n    var field = fields[c];\n    for (var r = 0; r < rowCount; ++r) {\n      var val = rows[r][field];\n      if (typeof val === \"number\") {\n        sum += val;\n        valid = true;\n      }\n    }\n    if (valid) {\n      stats[c] = sum;\n    }\n  }\n\n  // Render cells\n  var section = e.section;\n  for (var c = 0; c < colCount; ++c) {\n    var cell = section.getCell(c, e.rowIndex);\n    if (c === 0) {\n      cell.setContent(\"Group \" + e.groupId + \" (\" + rowCount + \")\");\n    } else {\n      cell.setContent(stats[c]);\n    }\n  }\n}\n\nvar configObj = {\n  columnReorder: false,\n  rowHighlight: false,\n  rowSelection: true,\n  columnSelection: true,\n  sorting: {\n    sortableColumns: true,\n    initialSort: {\n      colIndex: 2,\n      order: \"d\"\n    }\n  },\n  rowGrouping: {\n    groupBy: fields[0],\n    headerSpanning: false,\n    groupHeaderBinding: onGroupHeaderBinding,\n    nonGroupBinding: function(e) {}\n  },\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Industry\", field: fields[1] },\n    { title: \"Net. Chng\", field: fields[2], alignment: \"center\" },\n    { title: \"Integer\", field: fields[3], alignment: \"right\" },\n    { title: \"Market\", field: fields[4] },\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.RowGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 225px;\n}","tagName":"pre"},{"text":"Null/undefined group hiding","tagName":"h3"},{"text":"In many cases, a group of data might contain an undefined or null value. This may display an unexpected grouped title.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"companyName\", {\n  type: \"set\",\n  members: [\"Kunze LLC\", \"Rohan-Kohler\", \"Bosco-Terry\", \"Prohaska\", \"Ziemann Group\"]\n});\ntr.DataGenerator.addFieldInfo(\"industry\", {\n  type: \"set\",\n  members: [\"Chemicals\", \"Auto\", \"Finance\", \"Electric\", \"Biotechnology\", null, null]\n});\ntr.DataGenerator.addFieldInfo(\"market\", {\n  type: \"set\",\n  members: [\"NASDAQ\", \"DJI\", \"NIKKEI\", null]\n});\nvar fields = [\"companyName\", \"market\", \"industry\", \"CF_NETCHNG\", \"date1\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Industry\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Updated\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowGrouping: {\n    groupBy: [fields[1], fields[2]]\n  },\n  extensions: [\n    new tr.RowGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 225px;\n}","tagName":"pre"},{"text":"Turn on an autoGroupHiding option to hide all the group header that display as null or undefined. The rows of data that are in a null group will still show and are distinct from the group above them by different indentation. ","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    rowGrouping: {\n        autoGroupHiding: true\n    },\n};","tagName":"pre"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"companyName\", {\n  type: \"set\",\n  members: [\"Kunze LLC\", \"Rohan-Kohler\", \"Bosco-Terry\", \"Prohaska\", \"Ziemann Group\"]\n});\ntr.DataGenerator.addFieldInfo(\"industry\", {\n  type: \"set\",\n  members: [\"Chemicals\", \"Auto\", \"Finance\", \"Electric\", \"Biotechnology\", null, null]\n});\ntr.DataGenerator.addFieldInfo(\"market\", {\n  type: \"set\",\n  members: [\"NASDAQ\", \"DJI\", \"NIKKEI\", null]\n});\nvar fields = [\"companyName\", \"market\", \"industry\", \"CF_NETCHNG\", \"date1\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Industry\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Updated\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowGrouping: {\n    groupBy: [fields[1], fields[2]],\n    autoGroupHiding: true\n  },\n  extensions: [\n    new tr.RowGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 225px;\n}","tagName":"pre"},{"text":"Rows in multiple groups","tagName":"h3"},{"text":"In the case that data used for grouping is an array, the data row will be added to multiple groups according to the array's member. See the following example for an illustration.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"companyName\", {\n  type: \"set\",\n  members: [\"Kunze LLC\", , \"Rohan-Kohler\", \"Bosco-Terry\", \"Prohaska\", \"Ziemann Group\"]\n});\ntr.DataGenerator.addFieldInfo(\"industry\", {\n  type: \"set\",\n  members: [\"Chemicals\", \"Finance\", \"Electric\", [\"Auto\", \"Electric\"],\n    [\"Chemicals\", \"Biotechnology\"]\n  ]\n});\nvar fields = [\"companyName\", \"market\", \"industry\", \"CF_NETCHNG\", \"date1\", \"id\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"ID\", field: fields[5], width: 80 },\n    { title: \"Company\", field: fields[0] },\n    { title: \"Industry\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Updated\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowGrouping: {\n    groupBy: fields[2]\n  },\n  extensions: [\n    new tr.RowGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 225px;\n}","tagName":"pre"},{"text":"Content as a header","tagName":"h3"},{"text":"In this mode, the header of the nested group will be hidden while the data row will act as a header instead. The first level group header expand/collapse button will be disabled by default.","tagName":"p"},{"text":"To turn on this mode, set contentAsHeader to true.","tagName":"p"},{"text":"Note: This mode currently supports at most 2 levels of grouping.","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    rowGrouping: {\n        contentAsHeader: true,\n        groupBy: ['col1', 'col2'] // Support at most 2 level grouping if contentAsHeader is enabled.\n    },\n};","tagName":"pre"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"companyName\", {\n  type: \"set\",\n  members: [\"Kunze LLC\", \"Prohaska\", \"Ziemann Group\"]\n});\ntr.DataGenerator.addFieldInfo(\"industry\", {\n  type: \"set\",\n  members: [\"Chemicals\", \"Auto\", \"Finance\", \"Electric\", \"Biotechnology\"]\n});\ntr.DataGenerator.addFieldInfo(\"market\", {\n  type: \"set\",\n  members: [\"NASDAQ\", \"DJI\", \"NIKKEI\"]\n});\nvar fields = [\"companyName\", \"market\", \"industry\", \"CF_NETCHNG\", \"date1\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Industry\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Updated\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowGrouping: {\n    groupBy: [fields[1], fields[0]],\n    contentAsHeader: true\n  },\n  extensions: [\n    new tr.RowGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 225px;\n}","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"GroupCriteria","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"GroupingState","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            collapsed                                                    boolean                                                                                                                                                ","tagName":"tr"},{"text":"                            groupId                                                    number | string                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"GroupSortLogic(grpValA, grpValB, grpDataViewAopt, grpDataViewBopt) → {number}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            autoGroupRemoval                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Remove group that has no row member.        ","tagName":"tr"},{"text":"                            autoGroupHiding                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Hide \"null\" or \"undefined\" group headers, while keeping the group's items intact.        ","tagName":"tr"},{"text":"                            predefinedGroups                                                    Array | Array.<Array>                                                                                        <optional>                                                                                                                            null                                                        Add groups without content rows. Use 2D array for multi-level grouping.        ","tagName":"tr"},{"text":"                            groupBy                                                    RowGroupingPlugin~GroupCriteria                                                                                        <optional>                                                                                                                            null                                                        GroupCriteria can be string, function, or array of string.        ","tagName":"tr"},{"text":"RowGroupingPlugin~GroupCriteria","tagName":"a"},{"text":"                            groupCriteria                                                    RowGroupingPlugin~GroupCriteria                                                                                        <optional>                                                                                                                            null                                                        Alias to `groupBy`.        ","tagName":"tr"},{"text":"RowGroupingPlugin~GroupCriteria","tagName":"a"},{"text":"                            displayColumn                                                    number                                                                                        <optional>                                                                                                                            0                                                        Column Index for group header rendering.        ","tagName":"tr"},{"text":"                            fixedDisplayColumn                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, displayColumn will remain in the same index, even if columns are shifted by insertion or removal.        ","tagName":"tr"},{"text":"                            noCollapsible                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, arrows will be hidden and cell is not clickable. This flag takes precedence over `clickableCell` and `hiddenArrow`.        ","tagName":"tr"},{"text":"                            clickableCell                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, clicking at cell will not expand that group        ","tagName":"tr"},{"text":"                            hiddenArrow                                                    boolean | number | Array.<number>                                                                                        <optional>                                                                                                                                                Specify header levels which is a single number start from 1 or an array of number that want to hide arrow icon. If specify true all arrows will be hidden.        ","tagName":"tr"},{"text":"                            contentAsHeader                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, second level group header rows are hidden, the first content rows become a header, cells are not be clickable, and arrows are hidden.        ","tagName":"tr"},{"text":"                            headerSpanning                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, every cell on the group header row is displayed        ","tagName":"tr"},{"text":"                            footerSpanning                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, only cells from the first column will be shown, spanning over other cells        ","tagName":"tr"},{"text":"                            groupSortLogic                                                    RowGroupingPlugin~GroupSortLogic                                                                                        <optional>                                                                                                                            null                                                        Logic for group sorting. There is no sorting by default (i.e. groups are placed in order of their creation time)        ","tagName":"tr"},{"text":"RowGroupingPlugin~GroupSortLogic","tagName":"a"},{"text":"                            autoGroupSorting                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, group sorting will be performed after each `groupAdded` event        ","tagName":"tr"},{"text":"                            indentSize                                                    boolean | number | Array.<number>                                                                                        <optional>                                                                                                                                                Use array to define indent for each group level. Use boolean to turn on or off indentation. Use number to define incremental step.        ","tagName":"tr"},{"text":"                            clicked                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler when user clicks on arrows or cells        ","tagName":"tr"},{"text":"                            groupAdded                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler        ","tagName":"tr"},{"text":"                            beforeGroupAdded                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler        ","tagName":"tr"},{"text":"                            groupHeaderBinding                                                    function                                                                                        <optional>                                                                                                                            null                                                        Logic that will be executed on each group header row        ","tagName":"tr"},{"text":"                            groupFooterBinding                                                    function                                                                                        <optional>                                                                                                                            null                                                        Once defined, footer row will be added on each group        ","tagName":"tr"},{"text":"                            headerBinding                                                    function                                                                                        <optional>                                                                                                                            null                                                        Shorthand for `groupHeaderBinding`        ","tagName":"tr"},{"text":"                            footerBinding                                                    function                                                                                        <optional>                                                                                                                            null                                                        Shorthand for `groupFooterBinding`        ","tagName":"tr"},{"text":"                            nonGroupBinding                                                    function                                                                                        <optional>                                                                                                                            null                                                        This is used to clear any custom styling defined in groupHeaderBinding or groupFooterBinding        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"beforeProcessOption(optionName, optionVal) → {*}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"collapse(groupRowId, opt_collapsedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"collapseAll(opt_collapsedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableClicking(opt_disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableFixedDisplayColumn(opt_enabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableFooterRow(opt_numopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"expand(groupRowId, opt_expandedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"expandAll(opt_expandedopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getColumnMenu(colIndex, config) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDataView() → {tr.DataView}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getGroupingCriteria() → {Array.<string>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getGroupingStates() → {Array.<RowGroupingPlugin~GroupingState>}","tagName":"h4"},{"text":"RowGroupingPlugin~GroupingState","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"RowGroupingPlugin~GroupingState","tagName":"a"},{"text":"getGroupSortingLogic() → {function}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"groupBy(criteria)","tagName":"h4"},{"text":"RowGroupingPlugin#setGroupingCriteria","tagName":"a"},{"text":"Parameters:","tagName":"h5"},{"text":"RowGroupingPlugin~GroupCriteria","tagName":"a"},{"text":"RowGroupingPlugin#setGroupingCriteria","tagName":"a"},{"text":"hasGroupingCriteria() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setGroupingCriteria(criteria)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowGroupingPlugin~GroupCriteria","tagName":"a"},{"text":"setGroupingStates(states)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowGroupingPlugin~GroupingState","tagName":"a"},{"text":"setGroupSortingLogic(sortFunction)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowGroupingPlugin~GroupSortLogic","tagName":"a"},{"text":"Example:","tagName":"h5"},{"text":"var compare = function(grpA, grpB, dataViewA, dataViewB) {\n  return (grpA <= grpB) ? -1 : 1;\n}\nvar dstp = new tr.grid.RowGroupingPlugin();\ndstp.setGroupSortingLogic(compare);","tagName":"pre"},{"text":"setPredefinedGroups(predefinedGroups)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"sortGroups()","tagName":"h4"},{"text":"unload(hostopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"updateHeaders()","tagName":"h4"},{"text":"Events","tagName":"h3"},{"text":"beforeGroupAdded","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            dataView                                                    tr.DataView                                                                    ","tagName":"tr"},{"text":"                            newGroupId                                                    string                                                                    ","tagName":"tr"},{"text":"                            newGroupValue                                                    *                                                                    ","tagName":"tr"},{"text":"                            newGroupRowId                                                    string                                                            Unique row Id given for the group        ","tagName":"tr"},{"text":"clicked","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            expanded                                                    boolean                                                                    ","tagName":"tr"},{"text":"                            group                                                    tr.DataView                                                            Data view that represents currently clicked group header row        ","tagName":"tr"},{"text":"groupAdded","tagName":"h4"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            dataView                                                    tr.DataView                                                            Parent data view that create the new group        ","tagName":"tr"},{"text":"                            newGroup                                                    tr.DataView                                                            Child data view that is newly created        ","tagName":"tr"},{"text":"groupFooterBinding","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            rowData                                                    object                                                                    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            rowId                                                    string                                                                    ","tagName":"tr"},{"text":"                            footerIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            groupId                                                    string                                                                    ","tagName":"tr"},{"text":"                            footerRow                                                    boolean                                                                    ","tagName":"tr"},{"text":"                            cell                                                    tr.grid.Cell                                                                    ","tagName":"tr"},{"text":"                            section                                                    tr.grid.VirtualizedLayoutGrid                                                                    ","tagName":"tr"},{"text":"                            dataSource                                                    tr.grid.DataView                                                            Parent data view of group        ","tagName":"tr"},{"text":"groupHeaderBinding","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            rowData                                                    object                                                                    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            rowId                                                    string                                                                    ","tagName":"tr"},{"text":"                            footerIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            groupId                                                    string                                                                    ","tagName":"tr"},{"text":"                            footerRow                                                    boolean                                                                    ","tagName":"tr"},{"text":"                            cell                                                    tr.grid.Cell                                                                    ","tagName":"tr"},{"text":"                            section                                                    tr.grid.VirtualizedLayoutGrid                                                                    ","tagName":"tr"},{"text":"                            dataSource                                                    tr.grid.DataView                                                            Parent data view of group        ","tagName":"tr"},{"text":"nonGroupBinding","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            rowData                                                    object                                                                    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            rowIndex                                                    number                                                                    ","tagName":"tr"},{"text":"                            rowId                                                    string                                                                    ","tagName":"tr"},{"text":"                            cell                                                    tr.grid.Cell                                                                    ","tagName":"tr"},{"text":"                            section                                                    tr.grid.VirtualizedLayoutGrid                                                                    ","tagName":"tr"},{"text":"                            dataSource                                                    tr.grid.DataView                                                            Root data view of all group        ","tagName":"tr"},{"text":"                            noIndent                                                    boolean                                                            set this property to true to prevent cell add indent        ","tagName":"tr"}]},{"title":"Row Segmenting","filename":"extensions/row-segmenting.html","contents":[{"text":"Row Segmenting","tagName":"h2"},{"text":"The Row Segmenting Extension provides a way to group row content based on row index. By specifying a row index, the row becomes a group header. Any row below the group header can then be added as a group member. This provides more flexibility in how you define a group, unlike Row Grouping Extension where groups are based on strictly defined criteria. ","tagName":"p"},{"text":"Row Segmenting Extension","tagName":"a"},{"text":"For contributions, check out the Row Segmenting Extension Repository.","tagName":"p"},{"text":"Row Segmenting Extension Repository","tagName":"a"},{"text":"<button id=\"set_btn1\">Toggle Row 3</button>\n\n<button id=\"set_btn2\">Toggle Row 6</button>\n<button id=\"set_btn3\">Toggle Row 9</button>\n<button id=\"unset_btn\">Remove All Separators</button>\n<hr>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var rowSegmentingExt = new tr.RowSegmentingExtension();\nvar rowDraggingExt = new tr.RowDraggingExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    rowSegmentingExt,\n    rowDraggingExt\n  ],\n  whenDefined: function(e) {\n    rowSegmentingExt.setSegmentSeparator(2);\n    rowSegmentingExt.setSegmentSeparator(5);\n    rowSegmentingExt.setSegmentSeparator(8);\n    rowSegmentingExt.fillSegments();\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"set_btn1\").addEventListener(\"click\", function(e) {\n  rowSegmentingExt.removeAllSegmentChildren();\n  rowSegmentingExt.setSegmentSeparator(2, !rowSegmentingExt.isSegmentSeparator(2));\n  rowSegmentingExt.fillSegments();\n});\ndocument.getElementById(\"set_btn2\").addEventListener(\"click\", function(e) {\n  rowSegmentingExt.removeAllSegmentChildren();\n  rowSegmentingExt.setSegmentSeparator(5, !rowSegmentingExt.isSegmentSeparator(5));\n  rowSegmentingExt.fillSegments();\n});\ndocument.getElementById(\"set_btn3\").addEventListener(\"click\", function(e) {\n  rowSegmentingExt.removeAllSegmentChildren();\n  rowSegmentingExt.setSegmentSeparator(8, !rowSegmentingExt.isSegmentSeparator(8));\n  rowSegmentingExt.fillSegments();\n});\ndocument.getElementById(\"unset_btn\").addEventListener(\"click\", function(e) {\n  rowSegmentingExt.unsetAllSegmentSeparators();\n});","tagName":"pre"},{"text":"html hr {\n  margin: 5px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Differences between Row Segmenting and Row Grouping Extensions","tagName":"h3"},{"text":"Both extensions produce very similar looking results, but there are some key differences in behaviors and functionalities. ","tagName":"p"},{"text":"Group header (segment separator)","tagName":"h4"},{"text":"The group headers in Row Segmenting Extension have their own data/content, whereas those in Row Grouping Extension have no data. Group headers in Row Segmenting Extension are actually normal row with a separator mark on it. This means you can perform sorting and filtering on the group headers.","tagName":"p"},{"text":"The group headers in the Row Grouping Extension have no data because they are automatically generated based on the specified criteria. So they have no place to hold their data and you will need to have a separate place to hold it. Because of this extra place to manage, it's more difficult to perform sorting and filtering on these group headers.","tagName":"p"},{"text":"Dragging group header","tagName":"h4"},{"text":"The group headers in Row Segmenting Extension can be moved by dragging, if we use Row Dragging Extension. Moving group header is the same as moving row content. After moving, group headers will also move their row members along with them.","tagName":"p"},{"text":"The group headers in Row Grouping Extension cannot be moved freely. They can only moved or ordered by sorting operation. This is because they are automatically generated and constantly added or removed according to data updates. ","tagName":"p"},{"text":"Note: dragging behaviors for group headers have not yet finalized and are subject to change.","tagName":"p"},{"text":"Grouping criteria","tagName":"h4"},{"text":"Specifying a group header in Row Segmenting Extension is a bit more difficult. Each group header has to be set manually through the extension's APIs. Use the setSegmentSeparator() method to specify group header. Group members need to be manually added to the new groups by addSegmentChild() or addSegmentChildren() methods. Any row added to the group will be moved below the group header position. Rows that are already a group member cannot be added to another group. ","tagName":"p"},{"text":"Grouping in Row Grouping Extension are based on row content. So, you can add or remove a group by just changing content of a row. A row can be moved between different groups by changing content of the row as well. ","tagName":"p"},{"text":"More APIs will be implemented to accommodate adding or removing member in the future updates.","tagName":"p"},{"text":"Multi-level grouping","tagName":"h4"},{"text":"Multi-level grouping is not supported by Row Segmenting Extension at the moment. The feature is stil in development. ","tagName":"p"},{"text":"Group sorting","tagName":"h4"},{"text":"sorting at the group level is not supported by Row Segmenting Extension at the moment. The feature is stil in development. ","tagName":"p"},{"text":"Content sorting","tagName":"h4"},{"text":"Row content is sorted within its own group. The behavior is the same for both Row Segmenting and Row Grouping extension. ","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            spanning                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, segment separator rows will not be spanned/stretched across multiple cells        ","tagName":"tr"},{"text":"                            clicked                                                    function                                                                                        <optional>                                                                                                                            null                                                        Event handler when user clicks on arrows or cells        ","tagName":"tr"},{"text":"                            segmentSeparatorBinding                                                    function                                                                                        <optional>                                                                                                                            null                                                        Logic that will be executed on each segment separator row        ","tagName":"tr"},{"text":"                            nonSegmentSeparatorBinding                                                    function                                                                                        <optional>                                                                                                                            null                                                        Logic that will be executed for all non segment separator row        ","tagName":"tr"},{"text":"                            sortingLogic                                                    function                                                                                        <optional>                                                                                                                            null                                                        Logic to be used by sortSegments method        ","tagName":"tr"},{"text":"SortingLogic(rowDataA, rowDataB) → {number}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Methods","tagName":"h3"},{"text":"addSegmentChild(segmentRef, rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"addSegmentChildren(segmentRef, rowRefs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"collapseSegment(rowRef, collapsedopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"expandAllSegments() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"expandSegment(rowRef, expandedopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"fillSegment(segmentRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"fillSegments()","tagName":"h4"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getSegmentChildIds(segmentRef) → {Array.<string>}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSegmentIds() → {Array.<string>}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"hasSegmentation() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"isSegmentCollapsed(rowRef) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"isSegmentSeparator(rowRef) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"removeAllSegmentChildren()","tagName":"h4"},{"text":"removeSegmentChild(segmentRef, rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeSegmentChildren(segmentRef, rowRefs)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSegmentCollapsingLogic(func)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setSegmentSeparator(rowRef, enabledopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setSortingLogic(sortFunction)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowSegmentingPlugin~SortingLogic","tagName":"a"},{"text":"sortSegments(sortFunctionopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowSegmentingPlugin~SortingLogic","tagName":"a"},{"text":"unload(hostopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unsetAllSegmentSeparators() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"updateHeaders()","tagName":"h4"}]},{"title":"Row Selection","filename":"extensions/tr-grid-row-selection.html","contents":[{"text":"Row Selection","tagName":"h2"},{"text":"The Row Selection Extension will add the ability to select a single row or multiple rows on Grid. ","tagName":"p"},{"text":"Row Selection Extension","tagName":"a"},{"text":"For contributions, check out the Row Selection Extension repository.","tagName":"p"},{"text":"Row Selection Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.RowSelectionExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"basedOnContent mode","tagName":"h3"},{"text":"Normally, when content is sorted and a row changes position, row selection will not change position like the content does (try example above). But if you do want the row selection to relocate itself with the content, you can turn on basedOnContent mode.","tagName":"p"},{"text":"For actual result, try to select one or more rows, then click the column header to sort data and see what happens with row selection.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.RowSelectionExtension()\n  ],\n  rowSelection: {\n    basedOnContent: true\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            singleSelection                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, user can have one selection at any moment        ","tagName":"tr"},{"text":"                            selectionChanged                                                    function                                                                                        <optional>                                                                                                                            null                                                        Handler executed after selection is made        ","tagName":"tr"},{"text":"                            beforeSelection                                                    function                                                                                        <optional>                                                                                                                            null                                                        Handler executed before selection is made        ","tagName":"tr"},{"text":"                            basedOnContent                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Normally row selection will not move when data sorted, with this option turn on then selection will relocate strictly with row data.        ","tagName":"tr"},{"text":"                            selectionField                                                    string                                                                                        <optional>                                                                                                                            SELECTED_ROW                                                        Normally basedOnContent will set selection state in row data with field name \"SELECTED_ROW\" but you can change field name here.        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"clearAllSelections(preserveAnchoropt, activeGridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"clearSelectedRows(preserveAnchoropt, activeGridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowSelectionPlugin#clearAllSelections","tagName":"a"},{"text":"clearSelection(preserveAnchoropt, activeGridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"RowSelectionPlugin#clearAllSelections","tagName":"a"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disable(disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableMultiSelection(disabledopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getActiveGrid() → {tr.Grid}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getFirstSelectedIndex(sectRefopt) → {number|null}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getLastSelectedIndex(sectRefopt) → {number|null}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowAnchor(sectRefopt) → {number}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedRowCount(sectRefopt) → {number}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedRowIds(sectRefopt) → {Array.<string>}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedRows(sectRefopt) → {Array.<number>}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getSelectedText() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"isEnabled() → {boolean}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"selectAllRows(activeGridopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"selectRowRange(rowIndex, length, sectRefopt, opt_scrollToRowopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"selectSingleRow(rowIndex, sectRefopt, activeGridopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setSelectedRow(rowIndex, opt_selectopt, sectRefopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload(hostopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"beforeSelection","tagName":"h4"},{"text":"Example:","tagName":"h5"},{"text":"var ext = new RowSelectionPlugin();\next.listen(\"beforeSelection\" function(e) {\n  e.cancel = true; // Cancel user selection\n});","tagName":"pre"},{"text":"selectionChanged","tagName":"h4"}]},{"title":"Row Coloring","filename":"extensions/tr-grid-rowcoloring.html","contents":[{"text":"Row Coloring","tagName":"h2"},{"text":"The Row Coloring Extension provides a way to set text color and background color in each row.","tagName":"p"},{"text":"Row Coloring Extension","tagName":"a"},{"text":"For contributions, check out the Row Coloring Extension repository.","tagName":"p"},{"text":"Row Coloring Extension repository","tagName":"a"},{"text":"<button id=\"set_btn\">Set Row Color</button>\n\nRow Index: <input id=\"row_inp\" type=\"number\" value=\"0\"> Color: <input id=\"color_inp\" type=\"color\" value=\"#cbaacb\">\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var rowColoringExt = new tr.RowColoringExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  whenDefined: function(e) {\n    // Set text color and BG color through extension\n    rowColoringExt.setRowColor(1, \"#ffc5bf\", rowColoringExt.getContrastColor(\"#ffc5bf\"));\n    rowColoringExt.setRowColor(2, \"#97c1a9\", rowColoringExt.getContrastColor(\"#97c1a9\"));\n    rowColoringExt.setRowColor(3, \"#d4f0f0\", rowColoringExt.getContrastColor(\"#d4f0f0\"));\n  },\n  extensions: [\n    rowColoringExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"set_btn\").addEventListener(\"click\", function(e) {\n  var rowIndex = +document.getElementById(\"row_inp\").value;\n  var bgColor = document.getElementById(\"color_inp\").value || \"black\";\n  rowColoringExt.toggleRowColor(rowIndex, bgColor, rowColoringExt.getContrastColor(bgColor));\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}\n\ninput[type=number] {\n  width: 30px;\n}\n\ninput[type=color] {\n  display: inline-block;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"User fields","tagName":"h3"},{"text":"The extension supports text color and background color from the dataTable. To do this you need to set the bgColorField and textColorField properties in the rowColoring options with your specified field names.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n\n</emerald-grid>","tagName":"pre"},{"text":"var rowColoringExt = new tr.RowColoringExtension();\ntr.DataGenerator.addFieldInfo(\"color\", {\n  type: \"set\",\n  members: [\"#c6dbda\", \"#fee1e8\", \"#fed7c3\", \"#f6eac2\", \"#ecd5e3\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n});\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\", \"color\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowColoring: {\n    bgColorField: \"color\",\n  },\n  extensions: [\n    rowColoringExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}","tagName":"pre"},{"text":"Predefined color mode","tagName":"h3"},{"text":"The extension also supports text color and background color from the predefined colors. To do this you need to assign predefined class object to the predefinedColors property then set predefinedColoring properties to true and specify field name of the cssField property.","tagName":"p"},{"text":"<div class=\"control-group\">\n  Row index <input type=\"number\" value=\"3\" id=\"row_index\">\n</div>\n<div class=\"control-group\">\n  Set color\n  <div id=\"btn_group\">\n  </div>\n  <button id=\"reset\">Reset</button>\n</div>\n<div class=\"control-group\">\n  Predefiend color\n  <button id=\"extend_color\">Extend</button>\n  <button id=\"shrink_color\">Shrink</button>\n</div>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var predefinedColorsSet1 = {\n  \"c-yellow\": {\n    backgroundColor: \"#FFFF00\"\n  },\n  \"c-blue\": {\n    backgroundColor: \"#00FFFF\"\n  },\n  \"c-green\": {\n    backgroundColor: \"#80FF80\"\n  },\n  \"c-red\": {\n    backgroundColor: \"#FF8080\"\n  }\n};\n\nvar predefinedColorsSet2 = {\n  \"h-dark-red\": {\n    backgroundColor: \"#520804\",\n    color: \"#C2C2C2\"\n  },\n  \"h-dark-green\": {\n    backgroundColor: \"#01433C\",\n    color: \"#C2C2C2\"\n  },\n  \"h-dark-blue\": {\n    backgroundColor: \"#003D5A\",\n    color: \"#C2C2C2\"\n  },\n  \"h-cyan\": {\n    backgroundColor: \"#2FB4C8\",\n    color: \"#C2C2C2\"\n  },\n  \"h-yellow\": {\n    backgroundColor: \"#FFE433\",\n    color: \"#C2C2C2\"\n  },\n  \"h-orange\": {\n    backgroundColor: \"#FA4C11\",\n    color: \"#C2C2C2\"\n  }\n};\n\n// prepare button for color setting\nfunction setRowColor(e) {\n  var button = e.target;\n  var colorName = button._colorName;\n  var rowIndex = parseInt(row_index.value);\n  rowColoringExt.setRowPredefinedColor(rowIndex, colorName);\n}\n\nfunction updateButtons() {\n  var btnGroup = document.getElementById(\"btn_group\");\n  btnGroup.innerHTML = \"\";\n  var colors = rowColoringExt.getPredefinedColors();\n  for (var name in colors) {\n    var styles = colors[name];\n    var button = document.createElement(\"button\");\n    button.textContent = name;\n    button.style.backgroundColor = styles.backgroundColor || \"\";\n    button.style.color = styles.color || \"\";\n    button._colorName = name;\n    button.addEventListener(\"click\", setRowColor);\n    btnGroup.appendChild(button);\n  }\n}\n\nvar rowColoringExt = new tr.RowColoringExtension();\nvar conditionalColoringExt = new tr.ConditionalColoringExtension();\ntr.DataGenerator.addFieldInfo(\"coloringClass\", {\n  type: \"set\",\n  members: [\"c-yellow\", \"c-blue\", \"c-green\", \"c-red\", \"\", \"\", \"\", \"\", \"\", \"\"]\n});\nvar randIndex = tr.DataGenerator.randIndex;\nvar randBetween = tr.DataGenerator.randBetween;\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\", \"id\", \"coloringClass\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [{\n      title: \"Index\",\n      field: fields[5],\n      width: 50,\n      alignment: \"center\"\n    },\n    {\n      title: \"Company\",\n      field: fields[0]\n    },\n    {\n      title: \"Market\",\n      field: fields[1],\n      width: 120\n    },\n    {\n      title: \"Last\",\n      field: fields[2],\n      width: 100\n    },\n    {\n      title: \"Net. Chng\",\n      field: fields[3],\n      width: 100,\n      blinking: true,\n      conditions: [{\n          backgroundColor: \"\",\n          color: \"green\",\n          expression: \"[number] > 0\"\n        },\n        {\n          backgroundColor: \"\",\n          color: \"red\",\n          expression: \"[number] < 0\"\n        },\n        {\n          backgroundColor: \"\",\n          color: \"blue\",\n          expression: \"[number] == 0\"\n        }\n      ]\n    },\n    {\n      title: \"Industry\",\n      field: fields[4]\n    }\n  ],\n  dataModel: {\n    data: records\n  },\n  rowColoring: {\n    predefinedColors: predefinedColorsSet1,\n    predefinedColoring: true,\n    cssField: \"coloringClass\"\n  },\n  extensions: [\n    rowColoringExt, conditionalColoringExt\n  ],\n  whenDefined: function(e) {\n    var api = e.api;\n    var dataTable = api.getDataTable();\n    setInterval(function() {\n      var index = randIndex(10);\n      var num = randBetween(-100, 100);\n      dataTable.setRowDataAt(index, {\n        \"CF_NETCHNG\": num\n      });\n    }, 300);\n\n    updateButtons();\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"reset\").addEventListener(\"click\", function(e) {\n  var rowIndex = parseInt(row_index.value);\n  rowColoringExt.setRowPredefinedColor(rowIndex, null);\n});\n\ndocument.getElementById(\"extend_color\").addEventListener(\"click\", function(e) {\n  var colors = rowColoringExt.getPredefinedColors();\n  var newColors = {};\n  Object.assign(newColors, colors, predefinedColorsSet2);\n  rowColoringExt.setPredefinedColors(newColors);\n  updateButtons();\n});\n\ndocument.getElementById(\"shrink_color\").addEventListener(\"click\", function(e) {\n  var colors = rowColoringExt.getPredefinedColors();\n  var newColors = {};\n  Object.assign(newColors, colors);\n  for (var name in predefinedColorsSet2) {\n    delete newColors[name];\n  }\n  rowColoringExt.setPredefinedColors(newColors);\n  updateButtons();\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 169px;\n}\n\ninput[type=\"number\"] {\n  width: 40px;\n}\n\n.control-group {\n  margin: 10px 0;\n}\n\n.control-group button {\n  vertical-align: middle;\n}\n\n#btn_group {\n  display: inline;\n  margin-right: 15px;\n}","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            bgColoring                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, background color will not be applied to the row        ","tagName":"tr"},{"text":"                            textColoring                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, text color will not be applied to the row        ","tagName":"tr"},{"text":"                            bgColorField                                                    string                                                                                        <optional>                                                                                                                            \"BG_COLOR\"                                                        Apply background color based on the given field        ","tagName":"tr"},{"text":"                            textColorField                                                    string                                                                                        <optional>                                                                                                                            \"TEXT_COLOR\"                                                        Apply text color based on the given field        ","tagName":"tr"},{"text":"                            cssField                                                    string                                                                                        <optional>                                                                                                                            \"CSS_CLASS\"                                                        Apply CSS class based on the given field        ","tagName":"tr"},{"text":"                            predefinedColors                                                    Object                                                                                        <optional>                                                                                                                                                Predefined color object map        ","tagName":"tr"},{"text":"                            predefinedColoring                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, predefined colors will be used instead of inline styling. The bgColoring and textColoring will be turned off.        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"getContrastColor(hexColor) → {string}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableBgColoring(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"disableTextColoring(opt_boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getContrastColor(hexColor) → {string}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getPredefinedColors() → {Object}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getRowColor(rowRef) → {string}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeRowColor(rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setPredefinedColors(predefinedColors)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowColor(rowRef, bgColoropt, txtColoropt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setRowPredefinedColor(rowRef, coloropt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"toggleRowColor(rowRef, bgColoropt, txtColoropt, stateopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Statistics Row","filename":"extensions/statistics-row.html","contents":[{"text":"Statistics Row","tagName":"h2"},{"text":"The Statistics Row Extension provides special rows to show various statistics for the grid's content.","tagName":"p"},{"text":"Statistics Row Extension","tagName":"a"},{"text":"For contributions, check out the Statistics Row Extension Repository.","tagName":"p"},{"text":"Statistics Row Extension Repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true\n  },\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [{\n      title: \"Company\",\n      field: fields[0],\n      statistics: \"label\"\n    },\n    {\n      title: \"Market\",\n      field: fields[1],\n      width: 120\n    },\n    {\n      title: \"Last\",\n      field: fields[2],\n      width: 200,\n      alignment: \"right\",\n      statistics: true\n    },\n    {\n      title: \"Net. Chng\",\n      field: fields[3],\n      width: 200,\n      alignment: \"right\",\n      formatType: \"percent\",\n      colorText: true,\n      statistics: true\n    }\n  ],\n  dataModel: {\n    data: records\n  },\n  statisticsRow: {\n    rows: [\n      { statistic: \"count\" },\n      { statistic: \"average\" },\n      { placement: \"header\", statistic: \"sum\" },\n      { statistic: \"min\", placement: \"footer\", label: \"Min (Custom Label)\" },\n      { statistic: \"stddev\" },\n      { statistic: \"myCustomStat\" }\n    ],\n    invalidText: \"N/A\",\n    postCalculation: function(e) {\n      var stat = e.statistics[3]; // Calculate custom statistics for the forth column  \n      var rows = e.dataRows;\n\n      var field = stat.field;\n      var average = stat.average;\n      var sum = 0;\n      var rowCount = rows.length;\n      for (var r = 0; r < rowCount; ++r) {\n        var row = rows[r];\n        var val = row[field];\n        var diff = val - average;\n        sum = diff * diff;\n      }\n      var stddev = Math.sqrt(sum / stat.count);\n\n      stat.myCustomStat = 777.77;\n      stat.stddev = stddev;\n    },\n    postRendering: function(e) {\n      e.headerSection.setStyle(\"backgroundColor\", \"skyblue\");\n    }\n  },\n  extensions: [\n    new tr.StatisticsRowExtension(),\n    new tr.TextFormattingExtension(),\n    new tr.ConditionalColoringExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Installation and importing to your project","tagName":"h3"},{"text":"Installation details and examples, along with information on how to import the extension to your project, are available on the Overview page.","tagName":"p"},{"text":"Overview page","tagName":"a"},{"text":"Specifying columns for statistics calculation","tagName":"h3"},{"text":"Use the statistics property in the column configuration object to make the column qualify for the calculation. Set statistics value to label to show the statistic label on the column.","tagName":"p"},{"text":"//...\ncolumns: [\n    {field: \"Field A\", statistics: \"label\"},\n    {field: \"Field B\"}, // No stat\n    {field: \"Field C\", statistics: \"true\"},\n],\n//...","tagName":"pre"},{"text":"Specifying statistics rows","tagName":"h3"},{"text":"Use rows with the statistic property in the extension configuration object to specify the statistics row with a statistic of your choice.","tagName":"p"},{"text":"//...\nstatisticsRow: {\n    rows: [\n        {statistic: \"Average\"},\n        {statistic: \"sum\", placement: \"header\"},\n        {statistic: \"MyCustomStat\"} // You will need to calculate the value in postCalculation event by yourself\n    ]\n    postCalculation: function(e) {\n        // your custom logic\n    },\n},\n//...","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            statistics                                                    boolean | string                                                                                        <optional>                                                                                                                            false                                                        If enabled, the column is qualified for the calculation. If \"label\" is specified, the column will be used to show statistic label        ","tagName":"tr"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            rows                                                    Array                                                                                        <optional>                                                                                                                            null                                                        Array of StatisticsRowPlugin~RowOptions        ","tagName":"tr"},{"text":"                            invalidText                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Text to be shown for invalid statistic (i.e. Not a Number value)        ","tagName":"tr"},{"text":"                            noColoring                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, all conditional coloring (i.e. tick coloring) will not automatically be applied.        ","tagName":"tr"},{"text":"                            noFormatting                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        If enabled, all formatting (i.e. decimal places) will not automatically be applied.        ","tagName":"tr"},{"text":"                            postCalculation                                                    function                                                                                        <optional>                                                                                                                                                Function handler excuted after statistics calculation and before default rendering        ","tagName":"tr"},{"text":"                            postRendering                                                    function                                                                                        <optional>                                                                                                                                                Function handler excuted after default rendering        ","tagName":"tr"},{"text":"RowOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            placement                                                    string                                                                                        <optional>                                                                                                                            \"footer\"                                                        Available footer are \"header\", \"title\", and \"footer\"        ","tagName":"tr"},{"text":"                            statistic                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Statistic to be calculated. Predefined values are \"average\", \"min\", \"max\", \"count\", and \"sum\"        ","tagName":"tr"},{"text":"                            label                                                    string                                                                                        <optional>                                                                                                                            null                                                        By default, label will be statistics name.        ","tagName":"tr"},{"text":"                            id                                                    string                                                                                        <optional>                                                                                                                            \"\"                                                        Text Id used for row referencing in extension's APIs        ","tagName":"tr"},{"text":"RowReference","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Stats","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            field                                                    string                                                                                        <optional>                                                                                            ","tagName":"tr"},{"text":"                            label                                                    boolean                                                                                        <optional>                                                                                    Indicating the column is used to show label        ","tagName":"tr"},{"text":"                            count                                                    number                                                                                        <optional>                                                                                    Count of all valid values in the column. Invalid values such as empty, null, undefined, string values are excluded. For label column, counting method will include only truthy values except number 0, and exclude all other falsy values.        ","tagName":"tr"},{"text":"                            sum                                                    number                                                                                        <optional>                                                                                    Summation        ","tagName":"tr"},{"text":"                            average                                                    number                                                                                        <optional>                                                                                    Average        ","tagName":"tr"},{"text":"                            min                                                    number                                                                                        <optional>                                                                                    Minimum        ","tagName":"tr"},{"text":"                            max                                                    number                                                                                        <optional>                                                                                    Maximum        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"addStatisticsRow(options)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"StatisticsRowPlugin~RowOptions","tagName":"a"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getStatisticsRows() → {Array.<StatisticsRowPlugin~RowOptions>}","tagName":"h4"},{"text":"StatisticsRowPlugin~RowOptions","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"StatisticsRowPlugin~RowOptions","tagName":"a"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"removeStatisticsRow(rowRef)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"StatisticsRowPlugin~RowReference","tagName":"a"},{"text":"setStatisticsRow(rowRef, options) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"StatisticsRowPlugin~RowReference","tagName":"a"},{"text":"StatisticsRowPlugin~RowOptions","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"setStatisticsRows(rows)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"StatisticsRowPlugin~RowOptions","tagName":"a"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"postCalculation","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            colCount                                                    number                                                                    ","tagName":"tr"},{"text":"                            fields                                                    Array.<string>                                                            Fields for current columns        ","tagName":"tr"},{"text":"                            statistics                                                    Array.<StatisticsRowPlugin~Stats>                                                            Array of statistic values. You should add your custom statistics to the object        ","tagName":"tr"},{"text":"StatisticsRowPlugin~Stats","tagName":"a"},{"text":"                            dataRows                                                    Array.<Object>                                                            Data row used for the calculation        ","tagName":"tr"},{"text":"                            dataView                                                    tr.DataView                                                            Class object representing current view of grid        ","tagName":"tr"},{"text":"                            dataTable                                                    tr.DataTable                                                            Class object contains all data        ","tagName":"tr"},{"text":"postRendering","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            colCount                                                    number                                                                    ","tagName":"tr"},{"text":"                            fields                                                    Array.<string>                                                            Fields for current columns        ","tagName":"tr"},{"text":"                            statistics                                                    Array.<StatisticsRowPlugin~Stats>                                                            Array of statistic values        ","tagName":"tr"},{"text":"StatisticsRowPlugin~Stats","tagName":"a"},{"text":"                            headerSection                                                    tr.ILayoutGrid                                                            UI Section representing header part        ","tagName":"tr"},{"text":"                            footerSection                                                    tr.ILayoutGrid                                                            UI Section representing footer part        ","tagName":"tr"},{"text":"                            headerRows                                                    Array.<Object>                                                            Definition objects given at the configuration time        ","tagName":"tr"},{"text":"                            footerRows                                                    Array.<Object>                                                            Definition objects given at the configuration time        ","tagName":"tr"}]},{"title":"Text Formatting","filename":"extensions/tr-grid-textformatting.html","contents":[{"text":"Text Formatting","tagName":"h2"},{"text":"The Text Formatting Extension provides special formatting for presenting actual data. By default, the possible formats are number, scaled, percent, and datetime. However, the custom formatting can also be created to handle particular cases. ","tagName":"p"},{"text":"Text Formatting Extension","tagName":"a"},{"text":"For contributions, check out the Text Formatting Extension repository.","tagName":"p"},{"text":"Text Formatting Extension repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"tr.DataGenerator.addFieldInfo(\"volume\", {\n  type: \"number\",\n  min: 10,\n  max: 10e6\n});\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"volume\", \"date1\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [{\n      title: \"Company\",\n      field: fields[0]\n    },\n    {\n      title: \"Market\",\n      field: fields[1],\n      width: 120\n    },\n    {\n      title: \"Last\",\n      field: fields[2],\n      width: 100,\n      alignment: \"right\",\n      formatType: \"number\"\n    },\n    {\n      title: \"Net. Chng\",\n      field: fields[3],\n      width: 100,\n      alignment: \"right\",\n      formatType: \"percent\"\n    },\n    {\n      title: \"Volume\",\n      field: fields[4],\n      alignment: \"right\",\n      formatType: \"scaled\"\n    },\n    {\n      title: \"IPO Date\",\n      field: fields[5],\n      alignment: \"center\",\n      formatType: \"dateTime\"\n    }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.TextFormattingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"ColumnOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            formatType                                                    string | TextFormattingPlugin~FormatOptions                                                                                        <optional>                                                                                                                                                Format options or a shorthand text (e.g. number, scaled, percent, and datetime).        ","tagName":"tr"},{"text":"TextFormattingPlugin~FormatOptions","tagName":"a"},{"text":"                            autoTextFormatting                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, the extension's automatic formatting will not be triggered, including `formatLogic`        ","tagName":"tr"},{"text":"FormatOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            type                                                    string                                                                                                                                                                                                    Available options are: number, scaled, percent, and datetime        ","tagName":"tr"},{"text":"                            field                                                    string                                                                                        <optional>                                                                                                                                                Field is required but can be defined in the column definition object        ","tagName":"tr"},{"text":"                            decimalPlaces                                                    number                                                                                        <optional>                                                                                                                            2                                                                ","tagName":"tr"},{"text":"                            plusSign                                                    boolean                                                                                        <optional>                                                                                                                            false                                                                ","tagName":"tr"},{"text":"                            percentSign                                                    boolean                                                                                        <optional>                                                                                                                            false                                                                ","tagName":"tr"},{"text":"                            scalingUnit                                                    string                                                                                        <optional>                                                                                                                                                Value can be million or billion        ","tagName":"tr"},{"text":"                            multiplyBy100                                                    boolean                                                                                        <optional>                                                                                                                            false                                                                ","tagName":"tr"},{"text":"                            mutiplyBy100                                                    boolean                                                                                        <optional>                                                                                                                            false                                                        Alias of multiplyBy100        ","tagName":"tr"},{"text":"                            dateTimeFormat                                                    string                                                                                        <optional>                                                                                                                                                        ","tagName":"tr"},{"text":"                            useUTCTime                                                    boolean                                                                                        <optional>                                                                                                                                                        ","tagName":"tr"},{"text":"                            autoTextFormatting                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, the extension's automatic formatting will not be triggered, including `formatLogic`        ","tagName":"tr"},{"text":"                            formatLogic                                                    function                                                                                        <optional>                                                                                                                            null                                                        If specified all default formatting will be prevented and replaced by the given function. This should be used when the column has custom rendering. The function must retrieve, format, and insert the data with the provided arguments.        ","tagName":"tr"},{"text":"GridOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            autoTextFormatting                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, the extension's automatic formatting will be disabled for all columns        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"formatText(colIndex, obj) → {string}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getColumnFormatOptions(colIndex, optionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getFormatter(colIndex) → {FieldFormatter}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"openDialog(colIndex)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"setColumnFormat(colIndex, formatOptions)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"TextFormattingPlugin~FormatOptions","tagName":"a"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"formatChanged","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            colIndex                                                    number                                                                                                                                                                                                            ","tagName":"tr"},{"text":"                            formatType                                                    string                                                                                                                                                                                                    Available options are: number, scaled, percent, and datetime        ","tagName":"tr"},{"text":"                            field                                                    string                                                                                                                                                                                                    Field defined in the column        ","tagName":"tr"},{"text":"                            decimalPlaces                                                    number                                                                                        <optional>                                                                                                                            2                                                                ","tagName":"tr"},{"text":"                            plusSign                                                    boolean                                                                                        <optional>                                                                                                                                                        ","tagName":"tr"},{"text":"                            percentSign                                                    boolean                                                                                        <optional>                                                                                                                                                        ","tagName":"tr"},{"text":"                            scalingUnit                                                    string                                                                                        <optional>                                                                                                                                                Value can be million or billion        ","tagName":"tr"},{"text":"                            multiplyBy100                                                    boolean                                                                                        <optional>                                                                                                                                                        ","tagName":"tr"},{"text":"                            dateTimeFormat                                                    string                                                                                        <optional>                                                                                                                                                        ","tagName":"tr"},{"text":"                            useUTCTime                                                    boolean                                                                                        <optional>                                                                                                                                                        ","tagName":"tr"}]},{"title":"Title Wrap","filename":"extensions/tr-grid-titlewrap.html","contents":[{"text":"Title Wrap","tagName":"h2"},{"text":"The Title Wrap Extension wraps column headers into multiple lines if the text is too long, instead of cutting off the text. ","tagName":"p"},{"text":"Title Wrap Extension","tagName":"a"},{"text":"For contributions, check out the Title Wrap Extension Repository.","tagName":"p"},{"text":"Title Wrap Extension Repository","tagName":"a"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Average Price (last year)\", field: fields[2], width: 100, alignment: \"right\" },\n    { title: \"Average Net. Change (last year)\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.TitleWrapExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"Title wrap with no padding top and bottom","tagName":"h3"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Average Price (last year)\", field: fields[2], width: 100, alignment: \"right\" },\n    { title: \"Average Net. Change (last year)\", field: fields[3], width: 100, alignment: \"right\" },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  titleWrap: {\n    padding: 0\n  },\n  extensions: [\n    new tr.TitleWrapExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Title wrap with group column","tagName":"h3"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { id: \"c1\", title: \"Company\", field: fields[0] },\n    { id: \"c2\", title: \"Market\", field: fields[1], width: 120 },\n    { id: \"c3\", title: \"Average Price (last year)\", field: fields[2], width: 100, alignment: \"right\" },\n    { id: \"c4\", title: \"Average Net. Change (last year)\", field: fields[3], width: 100, alignment: \"right\" },\n    { id: \"c5\", title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  columnGrouping: [{\n      id: \"g1\",\n      title: \"Company Information\",\n      alignment: \"center\",\n      children: [\"c1\", \"c2\"]\n    },\n    {\n      id: \"g2\",\n      title: \"Price\",\n      alignment: \"center\",\n      children: [\"c3\", \"c4\"]\n    }\n  ],\n  extensions: [\n    new tr.TitleWrapExtension(), new tr.ColumnGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Title wrap with nested group column","tagName":"h3"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { id: \"c1\", title: \"Company\", field: fields[0] },\n    { id: \"c2\", title: \"Market\", field: fields[1], width: 120 },\n    { id: \"c3\", title: \"Average Price (last year)\", field: fields[2], width: 100, alignment: \"right\" },\n    { id: \"c4\", title: \"Average Net. Change (last year)\", field: fields[3], width: 100, alignment: \"right\" },\n    { id: \"c5\", title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  columnGrouping: [{\n      id: \"g1\",\n      title: \"Company Information\",\n      alignment: \"center\",\n      children: [\"c1\", \"c2\"]\n    },\n    {\n      id: \"g2\",\n      title: \"Price\",\n      alignment: \"center\",\n      children: [\"c3\", \"c4\"]\n    }, {\n      id: \"g3\",\n      title: \"Top 5 Companies\",\n      alignment: \"center\",\n      children: [\"g1\", \"g2\", \"c5\"]\n    }\n  ],\n  extensions: [\n    new tr.TitleWrapExtension(), new tr.ColumnGroupingExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Methods","tagName":"h3"},{"text":"_adjustRowHeightRefByHost(host, sectionRef, fromopt, toopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"adjustRowHeight(sectionRef, fromopt, toopt) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"adjustRowHeightAt(sectionRef, rowIndex) → {boolean}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getName() → {string}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize(host, optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload(host)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Zoom","filename":"extensions/zoom.html","contents":[{"text":"Zoom","tagName":"h2"},{"text":"The Zoom Extension add Grid's ability to zoom in or zoom out. ","tagName":"p"},{"text":"Zoom Extension","tagName":"a"},{"text":"For contributions, check out the Zoom Extension Repository.","tagName":"p"},{"text":"Zoom Extension Repository","tagName":"a"},{"text":" Ctrl + Scroll to zoom in/out.\n<br>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var zoomExt = new tr.ZoomExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  freezeColumn: 0,\n  pinnedRightColumns: 1,\n  rowHighlight: true,\n  rowSelection: true,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 250 },\n    { title: \"Market\", field: fields[1], width: 160 },\n    { title: \"Last\", field: fields[2], width: 160 },\n    { title: \"Net. Chng\", field: fields[3], width: 160 },\n    { title: \"Industry\", field: fields[4], width: 200 }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    zoomExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 208px;\n}","tagName":"pre"},{"text":"Installation and how to import to a project","tagName":"h3"},{"text":"Installation examples and details of how to import the extension to a project are available on the Overview page.","tagName":"p"},{"text":"Overview","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Options","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Default                Description    ","tagName":"tr"},{"text":"                            zoomFactor                                                    number                                                                                        <optional>                                                                                                                            1                                                        Default zoom level range from 0.6 to 2        ","tagName":"tr"},{"text":"                            step                                                    number                                                                                        <optional>                                                                                                                            0.1                                                        Steps size of each zoom level        ","tagName":"tr"},{"text":"                            wheel                                                    boolean                                                                                        <optional>                                                                                                                            true                                                        If disabled, not allow wheel event to change zoom        ","tagName":"tr"},{"text":"                            maxFactor                                                    number                                                                                        <optional>                                                                                                                            2                                                        Maximum zoom factor level        ","tagName":"tr"},{"text":"                            minFactor                                                    number                                                                                        <optional>                                                                                                                            0.5                                                        Minimum zoom factor level        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"addElement(elem)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"config(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"enableWheelToZoom(boolopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"getConfigObject(gridOptionsopt) → {Object}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"getDefaultMouseWheelLogic() → {function}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"getName()","tagName":"h4"},{"text":"getZoomFactor() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"hasMultiTableSupport() → {boolean}","tagName":"h4"},{"text":"GridPlugin#hasMultiTableSupport","tagName":"a"},{"text":"Returns:","tagName":"h5"},{"text":"initialize()","tagName":"h4"},{"text":"removeElement(elem) → {Element}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"setStep(step)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"unload()","tagName":"h4"},{"text":"updateZoomedLayout()","tagName":"h4"},{"text":"zoomDefault(zoomFactoropt) → {number}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"zoomIn() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"zoomOut() → {number}","tagName":"h4"},{"text":"Returns:","tagName":"h5"},{"text":"zoomTo(factoropt) → {number}","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"Returns:","tagName":"h5"},{"text":"Events","tagName":"h3"},{"text":"zoomChanged","tagName":"h4"},{"text":"Type:","tagName":"h5"}]},{"title":"Event Handling in Formatter","filename":"rendering/formatter-event-handling.html","contents":[{"text":"If your custom formatter contains some input elements or controls, it's important to bind data back to Grid's internal data source when users input new data through the UI from your custom formatter. Remember, the same element will be used on different rows due to the row virtualization mechanic. If the data is changed by user actions, you need to update the change back to Grid's data source, or else the binding mechanism will replace what the user has changed with the data stored from the Grid's internal source. ","tagName":"p"},{"text":"In short, setDataAt() method should be used to set data to Grid after users interact with the formatter and getRelativePosition() method should be used to resolve current positions relative to the grid element.","tagName":"p"},{"text":"APIs for data manipulation can be found here.  APIs for Grid and getRelativePosition() method description can be found here.","tagName":"p"},{"text":"here","tagName":"a"},{"text":"here","tagName":"a"},{"text":"The 'reverted' problem","tagName":"h2"},{"text":"When you don't set data back, row virtualization will not work properly and content will not be rendered properly. Suppose that you have a dropdown element in one of the grid columns. Any change that is done to the dropdown box will be reverted if you don't update the data.","tagName":"p"},{"text":"In the live example below, try the following steps to produce the problem:","tagName":"p"},{"text":"The 'reverted' Problem","tagName":"h2"},{"text":"When we don't set data back, row virtualization will not work properly and content will not be rendered properly. Suppose that we have a dropdown element in one of the grid columns. Any change that is done to the dropdown box will be reverted if we don't update the data.","tagName":"p"},{"text":"In the live example below, try the following steps to produce the problem:","tagName":"p"},{"text":"<emerald-grid>\n</emerald-grid>","tagName":"pre"},{"text":"// For static data initialization\nvar data2D = [];\nfor (var i = 0; i < 20; i++) {\n  data2D.push([\n    i % 4,\n    i + \" Some Texts\",\n    i & 1 ? true : false,\n    i / (i + 1)\n  ]);\n}\n\nvar dropdownFormatter = {\n  render: function() {},\n  bind: function(rowIndex, colIndex, value, cell) {\n    var dropdown = cell.getContent();\n    if (!dropdown || !dropdown._myDropdown) {\n      dropdown = document.createElement(\"select\");\n      dropdown._myDropdown = true;\n      [0, 1, 2, 3].forEach(function(val) {\n        var option = document.createElement(\"option\");\n        option.value = val;\n        option.textContent = \"Value \" + val;\n        dropdown.appendChild(option);\n      });\n    }\n\n    dropdown.selectedIndex = value;\n    cell.setContent(dropdown);\n  }\n};\n\nvar fields = [\"intCol\", \"strCol\", \"boolCol\", \"floatCol\"];\nvar configObj = {\n  rowHighlight: false,\n  rowSelection: true,\n  columnSelection: true,\n  columns: [\n    { title: \"Column 1\", field: fields[0] },\n    { title: \"Column 3\", field: fields[2], alignment: \"center\" },\n    { title: \"Column 4\", field: fields[3], alignment: \"right\" },\n    { title: \"Dropdown\", field: fields[0], formatter: dropdownFormatter }\n  ],\n  dataModel: {\n    fields: fields,\n    format: \"array\",\n    data: data2D\n  }\n};\n\nvar grid = document.getElementsByTagName(\"emerald-grid\")[0];\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"You will see that the selected option is reverted back to the original option.","tagName":"p"},{"text":"The fix","tagName":"h2"},{"text":"To avoid the problem, we have to add an event listener to our custom formatter for binding the change from users. You have added dropdownChangeHandler to fix the problem as shown below:","tagName":"p"},{"text":"<emerald-grid>\n</emerald-grid>","tagName":"pre"},{"text":"// For static data initialization\nvar data2D = [];\nfor (var i = 0; i < 20; i++) {\n  data2D.push([\n    i % 4,\n    i + \" Some Texts\",\n    i & 1 ? true : false,\n    i / (i + 1)\n  ]);\n}\n\n// Show how to render custom content with an event listener\nvar dropdownFormatter = {\n  render: function() {},\n  bind: function(rowIndex, colIndex, value, cell) {\n    var dropdown = cell.getContent();\n    if (!dropdown || !dropdown._myDropdown) {\n      dropdown = document.createElement(\"select\");\n      dropdown._myDropdown = true;\n      [0, 1, 2, 3].forEach(function(val) {\n        var option = document.createElement(\"option\");\n        option.value = val;\n        option.textContent = \"Value \" + val;\n        dropdown.appendChild(option);\n      });\n\n      dropdown.addEventListener(\"change\", dropdownChangeHandler);\n    }\n    dropdown.selectedIndex = value;\n    cell.setContent(dropdown);\n  }\n};\n// Show how to set data based on interaction from custom content\nvar dropdownChangeHandler = function(e) {\n  var dropdown = e.currentTarget;\n  var pos = grid.api.getRelativePosition(e);\n  var dv = grid.api.getDataView();\n\n  var selectedIndex = dropdown.options[dropdown.selectedIndex].value;\n  dv.setDataAt(pos.rowIndex, grid.api.getColumnField(pos.colIndex), +selectedIndex);\n};\n\nvar fields = [\"intCol\", \"strCol\", \"boolCol\", \"floatCol\"];\nvar configObj = {\n  rowHighlight: false,\n  rowSelection: true,\n  columnSelection: true,\n  columns: [\n    { title: \"Column 1\", field: fields[0] },\n    { title: \"Column 3\", field: fields[2], alignment: \"center\" },\n    { title: \"Column 4\", field: fields[3], alignment: \"right\" },\n    { title: \"Dropdown\", field: fields[0], formatter: dropdownFormatter }\n  ],\n  dataModel: {\n    fields: fields,\n    format: \"array\",\n    data: data2D\n  }\n};\n\nvar grid = document.getElementsByTagName(\"emerald-grid\")[0];\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"Writing event listeners","tagName":"h2"},{"text":"Since the same element will be used on different rows, you cannot use closure variables that are created or given within the bind() method. Row index, column index, or cell reference must be resolved at runtime inside the event listener. You can resolve the position by using Grid's getRelativePosition() method.","tagName":"p"},{"text":"    var dropdownChangeHandler = function(e) {\n        var dropdown = e.currentTarget;\n        var pos = grid.api.getRelativePosition(e);\n        var dv = grid.api.getDataView();\n\n        var selectedIndex = dropdown.options[dropdown.selectedIndex].value;\n        dv.setDataAt(pos.rowIndex, grid.api.getColumnField(pos.colIndex), +selectedIndex);\n    };","tagName":"pre"}]},{"title":"Resetting/Clearing Data","filename":"data/columns-and-data.html","contents":[{"text":"Grid provides columns and data properties that allow clearing and setting new data/column set at run-time.","tagName":"p"},{"text":"Note: The properties will only work after Grid's config property has been set.The properties do not support two-way binding. Meaning, any change within the internal structure will not reflect or synchronize back to the property value. This means, regardless of any change in Grid, the property will remain the same. ","tagName":"p"},{"text":"Resetting data","tagName":"h2"},{"text":"Data property","tagName":"h3"},{"text":"data property supports two types of input. The first type of input (recommended) is an array of object. The object is a map from field name to value. The second type of input is a two-dimensional array. The fields from existing columns will be mapped to the given values in the 2D array. There can be a discrepancy resulting from the mapping, so it's not recommended.","tagName":"p"},{"text":"grid.data = newDataSet; // Clear all existing data and set entirely new data set\n\n// First type of input\ngrid.data = [\n    {\"Field 1\": 1, \"Field 2\": 0},\n    {\"Field 1\": 3, \"Field 2\": 4, \"Field 3\": 5}\n];\n\n// Second type of input\ngrid.data = [\n    [1, 2],\n    [3, 4, 5], // There should be at least 3 existing columns to correctly map these data\n    [6, 7]\n];","tagName":"pre"},{"text":"Columns property","tagName":"h3"},{"text":"columns property takes the same type of input as the columns property in the grid configuration object (grid.config). The data and grid configuration will not be affected by this property. ","tagName":"p"},{"text":"To change a new set of columns and keep the current settings and data, do the following:","tagName":"p"},{"text":"grid.columns = newColumns; // Clear all existing columns and set entirely new set of columns\n\ngrid.columns = null; // Clear all existing columns. All data stored in grid stays intact.","tagName":"pre"},{"text":"You can keep the current set of columns and change the current settings by leaving out the columns property from the config object.","tagName":"p"},{"text":"grid.columns = newColumns;\ngrid.config = {\n    rowHighlighting: true\n}; // current columns are kept","tagName":"pre"},{"text":"Clearing data","tagName":"h2"},{"text":"To clear all existing data, set data property to null. This is a quick way to remove all data. It is equivalent to calling removeAllRows() API.","tagName":"p"},{"text":"grid.data = null; // Clear all existing data","tagName":"pre"},{"text":"Columns and data property example","tagName":"h2"},{"text":"<fieldset>\n  <legend>Setting Columns</legend>\n  <button id=\"column_btn1\">Column Set 1</button>\n  <button id=\"column_btn2\">Column Set 2</button>\n  <button id=\"column_btn3\">Clear All Columns</button>\n</fieldset>\n<fieldset>\n  <legend>Setting Data</legend>\n  <button id=\"data_btn1\">Data Set 1</button>\n  <button id=\"data_btn2\">Data Set 2</button>\n  <button id=\"data_btn3\">Clear All Data</button>\n</fieldset>\n<hr>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 4, seed: 0 });\nvar records1 = tr.DataGenerator.generateRecords(fields, { numRows: 5, seed: 10 });\nvar records2 = tr.DataGenerator.generateRecords(fields, { numRows: 3, seed: 20 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"column_btn1\").addEventListener('click', function() {\n  grid.columns = [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ];\n});\ndocument.getElementById(\"column_btn2\").addEventListener('click', function() {\n  grid.columns = [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 }\n  ];\n});\ndocument.getElementById(\"column_btn3\").addEventListener('click', function() {\n  grid.columns = null;\n});\n\ndocument.getElementById(\"data_btn1\").addEventListener('click', function() {\n  grid.data = records1;\n});\ndocument.getElementById(\"data_btn2\").addEventListener('click', function() {\n  grid.data = records2;\n});\ndocument.getElementById(\"data_btn3\").addEventListener('click', function() {\n  grid.data = null;\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}\n\nhr {\n  margin: 5px;\n}","tagName":"pre"},{"text":"As there are more states and options for each row in Atlas Blotter, rows property is provided as a way to set those options. Setting rows property will change number of rows and reset existing data and data requests. Changing rows property will always remove existing rows, so you should use this for changing to completely new set of rows. ","tagName":"p"},{"text":"data property in Atlas Blotter will act as a way for updating data and keeping existing row intact. Changing data property will only update existing rows or add new rows. Changing data property will not reduce number of rows. However, if either rows or data property is set to null, all rows and data will be removed. ","tagName":"p"},{"text":"Note that you should not use rows property for adding new rows because it is not very efficient (i.e., existing data will be cleared and re-requested). You should use provided APIs for dynamically adding new rows. ","tagName":"p"},{"text":"Rows and data property example","tagName":"h2"},{"text":"<fieldset>\n  <legend>Setting Rows</legend>\n  <button id=\"row_btn1\">Row Set 1 (3 Rows)</button>\n  <button id=\"row_btn2\">Row Set 2 (4 Rows)</button>\n  <button id=\"row_btn3\">Row Set 3 (5 Rows)</button>\n  <button id=\"row_btn4\">Clear All Rows</button>\n</fieldset>\n<fieldset>\n  <legend>Updating Data</legend>\n  <button id=\"data_btn1\">Data Set 1 (3 Rows) </button>\n  <button id=\"data_btn2\">Data Set 2 (4 Rows) </button>\n  <button id=\"data_btn3\">Data Set 3 (5 Rows) </button>\n  <button id=\"data_btn4\">Clear All Data</button>\n</fieldset>\n<hr>\n<atlas-blotter id=\"grid\"></atlas-blotter>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 4, seed: 0 });\n// For data property\nvar records1 = tr.DataGenerator.generateRecords(fields, { numRows: 3, seed: 10 });\nvar records2 = tr.DataGenerator.generateRecords(fields, { numRows: 4, seed: 20 });\nvar records3 = tr.DataGenerator.generateRecords(fields, { numRows: 5, seed: 30 });\n// For rows property\nvar records4 = tr.DataGenerator.generateRecords(fields, { numRows: 3, seed: 40 });\nvar records5 = tr.DataGenerator.generateRecords(fields, { numRows: 4, seed: 50 });\nvar records6 = tr.DataGenerator.generateRecords(fields, { numRows: 5, seed: 60 });\n\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  staticDataRows: records\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"row_btn1\").addEventListener('click', function() {\n  grid.rows = records4.map(function(data, idx) {\n    return {\n      ric: \"RIC_\" + idx,\n      values: data\n    };\n  });\n});\ndocument.getElementById(\"row_btn2\").addEventListener('click', function() {\n  grid.rows = records5.map(function(data, idx) {\n    return {\n      ric: \"RIC_\" + idx,\n      values: data\n    };\n  });\n});\ndocument.getElementById(\"row_btn3\").addEventListener('click', function() {\n  grid.rows = records6.map(function(data, idx) {\n    return {\n      ric: \"RIC_\" + idx,\n      values: data\n    };\n  });\n});\ndocument.getElementById(\"row_btn4\").addEventListener('click', function() {\n  grid.rows = null;\n});\n\ndocument.getElementById(\"data_btn1\").addEventListener('click', function() {\n  grid.data = records1;\n});\ndocument.getElementById(\"data_btn2\").addEventListener('click', function() {\n  grid.data = records2;\n});\ndocument.getElementById(\"data_btn3\").addEventListener('click', function() {\n  grid.data = records3;\n});\ndocument.getElementById(\"data_btn4\").addEventListener('click', function() {\n  grid.data = null;\n});","tagName":"pre"},{"text":"atlas-blotter {\n  height: 200px;\n}\n\nhr {\n  margin: 5px;\n}","tagName":"pre"}]},{"title":"Column Resetting","filename":"columns/column-resetting.html","contents":[{"text":"To change or reset an entire set of columns, see Columns and Data in the Data section.","tagName":"p"},{"text":"Columns and Data","tagName":"a"}]},{"title":"Column Alignment","filename":"columns/column-alignment.html","contents":[{"text":"Column data can be aligned to the left, center, or right using the property alignment in the column definition. Column title alignment can be set in the same way using the property titleAlignment. The default value for both alignment and titleAlignment is left.","tagName":"p"},{"text":"var configObj = {\n    ...\n    columns: [\n        {\n            alignment: \"left\",\n            titleAlignment: \"left\"\n        }, \n        ...\n    ],\n    ...\n}","tagName":"pre"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0], titleAlignment: \"center\" },\n    { title: \"Market\", field: fields[1], width: 100, alignment: \"center\" },\n    { title: \"Last\", field: fields[2], width: 80, alignment: \"right\" },\n    { title: \"Net. Chng\", field: fields[3], width: 80, alignment: \"right\" },\n    { title: \"Industry\", field: fields[4], titleAlignment: \"center\" }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Column Add/insert","filename":"columns/dynamic-add-insert-column.html","contents":[{"text":"Columns can be added/inserted dynamically at runtime. The definition of the column to be added or inserted is the same as in the column array specified at initialization. ","tagName":"p"},{"text":"Use the addColumn() or insertColumn() methods to insert a column with its configuration.","tagName":"p"},{"text":"Use the addColumns() or insertColumns() methods to insert multiple columns at once to boost the performance.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<button id=\"add_col_btn\">Add Column</button>\n<button id=\"insert_col_btn\">Insert Column</button>\n<button id=\"add_many_col_btn\">Add 10 Columns</button>\n<button id=\"insert_many_col_btn\">Insert 10 Columns</button>\n<br><br>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"intCol\"];\nvar configObj = {\n  columns: [\n    { title: \"Column 1\", minWidth: 100, field: fields[0] },\n    { title: \"Column 2\", minWidth: 100, field: fields[0] }\n  ],\n  dataModel: {\n    fields: fields,\n    format: \"array\",\n    data: [\n      [1],\n      [2],\n      [3],\n      [4],\n      [5],\n      [6]\n    ]\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\nvar idRunner = 2;\n\naddingStyles = {\n  backgroundColor: \"#32ab60\",\n  color: \"white\"\n};\n\ninsertingStyles = {\n  backgroundColor: \"#db4052\",\n  color: \"white\"\n};\n\ndocument.getElementById(\"add_col_btn\").addEventListener(\"click\", function() {\n  idRunner++;\n  grid.api.addColumn({ title: \"Column \" + idRunner, minWidth: 100, field: fields[0], styles: addingStyles });\n});\n\ndocument.getElementById(\"insert_col_btn\").addEventListener(\"click\", function() {\n  idRunner++;\n  grid.api.insertColumn(1, { title: \"Column \" + idRunner, minWidth: 100, field: fields[0], styles: insertingStyles });\n});\n\ndocument.getElementById(\"add_many_col_btn\").addEventListener(\"click\", function() {\n  var columns = [];\n  for (var i = 0; i < 10; i++) {\n    idRunner++;\n    columns.push({ title: \"Column \" + idRunner, minWidth: 100, field: fields[0], styles: addingStyles });\n  }\n  grid.api.addColumns(columns);\n});\n\ndocument.getElementById(\"insert_many_col_btn\").addEventListener(\"click\", function() {\n  var columns = [];\n  for (var i = 0; i < 10; i++) {\n    idRunner++;\n    columns.push({ title: \"Column \" + idRunner, minWidth: 100, field: fields[0], styles: insertingStyles });\n  }\n  grid.api.insertColumns(0, columns);\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Column Hide/remove","filename":"columns/dynamic-remove-column.html","contents":[{"text":"You can choose to hide a column in the column definition by toggling the property visible between true and false. Columns can be hidden/removed dynamically at runtime. You can remove multiple columns in one method call to boost performance.","tagName":"p"},{"text":"Use the setColumnVisible() method to set the visibility of the specified column (that is, hide or show the column).","tagName":"p"},{"text":"Use the removeColumn(), removeColumns() or removeAllColumns() methods to remove the specified column(s).","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<button id=\"hideColumnButton\">Hide Column 0</button>\n<button id=\"showColumnButton\">Show Column 0</button>\n<button id=\"showColumn5Button\">Show Column 5</button>\n<button id=\"removeColumnButton\">Remove Column 0</button>\n<button id=\"removeAllColumns\">Remove All Columns</button>\n<br><br>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"intCol\"];\nvar configObj = {\n  columns: [\n    { title: \"Column 0\", field: fields[0] },\n    { title: \"Column 1\", field: fields[0] },\n    { title: \"Column 2\", field: fields[0] },\n    { title: \"Column 3\", field: fields[0] },\n    { title: \"Column 4\", field: fields[0] },\n    { title: \"Column 5\", field: fields[0], visible: false }\n  ],\n  dataModel: {\n    fields: fields,\n    format: \"array\",\n    data: [\n      [1],\n      [2],\n      [3],\n      [4],\n      [5],\n      [6]\n    ]\n  }\n};\n\nvar grid = document.getElementsByTagName(\"emerald-grid\")[0];\ngrid.config = configObj;\n\ndocument.getElementById(\"hideColumnButton\").addEventListener(\"click\", function() {\n  grid.api.setColumnVisible(0, false);\n});\n\ndocument.getElementById(\"showColumnButton\").addEventListener(\"click\", function() {\n  grid.api.setColumnVisible(0, true);\n});\n\ndocument.getElementById(\"showColumn5Button\").addEventListener(\"click\", function() {\n  grid.api.setColumnVisible(5, true);\n});\n\ndocument.getElementById(\"removeColumnButton\").addEventListener(\"click\", function() {\n  grid.api.removeColumn(0);\n});\n\ndocument.getElementById(\"removeAllColumns\").addEventListener(\"click\", function() {\n  grid.api.removeAllColumns();\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Column Width","filename":"columns/column-width.html","contents":[{"text":"Column widths can be defined in the following ways:","tagName":"p"},{"text":"To fit the column width to the column content, please use the Column Resizing Extension.","tagName":"p"},{"text":"Column Resizing Extension","tagName":"a"},{"text":"Note: once a column is resized it will automatically have a fixed width.","tagName":"p"},{"text":"Default Grid width with default column width","tagName":"h2"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1] },\n    { title: \"Last\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3] },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Fixed Grid width with default column width","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1] },\n    { title: \"Last\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3] },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  width: 400px;\n}","tagName":"pre"},{"text":"Fixed Grid width with fixed column width","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0], width: 200 },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4], width: 200 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  width: 400px;\n}","tagName":"pre"},{"text":"Default Grid width with fixed column width","tagName":"h2"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  autoHideScrollbar: false,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 200 },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4], width: 200 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Fixed column width with proportional column width","tagName":"h2"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  autoHideScrollbar: false,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 200 },\n    { title: \"Market\", field: fields[1], width: 1.5, scalable: true },\n    { title: \"Last\", field: fields[2], width: 1, scalable: true },\n    { title: \"Net. Chng\", field: fields[3], width: 1, scalable: true },\n    { title: \"Industry\", field: fields[4], width: 1.5, scalable: true }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Pinning right columns","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  autoHideScrollbar: false,\n  pinnedRightColumns: 1,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 200 },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4], width: 150 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  width: 400px;\n}","tagName":"pre"},{"text":"Pinning both sides","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  autoHideScrollbar: false,\n  freezeColumn: 0,\n  pinnedRightColumns: 1,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 200 },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4], width: 150 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  width: 500px;\n}","tagName":"pre"},{"text":"Delayed initialization (after 5 seconds)","tagName":"h2"},{"text":"<div id=\"container\">\n</div>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  freezeColumn: 0,\n  pinnedRightColumns: 1,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 200 },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4], width: 150 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\nvar grid = null;\nsetTimeout(function() {\n  grid = document.createElement(\"emerald-grid\");\n  grid.config = configObj;\n  document.getElementById(\"container\").appendChild(grid);\n}, 5000);","tagName":"pre"},{"text":"#container {\n  height: 200px;\n}\n\nemerald-grid {\n  width: 500px;\n}","tagName":"pre"}]},{"title":"Column Reordering","filename":"columns/column-reordering.html","contents":[{"text":"Column reordering can be turned on by setting columnReorder to true. The default value is false. ","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  columnReorder: true, //Enable this option to allow column re-ordering\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Column Moving","filename":"columns/column-moving.html","contents":[{"text":"Columns can be moved using the grid.api.moveColumn(from, to) API, which allows you to specify a column index or an array of column indices to be moved, and the target index position.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<button id=\"move_1\">Move Index 0 -&gt; 2</button>\n<button id=\"move_2\">Move Index 3,4 -&gt; 1</button>\n<br>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById('move_1').addEventListener('click', function() {\n  grid.api.moveColumn(0, 2);\n});\n\ndocument.getElementById('move_2').addEventListener('click', function() {\n  grid.api.moveColumn([3, 4], 1);\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Column Freezing","filename":"columns/column-freezing.html","contents":[{"text":"This page has moved to the Scrollbars section.","tagName":"p"},{"text":"Scrollbars","tagName":"a"}]},{"title":"Column Pinning","filename":"columns/column-pinning.html","contents":[{"text":"This page has moved to the Scrollbars section.","tagName":"p"},{"text":"Scrollbars","tagName":"a"}]},{"title":"Column Styling","filename":"columns/column-styling.html","contents":[{"text":"Columns can be styled by using CSS in the styles property of the column definition.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 5 });\nvar styles = {\n  \"font-weight\": \"bold\",\n  \"font-size\": \"15px\",\n  \"color\": \"#32ab60\",\n  \"background-color\": \"#0b2615\"\n};\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0], styles: styles },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"}]},{"title":"Column Grouping","filename":"columns/column-grouping.html","contents":[{"text":"Note: The built-in column grouping is deprecated in favor of the Column Grouping Extension. The extension provides more control and flexibility, in terms of both functionalities and UIs, over the current APIs.","tagName":"p"},{"text":"Column Grouping Extension","tagName":"a"},{"text":"Columns can be grouped and put under a spanned header cell. And the groups can be defined hierarchically, with an unlimited number of levels in the structure. Grouped columns can be dragged together to reorder columns without breaking the group structure.","tagName":"p"},{"text":"A group header can be formatted using a formatter just like a normal cell.","tagName":"p"},{"text":"var configObj = {\n    ...\n    columnGroups: [\n            {title: \"Group 1\", parent: \"g3\", alignment: \"center\"},\n            {title: \"Group 2\", parent: \"g3\", alignment: \"center\"},\n        ],\n    ...\n}","tagName":"pre"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\nvar configObj = {\n  columnReorder: true,\n  columns: [\n    { title: \"Company\", field: fields[0], columnGroup: \"g1\" },\n    { title: \"Market\", field: fields[1], width: 100, columnGroup: \"g1\" },\n    { title: \"Last\", field: fields[2], width: 80, columnGroup: \"g2\" },\n    { title: \"Net. Chng\", field: fields[3], width: 80, columnGroup: \"g2\" },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  columnGroups: [\n    { id: \"g1\", title: \"Company Info\", parent: \"g4\", alignment: \"center\" },\n    { id: \"g2\", title: \"Price\", parent: \"g4\", alignment: \"center\" },\n    {\n      id: \"g4\",\n      title: \"Top 6 Companies\",\n      alignment: \"center\",\n      formatter: {\n        render: function(colIndex, cell, groupDefinition) {\n          cell.setStyle(\"color\", \"orange\");\n          cell.setContent(groupDefinition.title);\n        }\n      }\n    }\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Row Highlighting / Selection","filename":"rows/row-highlight-selection.html","contents":[{"text":"Row highlighting can be turned on/off by setting the options for rowHighlight to true and false respectively. This property works for both Emerald Grid and Atlas Blotter.","tagName":"p"},{"text":"All related row selection functionalities can be added through the Row Selection Extension.","tagName":"p"},{"text":"Row Selection Extension","tagName":"a"},{"text":"Example","tagName":"h2"},{"text":"<big>Hover mouse over Grid to see row highlighting</big>\n<hr>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\nvar configObj = {\n  rowHighlight: true, // Add This Property to turn on/off rowHighlight\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}\n\nhtml hr {\n  margin: 5px;\n}","tagName":"pre"}]},{"title":"Row Height","filename":"rows/row-height.html","contents":[{"text":"The height of content rows can be adjusted using the rowHeight property. Since Grid uses a row virtualization rendering technique, all of the rows must have the same height by default. ","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\nvar configObj = {\n  rowHeight: 60,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"Variable row height","tagName":"h2"},{"text":"If you want to wrap long text content in the grid's cell, use the Content Wrap Extension. The extension will wrap text content that exceeds the cell width, making Grid act as if it is a native table.","tagName":"p"},{"text":"Content Wrap Extension","tagName":"a"},{"text":"However, text wrapping is resource-intensive, so it is turned off by default. To specify the column to be wrapped, set contentWrap to true in the column configuration.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"longStrCol\", \"strCol\", \"boolCol\", \"floatCol\"];\nvar configObj = {\n  columns: [\n    { title: \"Column 1\", field: fields[0], width: 150, contentWrap: true },\n    { title: \"Column 2\", field: fields[1] },\n    { title: \"Column 3\", field: fields[2] },\n    { title: \"Column 4\", field: fields[3] }\n  ],\n  dataModel: {\n    fields: [\"intCol\", \"strCol\", \"boolCol\", \"floatCol\", \"longStrCol\"],\n    format: \"array\",\n    data: [\n      [1, \"Hello World\", true, 1.1, \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\"],\n      [1, \"Hello World\", true, 2.2, \"Aliquam facilisis dapibus sem ut condimentum. Praesent consequat fringilla.\"],\n      [1, \"Hello World\", false, 3.3, \"Fusce vitae tellus justo. Donec lacinia euismod nulla\"],\n      [1, \"Hello World\", false, 4.4, \"Vestibulum vulputate orci sit\"],\n      [1, \"Hello World\", true, 5.5, \"Integer a sapien sit amet nibh ultrices bibendum\"],\n      [1, \"Hello World\", true, 1.1, \"Proin lacus ipsum, efficitur vel arcu non, sodales laoreet elit\"],\n      [1, \"Hello World\", true, 2.2, \"Duis accumsan tempor purus, sed pulvinar\"],\n      [1, \"Hello World\", false, 3.3, \"Ut vehicula imperdiet libero ac\"],\n      [1, \"Hello World\", false, 4.4, \"Nulla ut faucibus ex. Cras laoreet posuere massa, sed pulvinar nisl ultrices non\"],\n      [1, \"Hello World\", true, 5.5, \"Aenean porta lectus\"]\n    ]\n  },\n  extensions: [new tr.ContentWrapExtension()]\n};\n\nvar grid = document.getElementsByTagName(\"emerald-grid\")[0];\ngrid.config = configObj;\n\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4], width: 100, contentWrap: true }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [\n    new tr.ContentWrapExtension()\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Row Showing / Hiding","filename":"rows/row-show-hide.html","contents":[{"text":"Content rows can be hidden and shown based on their row ID, and an additional API unhides all currently hidden rows.","tagName":"p"},{"text":"Note: In most cases, the row ID is not equivalent to the row index. It can, however, be retrieved if you know the index (refer to the JavaScript section in the demo).","tagName":"p"},{"text":"Both the showRows() and hideRows() APIs accept either an individual value (string or integer) or an array of values.  This kind of state is independent of the programmatic filtering of content, and will correctly reclassify hidden rows on sorting/grouping.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<button id=\"hide_btn\">Hide First 3 Rows</button>\n<button id=\"show_btn\">Show Rows</button>\n<button id=\"clear_btn\">Unhide All</button>\n<br><br>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\nvar rowId1, rowId2, rowId3;\ndocument.getElementById(\"hide_btn\").addEventListener(\"click\", function() {\n  // Hide rows at index 0 and 1 (rowIds are \"0\" and \"1\" respectively since rows haven\"t been sorted/filtered)\n  var dataView = grid.api.getDataView();\n  rowId1 = dataView.getRowId(0);\n  rowId2 = dataView.getRowId(1)\n  rowId3 = dataView.getRowId(2)\n  grid.api.hideRows([rowId1, rowId2, rowId3]);\n});\n\ndocument.getElementById(\"show_btn\").addEventListener(\"click\", function() {\n  grid.api.showRows([rowId1, rowId2]);\n});\n\ndocument.getElementById(\"clear_btn\").addEventListener(\"click\", function() {\n  // Unhide all currently hidden rows\n  grid.api.unhideAllRows();\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Row Reordering","filename":"rows/row-reordering.html","contents":[{"text":"Note: Built-in row reordering is deprecated in favor of the Row Dragging Extension. In terms of both functionalities and UIs, the extension provides more control and flexibility over the current APIs.","tagName":"p"},{"text":"Row Dragging Extension","tagName":"a"},{"text":"To allow the user to drag and reorder selected rows, turn on the rowReorder property. The possible values are a boolean true or an object that provides more options. The visual content of the dragged row can be rendered using the renderer function provided in the property dragBoxRenderer of the options object.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\nvar configObj = {\n  rowSelection: true,\n  rowReorder: {\n    dragBoxRenderer: function(dragEvent, dragBox, dataRows) {\n      var content = document.createElement(\"div\");\n      var value;\n      for (var i = 0; i < dataRows.length; i++) {\n        value = dataRows[i][fields[0]];\n        content.append(value);\n        content.appendChild(document.createElement(\"br\"));\n      }\n\n      dragBox.setContent(content);\n    }\n  },\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Adding Header & Footer Sections","filename":"rows/add-header-footer.html","contents":[{"text":"Additional header and footer sections can be added, and are automatically frozen. Both methods (header and footer) return the new section (with the row count of one), which can then be populated programmatically.  A unique section name is required when creating either.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<button id=\"header_btn\">Add Header Section</button>\n<button id=\"footer_btn\">Add Footer Section</button>\n<br><br>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"header_btn\").addEventListener(\"click\", function() {\n  // generate random section name\n  var sectionName = Date.now();\n\n  // method returns the new section\n  var newSection = grid.api.addHeaderSection(sectionName);\n  newSection.setCellColSpan(0, 0, 5);\n  var cell = newSection.getCell(0, 0);\n  cell.setContent(\"Header\");\n});\n\ndocument.getElementById(\"footer_btn\").addEventListener(\"click\", function() {\n  // generate random section name\n  var sectionName = Date.now();\n\n  // method returns the new section\n  var newSection = grid.api.addFooterSection(sectionName);\n  newSection.getCell(0, 0).setContent(\"Footer\");\n  newSection.getCell(1, 0).setContent(\"100\");\n  newSection.getCell(2, 0).setContent(\"200\");\n  newSection.getCell(3, 0).setContent(\"300\");\n  newSection.getCell(4, 0).setContent(\"400\");\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Row Grouping","filename":"rows/row-grouping.html","contents":[{"text":"Note: Built-in row grouping is deprecated in favor of the Row Grouping Extension. In terms of both functionalities and UIs, the extension provides more control and flexibility over the current APIs.","tagName":"p"},{"text":"Row Grouping Extension","tagName":"a"},{"text":"Row grouping can be done by using the Row Grouping Extension.  To do the grouping, you will need to provide grouping criteria to the groupBy property of the rowGrouping option in the grid configuration object.","tagName":"p"},{"text":"Row Grouping Extension","tagName":"a"},{"text":"var configObj = {\n    ...\n    rowGrouping: {\n        groupBy: [\"field1\", \"criteria\"],\n    },\n    ...\n}","tagName":"pre"},{"text":"Example","tagName":"h2"},{"text":"<big>Group By:</big>\n\n<button id=\"g1_btn\">Market</button>\n<button id=\"g2_btn\">Industry</button>\n<button id=\"g23_btn\">Market and Industry</button>\n<button id=\"clear_btn\">Reset Grouping</button>\n<br><br>\n<big>Expand:</big>\n<button id=\"expand_btn\">Expand All Groups</button>\n<button id=\"collapse_btn\">Collapse All Groups</button>\n<br><br>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var rowGroupingExt = new tr.RowGroupingExtension();\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 100 });\nvar configObj = {\n  rowGrouping: {\n    groupBy: [\"market\", \"industry\"],\n    headerBinding: function(e) {\n      e.cell.setContent(e.groupId + \" (\" + e.dataSource.getAllRowIds().length + \")\");\n    },\n    groupSortLogic: function(a, b) { // Optional\n      return (a < b ? -1 : (a > b ? 1 : 0));\n    },\n    headerSpanning: true // Optional\n  },\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  extensions: [rowGroupingExt]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ng1_btn.addEventListener(\"click\", function(e) {\n  rowGroupingExt.groupBy(fields[1]);\n});\ng2_btn.addEventListener(\"click\", function(e) {\n  rowGroupingExt.groupBy(fields[4]);\n});\ng23_btn.addEventListener(\"click\", function(e) {\n  rowGroupingExt.groupBy([fields[1], fields[4]]);\n});\nclear_btn.addEventListener(\"click\", function(e) {\n  rowGroupingExt.groupBy(null);\n});\nexpand_btn.addEventListener(\"click\", function(e) {\n  rowGroupingExt.expandAll();\n});\ncollapse_btn.addEventListener(\"click\", function(e) {\n  rowGroupingExt.collapseAll();\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 320px;\n}","tagName":"pre"}]},{"title":"Vertical Scrollbar","filename":"scrollbars/vertical-scrollbar.html","contents":[{"text":"By default, Grid behaves like a native div element that has CSS \"display: block;\". This means Grid's height will be expanded as the number of its rows is increasing. In other words, it has a dynamic height equal to its content height. So Grid will never show a vertical scrollbar by default, as the content height does not exceed its container (grid element) height.","tagName":"p"},{"text":"If you want to enable the vertical scrollbar, two conditions must be met:","tagName":"p"},{"text":"Note: once Grid's vertical scrollbar is shown, Grid's row virtualization will also be activated. Not all elements will be created or rendered. The same cells will be shared across multiple rows.","tagName":"p"},{"text":"Also, if the containers or Grid styles have been changed by JavaScript, you need to notify Grid about the change in order to update the layout. Use getCoreGrid().updateLayout() to force updating the layout.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<button id=\"reset_btn\">Reset Grid Height to Default</button>\n<button id=\"set_200_btn\">Set Grid Height to 200px</button>\n<button id=\"set_600_btn\">Set Grid Height to 600px</button>\n<br><br>\n<emerald-grid id=\"grid\" style=\"height: 200px\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"reset_btn\").addEventListener(\"click\", function(e) {\n  grid.style.height = \"\";\n  grid.getCoreGrid().updateLayout(); // Notify grid that some CSS have been changed\n});\ndocument.getElementById(\"set_200_btn\").addEventListener(\"click\", function(e) {\n  grid.style.height = \"200px\";\n  grid.getCoreGrid().updateLayout(); // Notify grid that some CSS have been changed\n});\ndocument.getElementById(\"set_600_btn\").addEventListener(\"click\", function(e) {\n  grid.style.height = \"600px\";\n  grid.getCoreGrid().updateLayout(); // Notify grid that some CSS have been changed\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"The Grid vertical scrollbar, by default, is shown on top of the grid. This is to avoid jittering the content when the layout is changed. However, in some cases, the vertical scrollbar may hinder or prevent interaction with the content, especially for the rightmost column. Use the contentRightPadding flag to reserve some space on the right to prevent this from happening.","tagName":"p"},{"text":"autoHideScrollbar could also be used to stop automatic scrollbar hiding.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  autoHideScrollbar: false,\n  contentRightPadding: 14,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Horizontal Scrollbar","filename":"scrollbars/horizontal-scrollbar.html","contents":[{"text":"By default, Grid behaves like a native div element that has CSS \"display: block;\". So, Grid has a default size of 100% of the parent width. ","tagName":"p"},{"text":"Grid's default column widths have no fixed size. The column size will be divided equally on the available space. And Grid columns will fit within the available space. So, Grid will never show a horizontal scrollbar by default, as the content (column) width does not exceed its container (grid element) width.","tagName":"p"},{"text":"If you want to enable the horizontal scrollbar, two conditions must be met:","tagName":"p"},{"text":"Note: once Grid's horizontal scrollbar is shown, column virtualization will be activated as well.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<button id=\"reset_btn\">Reset All Column Widths to Default</button>\n<button id=\"fixate_all_btn\">Fixate All Column Widths</button>\n<button id=\"fixate_first_btn\">Fixate the First Column</button>\n<br><br>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\nvar configObj = {\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1] },\n    { title: \"Last\", field: fields[2] },\n    { title: \"Net. Chng\", field: fields[3] },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"reset_btn\").addEventListener(\"click\", function(e) {\n  grid.api.getCoreGrid().setColumnWidths([1, 1, 1, 1, 1], true); // All columns will have equal width\n});\ndocument.getElementById(\"fixate_all_btn\").addEventListener(\"click\", function(e) {\n  grid.api.getCoreGrid().setColumnWidths([300, 150, 150, 150, 200], false); // Set all column widths to the specified size.\n});\ndocument.getElementById(\"fixate_first_btn\").addEventListener(\"click\", function(e) {\n  var core = grid.api.getCoreGrid();\n  core.setColumnWidth(0, 200); // Set the first column to have fixed width (200px);\n  core.setColumnWidths([null, 1, 1, 1, 3], true); // Set the last four columns to have no size\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"The Grid horizontal scrollbar, by default, is shown on top of the grid. This is to avoid the content jittering when the layout is changed. However, in some cases, the horizontal scrollbar may hinder or prevent interaction with the content, especially for the bottommost row. Use the contentBottomPadding flag to reserve some space on the bottom to stop this from happening.","tagName":"p"},{"text":"autoHideScrollbar can also be used to stop automatic scrollbar hiding.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  autoHideScrollbar: false,\n  contentBottomPadding: 9,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 300 },\n    { title: \"Market\", field: fields[1], width: 150 },\n    { title: \"Last\", field: fields[2], width: 150 },\n    { title: \"Net. Chng\", field: fields[3], width: 150 },\n    { title: \"Industry\", field: fields[4], width: 200 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"}]},{"title":"Scroll Speed","filename":"scrollbars/scroll-speed.html","contents":[{"text":"Generally, Grid will contain a large number of rows. Grid elements could block page scrolling due to slow native wheel scrolling speed and long scroll distance. So, by default, Grid's wheel scroll speed will increase exponentially once the content height exceeds a certain threshold. This behavior may not be wanted, so to return to the native wheel default behavior enable linearWheelScrolling. ","tagName":"p"},{"text":"You can also force scrolling to move for the whole row by using the stepScroll property.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\", \"id\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 1000 });\nvar configObj = {\n  linearWheelScrolling: true,\n  stepScroll: true,\n  columns: [\n    { title: \"ID\", field: fields[5], width: 40 },\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 400px;\n}","tagName":"pre"}]},{"title":"Non-Overlap Scrollbars","filename":"scrollbars/non-overlap-scrollbars.html","contents":[{"text":"Normally, Grid's scrollbars are shown on top of its content. This behavior can result in scrollbars blocking the display and interaction of the content. You can work around this issue by adding extra content to allow space for the scrollbars. To do this set contentRightPadding and contentBottomPadding properties in the configuration, as shown in the example below.","tagName":"p"},{"text":"Content padding example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  contentRightPadding: 14,\n  contentBottomPadding: 14,\n  autoHideScrollbar: false,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 250 },\n    { title: \"Market\", field: fields[1], width: 150 },\n    { title: \"Last\", field: fields[2], width: 150 },\n    { title: \"Net. Chng\", field: fields[3], width: 150 },\n    { title: \"Industry\", field: fields[4], width: 300 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"},{"text":"This extra content may not be desirable though, as it can add to the amount of scroll distance and not actually reserve space for the scrollbars. Instead, you can change the parent of the scrollbars and reserve some space using CSS paddings. To change the parent of the scrollbars supply the parent element to the scrollbarParent property in the configuration object, as shown below.","tagName":"p"},{"text":"Note: autoHideScrollbar is turned off by default if scrollbarParent is supplied.","tagName":"p"},{"text":"Changing the scrollbar parent example","tagName":"h2"},{"text":"<div id=\"grid_container\">\n  <emerald-grid id=\"grid\"></emerald-grid>\n</div>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 20 });\nvar configObj = {\n  scrollbarParent: document.getElementById(\"grid_container\"),\n  columns: [\n    { title: \"Company\", field: fields[0], width: 250 },\n    { title: \"Market\", field: fields[1], width: 150 },\n    { title: \"Last\", field: fields[2], width: 150 },\n    { title: \"Net. Chng\", field: fields[3], width: 150 },\n    { title: \"Industry\", field: fields[4], width: 300 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"#grid_container {\n  height: 200px;\n  padding-right: 14px;\n  padding-bottom: 14px;\n  box-sizing: border-box;\n}\n\nemerald-grid {\n  height: 100%;\n}","tagName":"pre"}]},{"title":"Scrollbar Visibility","filename":"scrollbars/scrollbar-visibility.html","contents":[{"text":"Instead of fading in or out on hover (default behavior), Grid scrollbars can be set to always be visible whenever the content is scrollable.","tagName":"p"},{"text":"This behavior can be enabled upon grid initialization using the autoHideScrollbar option. The values can be false for always-on, and true for fade in/out (default).","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  autoHideScrollbar: false,\n  columns: [\n    { title: \"Company\", field: fields[0], width: 250 },\n    { title: \"Market\", field: fields[1], width: 150 },\n    { title: \"Last\", field: fields[2], width: 150 },\n    { title: \"Net. Chng\", field: fields[3], width: 150 },\n    { title: \"Industry\", field: fields[4], width: 300 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Left Side Column Pinning/Freezing","filename":"scrollbars/left-side-column-pinning.html","contents":[{"text":"Sometimes Grid can contain a large number of columns and when scrolled to the right, without the row header, users might lose track of what kind of data is in the row.To solve this, you can freeze or pin columns on the left side to act like a row indicator. To do this, use the freezeColumn property to specify the \"index\" of the last column on the left side you want to be frozen/pinned.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  freezeColumn: 1, // Index of the last column to be frozen/pinned. In this case, 1 is the second column\n  columns: [\n    { width: 20 },\n    { title: \"Company\", field: fields[0], width: 250 },\n    { title: \"Market\", field: fields[1], width: 150 },\n    { title: \"Last\", field: fields[2], width: 150 },\n    { title: \"Net. Chng\", field: fields[3], width: 150 },\n    { title: \"Industry\", field: fields[4], width: 300 }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"","tagName":"pre"}]},{"title":"Right Side Column Pinning/Freezing","filename":"scrollbars/right-side-column-pinning.html","contents":[{"text":"When Grid contains controls or buttons on the right side you should freeze or pin these columns, as they should not be part of the scrollable content. To do this use the pinnedRightColumns property to specify the \"number\" of columns to be frozen/pinned on the right side.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var buttonFormatter = {\n  render: function() {},\n  bind: function(r, c, val, cell) {\n    var btn = cell.getContent();\n    if (!btn) {\n      btn = document.createElement(\"button\");\n    }\n    btn.textContent = val;\n    cell.setContent(btn);\n  }\n};\n\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\", \"id\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  pinnedRightColumns: 3, // Number of columns to be frozen/pinned\n  columns: [\n    { title: \"Company\", field: fields[0], width: 250 },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4], width: 300 },\n    { title: \"Op.1\", field: fields[5], width: 60, formatter: buttonFormatter, alignment: \"center\" },\n    { title: \"Op.2\", field: fields[5], width: 60, formatter: buttonFormatter, alignment: \"center\" },\n    { title: \"Op.3\", field: fields[5], width: 60, formatter: buttonFormatter, alignment: \"center\" }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Basic Sorting","filename":"sorting/sorting.html","contents":[{"text":"Grid support sorting out of the box. By default, sorting is turned off for all columns. To turn it on, set sortableCoumns to true.","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    sorting: {\n        sortableColumns: true,\n    }\n}","tagName":"pre"},{"text":"To turn the sorting on or off for a specific column, the sortable option is available in the column option.","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    columns: [\n        { title: \"Column 1\", field: \"field1\", sortable: true },\n        { title: \"Column 2\", field: \"field2\" },\n    ],\n}","tagName":"pre"},{"text":"In some use cases, you may want to turn on sorting for a particular column based on another field. If so, you can set sortBy in the column option to any column field.","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    sorting: {\n        sortableColumns: true,\n    },\n    columns: [\n        { title: \"Column 1\", field: \"field1\" },\n        { title: \"Column 2\", field: \"field2\", sortBy: \"field1\" },\n    ],\n}","tagName":"pre"},{"text":"And lastly, sort with an api.","tagName":"p"},{"text":"var grid = document.getElementById(\"grid\");\nvar sort = grid.api.getCoreGrid().getPlugin(\"SortableTitle\");\nsort.sortColumn(0, 'a'); // Column index 0 with order ascending.","tagName":"pre"},{"text":"For all available options and APIs, please visit SortableTitlePlugin","tagName":"p"},{"text":"SortableTitlePlugin","tagName":"a"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true,\n  },\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Default Sort","filename":"sorting/default-sorting.html","contents":[{"text":"You can sort data in the grid automatically after initialization by specifying the initialSort option, which receives the following two options: colIndex and sortOrder.","tagName":"p"},{"text":"The possible values of sortOrder are:","tagName":"p"},{"text":"You can see all possible values for the sort order here.","tagName":"p"},{"text":"here","tagName":"a"},{"text":"var config = {\n    // any other grid's options\n    sorting: {\n        sortableColumns: true,\n        initialSort: {\n            colIndex: 0,\n            sortOrder: \"d\"\n        }\n    }\n}","tagName":"pre"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true,\n    initialSort: {\n      colIndex: 0, // Column index\n      sortOrder: \"d\"\n    }\n  },\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Server Side Sorting","filename":"sorting/server-side-sorting.html","contents":[{"text":"In manual sorting mode, clicking on the column title will change the sorting status, but no actual sorting is done on the grid data.","tagName":"p"},{"text":"One use case is, if you want to do server-side sorting, you can use manual sorting mode in conjunction with the columnSorted event and the XMLHttpRequest method.","tagName":"p"},{"text":"XMLHttpRequest","tagName":"a"},{"text":"To turn manual sorting on, set indicatorOnly to true.","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    sorting: {\n        sortableColumns: true,\n        indicatorOnly: true\n    }\n}","tagName":"pre"},{"text":"You also need to listen to columnSorted event in order to trigger server-side sorting. This can be achieve using Grid's API.","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    whenDefined: function(e) {\n        e.api.listen(\"columnSorted\", function(evtArg) {\n            var sortingStates = grid.api.getSortingStates();\n            var sortingState = sortingStates[0];\n            var sortOrder = sortingState.order;\n            // At this point, you maybe use XMLHttpRequest to fetch sorted data from the server.\n        });\n    }\n}","tagName":"pre"},{"text":"You can see all possible values for the sort order here.","tagName":"p"},{"text":"here","tagName":"a"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>\n<textarea id=\"output_ta\" placeholder=\"Click at the grid header to sort\"></textarea>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true,\n    indicatorOnly: true\n  },\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  whenDefined: function(e) {\n    e.api.listen(\"columnSorted\", function(evtArg) {\n      var sortingStates = grid.api.getSortingStates();\n      var sortingState = sortingStates[0];\n      var sortOrder = (sortingState.order === \"a\") ? \"ascending\" : \"decending\";\n      var ta = document.getElementById(\"output_ta\");\n      ta.value =\n        \"Column \" + sortingState.colIndex +\n        \" is sorted \" + sortOrder +\n        \"\\n\" + ta.value;\n\n      // At this point, you maybe use XMLHttpRequest to fetch sorted data from the server.\n    });\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}\n\ntextarea {\n  width: 100%;\n  height: 50px;\n  margin: 10px 0;\n}","tagName":"pre"}]},{"title":"Multi-Column/3-States Sorting","filename":"sorting/multi-column-sorting.html","contents":[{"text":"Sorting can be done on several columns together. You need to add the sorting property with two sub-properties: multiColumn and threeStateSorting.","tagName":"p"},{"text":"The property threeStatesSorting allows the column to be reset to the neutral state at every third click. Turning on threeStatesSorting makes multi-column sorting easier to use.","tagName":"p"},{"text":"var config = {\n    // ... other config\n    sorting: {\n        sortableColumns: true,\n        multiColumn: true,\n        threeStatesSorting: true\n    }\n}","tagName":"pre"},{"text":"Initial Sort for Multiple Column","tagName":"h2"},{"text":"It is possible to set the initial sort with multiColumn enabled. We can use initialSort to define an array of SortableTitlePlugin.InitialSort.","tagName":"p"},{"text":"SortableTitlePlugin.InitialSort","tagName":"a"},{"text":"If multiColumn is not enabled, the initialSort will only take the first object of an array into consideration.","tagName":"p"},{"text":"var config = {\n    // any other grid's options\n    sorting: {\n        sortableColumns: true,\n        multiColumn: true,\n        initialSort: [{\n            colIndex: 0,\n            sortOrder: \"d\"\n        }, {\n            colIndex: 1,\n            sortOrder: \"d\"\n        }]\n    }\n}","tagName":"pre"},{"text":"Multiple Column Sort with API","tagName":"h2"},{"text":"var grid = document.getElementById(\"grid\");\nvar sort = grid.api.getCoreGrid().getPlugin(\"SortableTitle\");\nsort.sortColumns([\n    {\n        colIndex: 0, // Column index 0 with order descending.\n        sortOrder: \"d\"\n    }, {\n        colIndex: 1, // Column index 1 with order descending\n        sortOrder: \"d\"\n    }\n]);","tagName":"pre"},{"text":"For all available options and APIs, please visit SortableTitlePlugin","tagName":"p"},{"text":"SortableTitlePlugin","tagName":"a"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true,\n    multiColumn: true,\n    threeStatesSorting: true\n  },\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Get Sort States / Reset All Sorting","filename":"sorting/sorting-get-reset.html","contents":[{"text":"The getSortedColumns() method returns an array of the currently applied sorting states (with the colIndex and sortOrder properties).","tagName":"p"},{"text":"Additionally, the clearSortState() method resets the current sorting states to their default neutral state.","tagName":"p"},{"text":"A list of all sorting-related events can be found in the Events Handling section.","tagName":"p"},{"text":"var sort = grid.api.getCoreGrid().getPlugin(\"SortableTitle\");\nvar states = sort.getSortedColumns(); // Return an array of the current active sorting states\n\nsort.clearSortState(); // Reset all sorting states to neutral","tagName":"pre"},{"text":"Example","tagName":"h2"},{"text":"<button id=\"get_btn\">Get Current States</button>\n<button id=\"reset_btn\">Clear All Sorting</button>\n<textarea id=\"output_ta\" placeholder=\"Click at the grid header to sort\"></textarea>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  sorting: {\n    sortableColumns: true,\n    multiColumn: true,\n    threeStatesSorting: true\n  },\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 120 },\n    { title: \"Last\", field: fields[2], width: 100 },\n    { title: \"Net. Chng\", field: fields[3], width: 100 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById(\"get_btn\").addEventListener(\"click\", function() {\n  // Return an array of the current active sorting states\n  var sort = grid.api.getCoreGrid().getPlugin(\"SortableTitle\");\n  var states = sort.getSortedColumns();\n\n  var ta = document.getElementById('output_ta');\n  ta.value = JSON.stringify(states, 2, null) + \"\\n\" + ta.value;\n});\n\ndocument.getElementById(\"reset_btn\").addEventListener(\"click\", function() {\n  var sort = grid.api.getCoreGrid().getPlugin(\"SortableTitle\");\n  sort.clearSortState();\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}\n\ntextarea {\n  width: 100%;\n  height: 50px;\n  margin: 10px 0;\n}","tagName":"pre"}]},{"title":"Filtering Programmatically","filename":"filtering/filtering-programmatically.html","contents":[{"text":"Rows can be filtered programmatically using the Row Filtering Extension through the extension.setColumnFilter(colIndex, expression, context) API, which accepts a filter expression string or a filter function.","tagName":"p"},{"text":"Row Filtering Extension","tagName":"a"},{"text":"Filter expression","tagName":"p"},{"text":"The expression format is a boolean statement. The supported functions are similar to those found in Excel, so you can refer to Excel functions of the same name. The expression, however, is evaluated only on each row, unlike in Excel where you can refer to any cell in the table. The data in each field can be referenced using [columnName].","tagName":"p"},{"text":"// Col1 - Rank > 10\nrowFilterExt.setColumnFilter(0, '[rank] > 10');","tagName":"pre"},{"text":"Filter function","tagName":"p"},{"text":"The custom filter function helps you to fine-tune the filtering logic. The function takes three parameters: rowData, rowId and context. The function is called against each row in the grid. If the function returns true the row is included, or false otherwise.","tagName":"p"},{"text":"// Col2 - Countries start with 'A'\nrowFilterExt.setColumnFilter(1, function(rowData, rowId, ctx) {\n    var country = rowData.country.toLowerCase();\n    return /^a/.test(country);\n});","tagName":"pre"},{"text":"Example","tagName":"h2"},{"text":"<input id=\"rank_rather_10\" type=\"button\" value=\"Col1 - Rank &gt; 10\">\n<input id=\"start_with_a\" type=\"button\" value=\"Col2 - Countries start with &apos;A&apos;\">\n<input id=\"small_countries\" type=\"button\" value=\"Col3 - Small countries\">\n<input id=\"clear\" type=\"button\" value=\"Clear Filters\">\n<br><br>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var rowFilterExt = new tr.RowFilteringExtension();\nvar textFormatExt = new tr.TextFormattingExtension();\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Rank\", field: \"rank\", sortBy: \"rank\" },\n    { title: \"Country\", field: \"country\", sortBy: \"country\" },\n    {\n      title: \"GDP (Millions of USD)\",\n      field: \"gdp\",\n      sortBy: \"gdp\",\n      alignment: \"right\",\n      formatType: {\n        type: \"number\",\n        separator: 1,\n        decimalPlaces: 3\n      }\n    }\n  ],\n  dataModel: {\n    fields: ['rank', 'country', 'gdp'],\n    format: \"array\",\n    data: []\n  },\n  extensions: [\n    rowFilterExt,\n    textFormatExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\n// Fetch data from gdp.json\nfetch('../resources/scripts/data/gdp.json').then(o => o.json()).then(response => {\n  var dataTable = grid.api.getDataTable();\n  dataTable.setDataFrom2DArray(response, [\"rank\", \"country\", \"gdp\"]);\n});\n\ndocument.getElementById('rank_rather_10').addEventListener('click', function() {\n  rowFilterExt.addColumnFilter(0, \"[rank] > 10\");\n});\n\ndocument.getElementById('start_with_a').addEventListener('click', function() {\n  rowFilterExt.addColumnFilter(1, function(rowData, rowId, ctx) {\n    let country = rowData.country.toLowerCase();\n    return /^a/.test(country);\n  });\n});\n\ndocument.getElementById('small_countries').addEventListener('click', function() {\n  rowFilterExt.addColumnFilter(2, function(rowData, rowId, ctx) {\n    return rowData.gdp <= 1000;\n  });\n});\n\ndocument.getElementById('clear').addEventListener('click', function() {\n  rowFilterExt.removeAllFilters();\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 220px;\n}\n\ninput[type=button] {\n  margin: 5;\n}","tagName":"pre"}]},{"title":"Filter UI","filename":"filtering/filtering-auto-filter-row.html","contents":[{"text":"Rows can be filtered automatically using the Filter Input Extension and Row Filter Extension.  ","tagName":"p"},{"text":"Filter Input Extension","tagName":"a"},{"text":"Row Filter Extension","tagName":"a"},{"text":"The Filter Input Extension provides built-in filter UIs, which is a form input element appearing between the title section and content section.","tagName":"p"},{"text":"The Row Filtering Extension provides filtering programmatically due to UIs changing.","tagName":"p"},{"text":"Note that, the Filter Input Extension is using the Row Filter Extension and both extensions will synchronize together. So, in the extensions field the Row Filter Extension and Filter Input Extension instance must be included.","tagName":"p"},{"text":"var configObj = {\n    extensions: [\n        rowFilteringExt,\n        filterInputExt\n    ]\n}","tagName":"pre"},{"text":"Built-in filter UIs","tagName":"h2"},{"text":"The Filter Input Extension provides many types of input UIs. The available UIs are text input, number input, dropdown selector and date-time picker.","tagName":"p"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var filterInputExt = new tr.FilterInputExtension();\nvar rowFilteringExt = new tr.RowFilteringExtension();\n\nvar dateFormatter = {\n  render: function() {},\n  bind: function(rowIndex, colIndex, value, cell) {\n    var parts = value.toDateString().split(\" \");\n    cell.setContent(parts[2] + \"-\" + parts[1] + \"-\" + parts[3]);\n  }\n};\n\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Date\", field: \"date\", sortBy: \"date\", filterInput: { type: \"date\" }, formatter: dateFormatter, alignment: \"c\" },\n    { title: \"Country\", field: \"country\", sortBy: \"country\", width: 200, alignment: \"c\" },\n    { title: \"Currency\", field: \"currency\", sortBy: \"currency\", filterInput: { type: \"select\", entries: [\"PLN\", \"EUR\", \"SEK\", \"GBP\", \"DKK\"] }, width: 200, alignment: \"c\" },\n    { title: \"Rate\", field: \"rate\", sortBy: \"rate\", alignment: \"right\", filterInput: { type: \"number\" }, width: 200, alignment: \"c\" }\n  ],\n  dataModel: {\n    fields: [\"date\", \"country\", \"currency\", \"rate\"],\n    format: \"rows\",\n    data: []\n  },\n  extensions: [\n    rowFilteringExt,\n    filterInputExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\nfetch('../resources/scripts/data/euro-currency-rate.json').then(o => o.json()).then(response => {\n  var dataTable = grid.api.getDataTable();\n  response = response.map(function(data) {\n    return {\n      date: new Date(data.date),\n      country: data.country,\n      currency: data.currency,\n      rate: data.rate\n    }\n  });\n  dataTable.addRows(response);\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 300px;\n}","tagName":"pre"},{"text":"Note that, without a defaultLogic property set, the function will perform a string search.","tagName":"p"},{"text":"Custom filter logic","tagName":"h2"},{"text":"In several use cases, we may need more than a default string search which we can achieve by creating a new function that filters data in each row, then attach the function itself to defaultLogic, the property of Filter Input Extension options (Find more available options at Filter Input Extension). Let's see column \"rate\" in the following example. ","tagName":"p"},{"text":"Filter Input Extension","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var filterInputExt = new tr.FilterInputExtension();\nvar rowFilteringExt = new tr.RowFilteringExtension();\nvar numericFilter = {\n  defaultLogic: function(e, rowData) {\n    if (e.inputText) {\n      var num = +(e.inputText);\n      var cellValue = rowData[e.field];\n      return cellValue < num;\n    }\n    return false;\n  },\n  placeholder: \"less than\",\n  type: \"number\"\n};\n\nvar dateFormatter = {\n  render: function() {},\n  bind: function(rowIndex, colIndex, value, cell) {\n    var parts = value.toDateString().split(\" \");\n    cell.setContent(parts[2] + \"-\" + parts[1] + \"-\" + parts[3]);\n  }\n};\n\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Date\", field: \"date\", sortBy: \"date\", filterInput: { type: \"date\" }, formatter: dateFormatter, alignment: \"c\" },\n    { title: \"Country\", field: \"country\", sortBy: \"country\", width: 200, alignment: \"c\" },\n    { title: \"Currency\", field: \"currency\", sortBy: \"currency\", filterInput: { type: \"select\", entries: [\"PLN\", \"EUR\", \"SEK\", \"GBP\", \"DKK\"] }, width: 200, alignment: \"c\" },\n    { title: \"Rate\", field: \"rate\", sortBy: \"rate\", alignment: \"right\", filterInput: numericFilter, width: 200, alignment: \"c\" }\n  ],\n  dataModel: {\n    fields: [\"date\", \"country\", \"currency\", \"rate\"],\n    format: \"rows\",\n    data: []\n  },\n  extensions: [\n    rowFilteringExt,\n    filterInputExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\nfetch('../resources/scripts/data/euro-currency-rate.json').then(o => o.json()).then(response => {\n  var dataTable = grid.api.getDataTable();\n  response = response.map(function(data) {\n    return {\n      date: new Date(data.date),\n      country: data.country,\n      currency: data.currency,\n      rate: data.rate\n    }\n  });\n  dataTable.addRows(response);\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 300px;\n}","tagName":"pre"}]},{"title":"Custom Filter UI","filename":"filtering/custom-filter.html","contents":[{"text":"Apart from the built-in filter UIs, Filter Input Extension also supports UI customizations, which allows users to create their UI.","tagName":"p"},{"text":"Filter Input Extension","tagName":"a"},{"text":"The Filter Input Extension provides an inputCreated event callback passed through the extension's configuration and is allowed to modify UI elements in this callback handler. More details about the configuration are available here. The following example shows the first column:","tagName":"p"},{"text":"here","tagName":"a"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var filterInputExt = new tr.FilterInputExtension();\nvar rowFilteringExt = new tr.RowFilteringExtension();\n\nvar dateFormatter = {\n  render: function() {},\n  bind: function(rowIndex, colIndex, value, cell) {\n    var parts = value.toDateString().split(\" \");\n    cell.setContent(parts[2] + \"-\" + parts[1] + \"-\" + parts[3]);\n  }\n};\n\nvar onInputCreated = function(e) {\n  // Perform ui customization on the fourth column only\n  if (e.colIndex !== 0) { return; }\n\n  // Create <option> elements. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\n  var items = [\n    [\">=\", \"GTE\"],\n    [\"<=\", \"LTE\"],\n    [\"==\", \"EQ\"],\n    [\"<\", \"LT\"],\n    [\">\", \"GT\"]\n  ];\n  var options = items.map(function(item) {\n    var optElem = document.createElement(\"option\");\n    optElem.textContent = item[0]; // Label\n    optElem.value = item[1];\n    return optElem;\n  });\n\n  // Create <select> element\n  var selElem = document.createElement(\"select\");\n  selElem.style.display = \"inline-block\";\n  selElem.style.width = \"40%\";\n  selElem.style.maxHeight = \"unset\";\n  options.forEach(function(optElem) {\n    selElem.appendChild(optElem);\n  });\n\n  // Save variables for later use\n  selElem.colIndex = e.colIndex;\n  selElem.input = e.input;\n  e.input.filterType = options[0].value;\n  e.input.style.width = \"60%\";\n\n  // Add event listener for business logic\n  selElem.addEventListener(\"mousedown\", function(e) {\n    e.stopPropagation();\n  }, false);\n  selElem.addEventListener(\"click\", function(e) {\n    e.stopPropagation();\n  }, false);\n  selElem.addEventListener(\"change\", function(e) {\n    e.stopPropagation();\n\n    var elem = e.currentTarget;\n    var selectedOption = elem.options[elem.selectedIndex];\n    var colIndex = elem.colIndex;\n    console.log(\"Selection changed on colIndex: \", colIndex);\n\n    // Update filter type\n    elem.input.filterType = selectedOption.value;\n\n    // Force recalculation of filtering\n    filterInputExt.refresh();\n  }, false);\n\n  // Insert select element before the input element\n  var parentInput = e.input.parentNode;\n  parentInput.insertBefore(selElem, parentInput.firstChild);\n}\n\nvar myFilterLogic = function(e, rowData) {\n  if (e.inputText) {\n    var num = +(e.inputText);\n    var cellValue = rowData[e.field];\n\n    switch (e.input.filterType) {\n      case \"GTE\":\n        return (cellValue >= num);\n      case \"LTE\":\n        return (cellValue <= num);\n      case \"GT\":\n        return (cellValue > num);\n      case \"LT\":\n        return (cellValue < num);\n      default:\n        return (cellValue == num);\n    }\n  } else {\n    return true;\n  }\n}\n\nvar configObj = {\n  rowHighlight: true,\n  columns: [{\n      title: \"Rate\",\n      field: \"rate\",\n      sortBy: \"rate\",\n      alignment: \"right\",\n      filterInput: {\n        defaultLogic: myFilterLogic,\n        placeholder: \"e.g. 1, 0, or -1\"\n      },\n      width: 200,\n      alignment: \"c\"\n    },\n    { title: \"Date\", field: \"date\", sortBy: \"date\", filterInput: { type: \"date\" }, formatter: dateFormatter, alignment: \"c\" },\n    { title: \"Country\", field: \"country\", sortBy: \"country\", width: 200, alignment: \"c\" },\n    { title: \"Currency\", field: \"currency\", sortBy: \"currency\", filterInput: { type: \"select\", entries: [\"PLN\", \"EUR\", \"SEK\", \"GBP\", \"DKK\"] }, width: 200, alignment: \"c\" }\n  ],\n  dataModel: {\n    fields: [\"date\", \"country\", \"currency\", \"rate\"],\n    format: \"rows\",\n    data: []\n  },\n  extensions: [\n    rowFilteringExt,\n    filterInputExt\n  ],\n  filterInput: {\n    inputCreated: onInputCreated\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\nfetch('../resources/scripts/data/euro-currency-rate.json').then(o => o.json()).then(response => {\n  var dataTable = grid.api.getDataTable();\n  response = response.map(function(data) {\n    return {\n      date: new Date(data.date),\n      country: data.country,\n      currency: data.currency,\n      rate: data.rate\n    }\n  });\n  dataTable.addRows(response);\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 300px;\n}","tagName":"pre"}]},{"title":"Get Filter States / Reset All","filename":"filtering/filtering-get-reset.html","contents":[{"text":"The Row Filtering Extension provides APIs such as:","tagName":"p"},{"text":"Row Filtering Extension","tagName":"a"},{"text":"For more details see the Row Filter Extension API documentation.","tagName":"p"},{"text":"Row Filter Extension API documentation","tagName":"a"},{"text":"<button id=\"get_states_btn\">Get Filter States</button>\n<button id=\"reset_all_btn\">Clear All Filters</button>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var filterInputExt = new tr.FilterInputExtension();\nvar rowFilteringExt = new tr.RowFilteringExtension();\n\nvar dateFormatter = {\n  render: function() {},\n  bind: function(rowIndex, colIndex, value, cell) {\n    var parts = value.toDateString().split(\" \");\n    cell.setContent(parts[2] + \"-\" + parts[1] + \"-\" + parts[3]);\n  }\n};\n\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Date\", field: \"date\", sortBy: \"date\", filterInput: { type: \"date\" }, formatter: dateFormatter, alignment: \"c\" },\n    { title: \"Country\", field: \"country\", sortBy: \"country\", width: 200, alignment: \"c\" },\n    { title: \"Currency\", field: \"currency\", sortBy: \"currency\", filterInput: { type: \"select\", entries: [\"PLN\", \"EUR\", \"SEK\", \"GBP\", \"DKK\"] }, width: 200, alignment: \"c\" },\n    { title: \"Rate\", field: \"rate\", sortBy: \"rate\", alignment: \"right\", filterInput: { type: \"number\" }, width: 200, alignment: \"c\" }\n  ],\n  dataModel: {\n    fields: [\"date\", \"country\", \"currency\", \"rate\"],\n    format: \"rows\",\n    data: []\n  },\n  extensions: [\n    rowFilteringExt,\n    filterInputExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ndocument.getElementById('get_states_btn').addEventListener('click', function() {\n  var states = rowFilteringExt.getColumnFilterStates();\n  alert(JSON.stringify(states));\n});\n\ndocument.getElementById('reset_all_btn').addEventListener('click', function() {\n  // Remove all filters and update the UI where applicable (via reset() method)\n  rowFilteringExt.removeAllColumnFilters();\n});\n\nfetch('../resources/scripts/data/euro-currency-rate.json').then(o => o.json()).then(response => {\n  var dataTable = grid.api.getDataTable();\n  response = response.map(function(data) {\n    return {\n      date: new Date(data.date),\n      country: data.country,\n      currency: data.currency,\n      rate: data.rate\n    }\n  });\n  dataTable.addRows(response);\n});","tagName":"pre"},{"text":"emerald-grid {\n  height: 300px;\n}","tagName":"pre"}]},{"title":"In-Cell Editing","filename":"editing/in-cell-editor.html","contents":[{"text":"In-Cell Editing Extension provides full editing abilities for your grid, including content and title editing in cell. It means data in each cell can be edited directly.","tagName":"p"},{"text":"In-Cell Editing Extension","tagName":"a"},{"text":"See more details at In-Cell Editing Extension API Documentation.","tagName":"p"},{"text":"In-Cell Editing Extension API Documentation","tagName":"a"}]},{"title":"Custom Editor","filename":"editing/custom-editor.html","contents":[{"text":"Apart from the default In-Cell Editing Extension, a custom editor can be easily created by implementing an event editorOpened. The extension calls this event when the user has double click to cells.","tagName":"p"},{"text":"In-Cell Editing Extension","tagName":"a"},{"text":"In this situation, you need to specify options for the user to select. There are yes, no or none, which can be selected in Column 3. The code example below shows how to implement this.","tagName":"p"},{"text":"Example","tagName":"h2"},{"text":"<emerald-grid id=\"grid\">\n</emerald-grid>","tagName":"pre"},{"text":"var extension = new tr.InCellEditingExtension();\nvar onEditorOpened = function(e) {\n  var ed = e.editor;\n\n  while (ed.lastChild) {\n    ed.removeChild(ed.lastChild);\n  }\n\n  var elem;\n  if (e.colIndex === 2) {\n    elem = ed.selectButton;\n\n    if (!elem) {\n      elem = ed.selectButton = document.createElement('select');\n      elem.style.width = \"100%\";\n      elem.style.height = \"100%\";\n      elem.style.maxHeight = \"unset\";\n\n      var items = ['true', 'false', 'none'];\n      for (var i = 0; i < items.length; ++i) {\n        var opt = document.createElement('option');\n        opt.textContent = opt.value = items[i];\n        elem.appendChild(opt);\n      }\n\n      elem.addEventListener('change', function(e) {\n        var tgt = e.currentTarget;\n        var selectedItem = tgt.options[tgt.selectedIndex];\n        var selectedValue = selectedItem.value;\n        extension.commitText(selectedValue);\n      });\n    }\n\n    elem.value = e[\"initialText\"];\n  } else {\n    elem = e.inputElement;\n  }\n\n  ed.appendChild(elem);\n};\n\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\", \"boolean\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market (editable)\", field: fields[1], width: 150, editableContent: true },\n    { title: \"Watch (editable)\", field: fields[5], with: 150, editableContent: true },\n    { title: \"Last\", field: fields[2], width: 150 },\n    { title: \"Net. Chng\", field: fields[3], width: 80 },\n    { title: \"Industry\", field: fields[4] }\n  ],\n  dataModel: {\n    data: records\n  },\n  inCellEditing: {\n    editableTitle: false,\n    editorOpened: onEditorOpened,\n    balloonMode: true\n  },\n  extensions: [\n    extension\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"emerald-grid {\n  height: 200px;\n}","tagName":"pre"}]},{"title":"Column Format Dialog","filename":"widgets/column-format-dialog.html","contents":[{"text":"Column Format Dialog","tagName":"h2"},{"text":"The Column Format Dialog is a user-friendly interface for column display customization. It can format a column's value display from General to Number, Scaled, Percent or Datetime, and so on.","tagName":"p"},{"text":"Features","tagName":"h3"},{"text":"Demo","tagName":"h3"},{"text":"Right-click on each column header to see the dialog.","tagName":"p"},{"text":" Language:\n<select id=\"lang_selector\">\n  <option value=\"en\">English</option>\n  <option value=\"ja\">Japanese</option>\n  <option value=\"de\">German</option>\n  <option value=\"zh\">Simplified Chinese</option>\n  <option value=\"zh-Hant\">Traditional Chinese</option>\n</select>\n<hr>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var columnFormattingExt = new tr.ColumnFormattingExtension();\nvar contextMenuExt = new tr.ContextMenuExtension();\n\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"CF_VOLUME\", \"TR.IPODate\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0] },\n    { title: \"Market\", field: fields[1], width: 100 },\n    { title: \"Last\", field: fields[2], width: 80, alignment: \"right\" },\n    { title: \"Net. Chng\", field: fields[3], width: 80, alignment: \"right\" },\n    { title: \"Volume\", field: fields[4], alignment: \"right\" },\n    { title: \"IPO date\", field: fields[5], width: 100 }\n  ],\n  dataModel: {\n    data: records\n  },\n  contextMenu: {\n    items: {\n      MENU_1: {\n        text: 'Format',\n        callback: function(e) {\n          var lang = document.getElementById(\"lang_selector\").value;\n          columnFormattingExt.openDialog(e.colIndex, {\n            lang: lang\n          });\n        }\n      }\n    },\n    onMenu: function(e) {\n      e.menu.addItem('MENU_1');\n    }\n  },\n  extensions: [\n    columnFormattingExt,\n    contextMenuExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"textarea {\n  width: 100%;\n  height: 100px;\n}\n\nemerald-grid {\n  min-height: 500px;\n}\n\nhtml hr {\n  margin: 5px;\n}","tagName":"pre"},{"text":"For more information about the extension see the Column Formatting Extension page.","tagName":"p"},{"text":"Column Formatting Extension","tagName":"a"},{"text":"Setup guide","tagName":"h3"},{"text":"First, let's import the modules.","tagName":"p"},{"text":"// efx-grid\nimport '@refinitiv-ui/grid';\nimport '@refinitiv-ui/grid/themes/halo/light';\n\n// extensions\nimport {\n  ConditionalColoringExtension,\n  HeatMapExtension,\n  TextFormattingExtension,\n  ColumnFormattingExtension\n } from '@refinitiv-ui/grid/extensions';\n\n// Column Formatting Dialog module\nimport '@refinitiv-ui/grid/column-format-dialog';\nimport '@refinitiv-ui/grid/column-format-dialog/themes/halo/light';","tagName":"pre"},{"text":"Create a new Column Formatting Extension instance and push it to an extensions configuration.","tagName":"p"},{"text":"var cfe = new ColumnFormattingExtension();\n\nvar configObj = {\n  extensions: [\n    cfe,\n    new TextFormattingExtension(),\n    new HeatMapExtension(),\n    new ConditionalColoringExtension()\n  ],\n  columns: columns, // Columns config\n  dataModel: { // Data config\n    fields: fields,\n    data: dataRows\n  },\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"To open the dialog, you need to call openDialog() method on the extension object.","tagName":"p"},{"text":"cfe.openDialog(0); // Change \"0\" to any column index.\n\n// Or open the dialog with specific configuration.\ncfe.openDialog(0, {\n  supportDisplayStyleOptions: {\n    fx: true,\n  },\n  supportValueFormatOptions: {\n    fx: true\n  }\n  supportHighlightApplyToSwitch: true,\n  data: {\n    'fieldList': [{'value': 'col1'}, {'value': 'col2'}, {'value': 'col3'}, {'value': 'col4'}, {'value': 'col5'}],\n    'valueFormatTab': {'formatType': 'general'},\n    'colorTextTab': {'colorText': {'field': 'col2'}},\n    'displayStyleTab': {'general': {'alignment': 'center'}, 'mode': 'general'},\n    'fieldDataType': 'general'\n  },\n  fields: [\"intCol\", \"strCol\", \"boolCol\", \"floatCol\", \"dateCol\"],\n});","tagName":"pre"},{"text":"Changing Language","tagName":"h3"},{"text":"Please follow this Link","tagName":"p"},{"text":"Link","tagName":"a"},{"text":"You can change the language of this component in 2 ways,","tagName":"p"},{"text":"<html lang=\"en\">\n\n</html>","tagName":"pre"},{"text":"var dialog = document.getElementByTagName(\"column-format-dialog\")[0];\ndialog.lang = \"en\";","tagName":"pre"},{"text":"Note: Currently, the following languages are supported: en, ja, de, zh, zh-Hant","tagName":"p"},{"text":"Using with Context Menu Extension","tagName":"h3"},{"text":"Context Menu Extension","tagName":"a"},{"text":"For most cases, you will want the dialog button to appear when the user right-clicks on the column header (known as the context menu).","tagName":"p"},{"text":"To do this, simply import Context Menu extension and its configurations.","tagName":"p"},{"text":"import {\n  ContextMenuExtension,\n  ColumnFormattingExtension,\n  TextFormattingExtension,\n  HeatMapExtension,\n  ConditionalColoringExtension\n} from '@refinitiv-ui/grid/extensions';\n\nvar cfe = new ColumnFormattingExtension();\n\nvar configObj = {\n  extensions: [\n    cfe,\n    new ContextMenuExtension(),\n    new TextFormattingExtension(),\n    new HeatMapExtension(),\n    new ConditionalColoringExtension()\n  ],\n  columns: columns, // Columns config\n  dataModel: { // Data config\n    fields: fields,\n    data: dataRows\n  },\n  contextMenu: {\n    items: {\n      MENU_1: {\n        text: \"Format\",\n        callback: function (e) {\n          // Open the dialog when click on the \"Format\" menu\n          cfe.openDialog(e.colIndex);\n        }\n      },\n    },\n    onMenu: function (e) {\n      e.menu.addItem(\"MENU_1\");\n    }\n  },\n};","tagName":"pre"},{"text":"And that's it!","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Config","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            data                                                    Object                                                                                                                                        Context object indicating current states of the column        ","tagName":"tr"},{"text":"                            supportValueFormatOptions.fx                                                    boolean                                                                                        <optional>                                                                                    Support FxFormat        ","tagName":"tr"},{"text":"                            supportHighlightApplyToSwitch                                                    boolean                                                                                        <optional>                                                                                    support HighlightApplyToSwitch        ","tagName":"tr"},{"text":"                            supportDisplayStyleOptions                                                    Object                                                                                        <optional>                                                                                    Support items in \"Display Style\" dropdown        ","tagName":"tr"},{"text":"                            support                                                    ColumnFormatDialog~SupportDisplayStyleOptions | boolean                                                                                                                                        items in \"Display Style\" dropdown        ","tagName":"tr"},{"text":"ColumnFormatDialog~SupportDisplayStyleOptions","tagName":"a"},{"text":"                            fields                                                    Array.<string>                                                                                        <optional>                                                                                    List of available fields to be shown in the dialog        ","tagName":"tr"},{"text":"                            confirm                                                    function                                                                                        <optional>                                                                                    Confirm event callback        ","tagName":"tr"},{"text":"SupportDisplayStyleOptions","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                        Description    ","tagName":"tr"},{"text":"                            bar                                                    boolean                                                            support 'bar'        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"hide()","tagName":"h4"},{"text":"init(userConfigopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnFormatDialog~Config","tagName":"a"},{"text":"show()","tagName":"h4"},{"text":"updateDataWithAutosuggest(selectedItem, autoSuggest)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"}]},{"title":"Column Selection Dialog","filename":"widgets/column-selection-dialog.html","contents":[{"text":"Column Selection Dialog","tagName":"h2"},{"text":"The Column Selection Dialog is a widget that can be used to manage Grid's columns.","tagName":"p"},{"text":"Features","tagName":"h3"},{"text":"Demo","tagName":"h3"},{"text":"Click on Open Dialog button to see the dialog.","tagName":"p"},{"text":" Language:\n<select id=\"lang_selector\">\n  <option value=\"en\">English</option>\n  <option value=\"ja\">Japanese</option>\n  <option value=\"de\">German</option>\n  <option value=\"zh\">Simplified Chinese</option>\n  <option value=\"zh-Hant\">Traditional Chinese</option>\n</select>\n<ef-button id=\"open_btn\">Open Dialog</ef-button>\n<hr>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\", \"CF_VOLUMN\", \"date\", \"PCTCHNG2\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 6 });\n\nvar allColumns = [\n  { title: \"Company\", field: fields[0], disabled: true },\n  { title: \"Market\", field: fields[1], width: 100 },\n  { title: \"Last\", field: fields[2], width: 80, alignment: \"right\" },\n  { title: \"Net. Chng\", field: fields[3], width: 80, alignment: \"right\" },\n  { title: \"Industry\", field: fields[4] },\n  { title: \"Volumn\", field: fields[5], alignment: \"right\" },\n  { title: \"IPO Date\", field: fields[6] },\n  { title: \"Pct. Chng\", field: fields[7], alignment: \"right\" }\n];\n\nvar configObj = {\n  rowHighlight: true,\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ngrid.columns = [\n  allColumns[0],\n  allColumns[1],\n  allColumns[2],\n  allColumns[3],\n  allColumns[4]\n];\n\nvar dialog = document.createElement(\"column-selection-dialog\");\ndialog.data = allColumns;\ndialog.addEventListener(\"confirm\", function(e) {\n  grid.columns = e.detail.value;\n});\n\ndocument.getElementById(\"open_btn\").addEventListener(\"click\", function() {\n  var lang = document.getElementById(\"lang_selector\").value;\n  dialog.lang = lang;\n  dialog.visibleItems = grid.columns;\n  dialog.show();\n});","tagName":"pre"},{"text":"html hr {\n  margin: 5px;\n}\n\nemerald-grid {\n  height: 450px;\n}","tagName":"pre"},{"text":"Setup guide","tagName":"h3"},{"text":"// efx-grid\nimport '@refinitiv-ui/grid';\nimport '@refinitiv-ui/grid/themes/halo/light';\n\n// Column Selection Dialog module\nimport '@refinitiv-ui/grid/column-selection-dialog';\nimport '@refinitiv-ui/grid/column-selection-dialog/themes/halo/light';","tagName":"pre"},{"text":"Create a column-selection-dialog using the document.createElement method. This way, the column-selection-dialog DOM instance will not be mounted initially.","tagName":"p"},{"text":"var dialog = document.createElement(\"column-selection-dialog\");","tagName":"pre"},{"text":"Then you need to subscribe to confirm event which will be fired when the user has confirmed their changes. It is also required to directly manipulate grid.columns with the e.detail.value like below.","tagName":"p"},{"text":"dialog.addEventListener(\"confirm\", function (e) {\n  var grid = document.getElementById(\"grid\");\n  grid.columns = e.detail.value;\n});","tagName":"pre"},{"text":"By default, once users click Done the dialog will automatically hide. In order to prevent the dialog from closing (eg. Validate something before closing), use beforeConfirm event and set e.cancel to true.","tagName":"p"},{"text":"dialog.addEventListener(\"beforeConfirm\", function (e) {\n  if (/*Some logic*/) {\n    e.cancel = true;\n    window.alert(\"Don't hide the dialog\");\n  }\n});","tagName":"pre"},{"text":"Then set initial data using the init(configObj) method. This takes a configuration object consisting of two properties, data and visibleItems. Alternatively, the same configuration can be set through config property. For example, dialog.config = configObj;","tagName":"p"},{"text":"var columns = [/* Grid Column Option */];\nvar grid = document.getElementsByTagName(\"efx-grid\")[0];\ngrid.config = {/* Grid Option */};\ngrid.columns = columns; // Explicitly set columns, otherwise it will be undefined\n\ndialog.config = {\n  data: columns, // All columns\n  visibleItems: grid.columns // Currently visible columns\n};","tagName":"pre"},{"text":"Note: grid.columns needs to be set explicitly due to limitations of the Grid.","tagName":"p"},{"text":"Finally, to open the dialog you need to call dialog.show() method on dialog element.","tagName":"p"},{"text":"dialog.show();","tagName":"pre"},{"text":"Changing Language","tagName":"h3"},{"text":"Please follow this Link","tagName":"p"},{"text":"Link","tagName":"a"},{"text":"You can change the language of this component in 2 ways,","tagName":"p"},{"text":"<html lang=\"en\">\n\n</html>","tagName":"pre"},{"text":"var dialog = document.createElement(\"column-selection-dialog\");\ndialog.lang = \"en\";","tagName":"pre"},{"text":"Note: Currently, the following languages are supported: en, ja, de, zh, zh-Hant","tagName":"p"},{"text":"Multi Level with Column Selection","tagName":"h3"},{"text":"<ef-button id=\"open_btn\">\n\n  Open Dialog</ef-button>\n<hr>\n<efx-grid id=\"grid\"></efx-grid>","tagName":"pre"},{"text":"var fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"industry\", \"CF_VOLUMN\", \"date\", \"PCTCHNG2\"];\nvar records = DataGenerator.generateRecords(fields, { numRows: 10 });\n\nvar allColumns = [\n  { title: \"Company\", field: fields[0], disabled: true },\n  { title: \"Market\", field: fields[1], width: 100 },\n  { title: \"Last\", field: fields[2], width: 80, alignment: \"right\" },\n  { title: \"Net. Chng\", field: fields[3], width: 80, alignment: \"right\" },\n  { title: \"Industry\", field: fields[4] },\n  { title: \"Volumn\", field: fields[5], alignment: \"right\" },\n  { title: \"IPO Date\", field: fields[6] },\n  { title: \"Pct. Chng\", field: fields[7], alignment: \"right\" }\n];\n\nvar configObj = {\n  rowHighlight: true,\n  dataModel: {\n    data: records\n  }\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;\n\ngrid.columns = [\n  allColumns[0],\n  allColumns[1],\n  allColumns[2],\n  allColumns[3],\n  allColumns[4]\n];\n\nvar columnTree = [\n  allColumns[0],\n  {\n    label: 'Basic Info',\n    items: [\n      allColumns[1],\n      allColumns[4],\n      allColumns[6]\n    ]\n  },\n  {\n    label: 'Trading Info',\n    items: [{\n        label: 'Net.',\n        items: [\n          allColumns[2],\n          allColumns[3],\n          allColumns[5]\n        ]\n      },\n      {\n        label: 'Percent',\n        items: [\n          allColumns[7]\n        ]\n      }\n    ]\n  }\n];\n\nvar dialog = document.createElement(\"column-selection-dialog\");\ndialog.data = columnTree;\ndialog.addEventListener(\"confirm\", function(e) {\n  grid.columns = e.detail.value;\n});\n\ndocument.getElementById(\"open_btn\").addEventListener(\"click\", function() {\n  dialog.visibleItems = grid.columns;\n  dialog.show();\n});","tagName":"pre"},{"text":"html hr {\n  margin: 5px;\n}\n\nefx-grid {\n  height: 450px;\n}","tagName":"pre"},{"text":"Disabled column","tagName":"h3"},{"text":"In case you do not want specific columns to move out of the grid, you can set the flag as disabled for that specific column, as the example below:","tagName":"p"},{"text":"var columns = [/* Grid Column Option */];\nvar grid = document.getElementById(\"grid\");\ngrid.config = {/* Grid Option */};\ngrid.columns = columns; // Explicitly set columns, otherwise it will be undefined\n\ncolumns[1].disabled = true; // To prevent this column from moving between the lists\ndialog.config = {\n  data: columns, // All columns\n  visibleItems: columns// Currently visible columns\n};","tagName":"pre"},{"text":"Hide Columns in Visible Columns","tagName":"h3"},{"text":"There is a use case where you might not want some columns to be moved. You can disable the number of columns in the visible columns using excludedLeftColumns config.","tagName":"p"},{"text":"dialog.config = {\n  // Other dialog config\n  excludedLeftColumns: 2, // This will make 2 of left columns hidden in the Visible Columns.\n  excludedRightColumns: 2, // This will make 2 of right columns hidden in the Visible Columns.\n};","tagName":"pre"},{"text":"Note: availableItems is deprecated.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Config","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            data                                                    Array.<Object>                                                                                                                                        All possible columns for selection.        ","tagName":"tr"},{"text":"                            visibleItems                                                    Array.<Object>                                                                                        <optional>                                                                                    Column list that is in existing Grid.        ","tagName":"tr"},{"text":"                            confirm                                                    function                                                                                        <optional>                                                                                    Confirm event callback.        ","tagName":"tr"},{"text":"                            excludedColumns                                                    number                                                                                        <optional>                                                                                    Deprecated, Alias wigh excludedLeftColumns.        ","tagName":"tr"},{"text":"                            excludedLeftColumns                                                    number                                                                                        <optional>                                                                                    Number of columns on the left side that should be hidden from Visible Columns.        ","tagName":"tr"},{"text":"                            excludedRightColumns                                                    number                                                                                        <optional>                                                                                    Number of columns on the right side that should be hidden from Visible Columns.        ","tagName":"tr"},{"text":"                            unmovableColumns                                                    number                                                                                        <optional>                                                                                    Number of columns that is unmovable in Visible Columns.        ","tagName":"tr"},{"text":"                            descriptionBox                                                    boolean                                                                                        <optional>                                                                                    Show description box        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"hide()","tagName":"h4"},{"text":"init(optionsopt)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"ColumnSelectionDialog~Config","tagName":"a"},{"text":"show()","tagName":"h4"}]},{"title":"Filter Dialog","filename":"widgets/filter-dialog.html","contents":[{"text":"Filter Dialog","tagName":"h2"},{"text":"The Filter Dialog is a user-friendly interface for filtering and sorting.","tagName":"p"},{"text":"Features","tagName":"h3"},{"text":"Demo","tagName":"h3"},{"text":"Right-click on each column header to see the dialog.","tagName":"p"},{"text":" Language:\n<select id=\"lang_selector\">\n    <option value=\"en\">English</option>\n    <option value=\"ja\">Japanese</option>\n    <option value=\"de\">German</option>\n    <option value=\"zh\">Simplified Chinese</option>\n    <option value=\"zh-Hant\">Traditional Chinese</option>\n</select>\n<hr>\n<emerald-grid id=\"grid\"></emerald-grid>","tagName":"pre"},{"text":"var rowFilteringExt = new tr.RowFilteringExtension();\nvar contextMenuExt = new tr.ContextMenuExtension();\n\nvar fields = [\"companyName\", \"market\", \"CF_LAST\", \"CF_NETCHNG\", \"ISODate\"];\nvar records = tr.DataGenerator.generateRecords(fields, { numRows: 10 });\nvar configObj = {\n  rowHighlight: true,\n  columns: [\n    { title: \"Company\", field: fields[0], sortable: true, dataType: 'text' },\n    { title: \"Market\", field: fields[1], width: 100, sortable: true, dataType: 'text' },\n    { title: \"Last\", field: fields[2], width: 100, sortable: true, dataType: 'number' },\n    { title: \"Net. Chng\", field: fields[3], width: 100, sortable: true, dataType: 'number' },\n    { title: \"IPO Date\", field: fields[4], sortable: true, dataType: 'datetime' }\n  ],\n  dataModel: {\n    data: records\n  },\n  contextMenu: {\n    items: {\n      MENU_1: {\n        text: 'Filter',\n        callback: function(e) {\n          var colIndex = e.colIndex;\n          var lang = document.getElementById(\"lang_selector\").value;\n          var options = {\n            sortUI: true, // Show sorting section\n            filterUI: true, // Show filtering section\n            lang: lang,\n            fieldDataType: grid.api.getColumnDataType(colIndex)\n          };\n          rowFilteringExt.openDialog(colIndex, options);\n        }\n      },\n    },\n    onMenu: function(e) {\n      e.menu.addItem('MENU_1');\n    }\n  },\n  extensions: [\n    rowFilteringExt,\n    contextMenuExt\n  ]\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"textarea {\n  width: 100%;\n  height: 100px;\n}\n\nemerald-grid {\n  min-height: 500px;\n}\n\nhtml hr {\n  margin: 5px;\n}","tagName":"pre"},{"text":"Setup guide","tagName":"h3"},{"text":" // efx-grid\nimport '@refinitiv-ui/grid';\nimport '@refinitiv-ui/grid/themes/halo/light';\n\n// extensions\nimport { RowFilteringExtension } from '@refinitiv-ui/grid/extensions';\n\n// Filter Dialog module\nimport '@refinitiv-ui/grid/filter-dialog';\nimport '@refinitiv-ui/grid/filter-dialog/themes/halo/light';  // !Important. Theme must be imported.\n","tagName":"pre"},{"text":"Create a new Row Filtering Extension instance and push it to an extensions configuration.","tagName":"p"},{"text":"var rfe = new RowFilteringExtension();\n\nvar configObj = {\n    extensions: [\n        rfe,\n    ],\n    columns: columns, // Columns config\n    dataModel: { // Data config\n        fields: fields,\n        data: dataRows\n    },\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"To open the dialog, you need to call openDialog() method on the extension object.","tagName":"p"},{"text":"var filterChanged = function(e) {\n    console.log('filterChanged', e.detail);\n}\n\nvar confirm = function(e) {\n    console.log('confirm', e.detail);\n}\n\nvar sortChanged = function(e) {\n    console.log('sortChanged', e.detail);\n}\nrfe.openDialog(0); // Change \"0\" to any column index.","tagName":"pre"},{"text":"Changing Language","tagName":"h3"},{"text":"Please follow this Link","tagName":"p"},{"text":"Link","tagName":"a"},{"text":"You can change the language of this component in 2 ways,","tagName":"p"},{"text":"<html lang=\"en\">\n\n</html>","tagName":"pre"},{"text":"var dialog = document.getElementByTagName(\"filter-dialog\")[0];\ndialog.lang = \"en\";","tagName":"pre"},{"text":"Note: Currently, the following languages are supported: en, ja, de, zh, zh-Hant","tagName":"p"},{"text":"Using with the Context Menu Extension","tagName":"h2"},{"text":"Context Menu Extension","tagName":"a"},{"text":"For most cases, you will want the dialog button to appear when the user right-clicks on the column header (known as the context menu).","tagName":"p"},{"text":"To do this simply import the Context Menu extension and its configurations.","tagName":"p"},{"text":"import {\n  ContextMenuExtension,\n  RowFilteringExtension\n} from '@refinitiv-ui/grid/extensions';\n\nvar rfe = new RowFilteringExtension();\n\nvar configObj = {\n    extensions: [\n        rfe,\n        new ContextMenuExtension(),\n    ],\n    columns: columns, // Columns config\n    dataModel: { // Data config\n        fields: fields,\n        data: dataRows\n    },\n    contextMenu: {\n        items: {\n            MENU_1: {\n                text: \"Format\",\n                callback: function (e) {\n                    // Open the dialog when click on the \"Format\" menu\n                    rfe.openDialog(e.colIndex);\n                }\n            },\n        },\n        onMenu: function (e) {\n                e.menu.addItem(\"MENU_1\");\n        }\n    },\n};\n\nvar grid = document.getElementById(\"grid\");\ngrid.config = configObj;","tagName":"pre"},{"text":"And that's it!","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Type Definitions","tagName":"h3"},{"text":"Config","tagName":"h4"},{"text":"Type:","tagName":"h5"},{"text":"Properties:","tagName":"h5"},{"text":"                Name                Type                Attributes                        Description    ","tagName":"tr"},{"text":"                            data                                                    Object                                                                                                                                        Column data        ","tagName":"tr"},{"text":"                            sortState                                                    string                                                                                        <optional>                                                                                    \"a\" for ascending or \"d\" for descending        ","tagName":"tr"},{"text":"                            sortUI                                                    boolean                                                                                        <optional>                                                                                    Show Sort area        ","tagName":"tr"},{"text":"                            filterUI                                                    boolean                                                                                        <optional>                                                                                    Show Filter area        ","tagName":"tr"},{"text":"                            filterChanged                                                    function                                                                                        <optional>                                                                                    Filter changed handler        ","tagName":"tr"},{"text":"                            confirm                                                    function                                                                                        <optional>                                                                                    Alias of filterChanged        ","tagName":"tr"},{"text":"                            sortChanged                                                    function                                                                                        <optional>                                                                                    Sort changed handler        ","tagName":"tr"},{"text":"Methods","tagName":"h3"},{"text":"hide()","tagName":"h4"},{"text":"hideSortUI(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"init(options)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"FilterDialog~Config","tagName":"a"},{"text":"setSortState(val)","tagName":"h4"},{"text":"Parameters:","tagName":"h5"},{"text":"show()","tagName":"h4"}]},{"title":"Using Core APIs","filename":"misc/core-apis.html","contents":[]},{"title":"Realtime Market Data","filename":"misc/real-time-market-data.html","contents":[{"text":"This section has been moved here.","tagName":"p"},{"text":"here","tagName":"a"}]}]