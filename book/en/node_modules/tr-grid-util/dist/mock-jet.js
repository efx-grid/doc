/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Util; });
/* unused harmony export extendObject */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cloneObject; });
/* unused harmony export arrayToObject */
/* unused harmony export extendProperty */
/* unused harmony export extendArrayProperty */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return parseCondition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return prettifyCss; });
/* unused harmony export getShadowRoot */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return injectCss; });
/* unused harmony export isIE */
/* unused harmony export isMac */
/* unused harmony export isTouchDevice */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return nestedObjectToArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return rgb2Hex; });
/* unused harmony export prepareTSVContent */
/** @namespace */
var Util = {};

/** This is a shorthand for fetch() API by POST method and with json body <br>
* WARNING: fetch is not supported in IE (including IE11)
* @public
* @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch}
* @function
* @param {string} url
* @param {Object|string} obj
* @return {!Promise<Response>}
*/
Util.post = function(url, obj) { // Not supported in IE
	return Util._post(url, obj).then(Util.toJSON);
};
/** Request a server response from server as text by POST method <br>
* WARNING: fetch is not supported in IE (including IE11)
* @public
* @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch}
* @function
* @param {string} url
* @param {Object|string} obj
* @return {!Promise<Response>}
*/
Util.requestText = function(url, obj) { // Not supported in IE
	return Util._post(url, obj, "text/plain").then(Util.toText);
};
/** Request a server response from server by POST method and with url-encoded body <br>
* WARNING: fetch is not supported in IE (including IE11)
* @public
* @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch}
* @function
* @param {string} url
* @param {string} obj
* @return {!Promise<Response>}
*/
Util.requestByUrlEncoded = function(url, obj) { // Not supported in IE
	return Util._post(url, obj, "application/x-www-form-urlencoded").then(Util.toJSON);
};

/** @public
* @function
* @param {Response} resp
* @return {!Promise<Object>}
*/
Util.toJSON = function (resp) {
	if(Util._logError(resp)) {
		return Promise.reject(resp);
	}
	return resp.json();
};
/** @public
* @function
* @param {Response} resp
* @return {!Promise<string>}
*/
Util.toText = function (resp) {
	if(Util._logError(resp)) {
		return Promise.reject(resp);
	}
	return resp.text();
};

/** @private
* @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}
* @function
* @param {Response} resp
* @return {boolean}
*/
Util._logError = function(resp) {
	if(resp && resp.status >= 300) {
		console.log("Response " + resp.status + ": " + resp.statusText);
		return true;
	}
	return false;
};
/** @private
* @function
* @param {string} url
* @param {Object|string} obj
* @param {string=} contentType
* @return {!Promise<Response>}
*/
Util._post = function(url, obj, contentType) {
	var options = {
		method: obj ? "POST" : "GET",
		headers: { "Content-Type": contentType || "application/json" }
	};
	if(obj) {
		options.body = typeof obj === "string" ? obj : JSON.stringify(obj);
	}

	return fetch(url, options);
};

/** WARNING: Only one level of property tree is affected (i.e. no recursive or nested operation). <br>
* Property with undefined or null value will not have an impact on the object. <br>
* Existing properties will be overridden.
* @public
* @function
* @param {Object} obj Object that is extended (new properties will be added to this object)
* @param {Object=} extender Master object (no modification will be made on the extender)
* @param {Array.<string>=} limiters Specify property to be extended
* @return {Object}
*/
var extendObject = function (obj, extender, limiters) {
	if(!obj) { // null undefined NaN empty string and 0
		return null;
	}
	if(!extender || obj === extender) {
		return obj;
	}

	var key;
	if(limiters) {
		var len = limiters.length;
		for(var i = 0; i < len; ++i) {
			key = limiters[i];
			if(key) {
				extendProperty(obj, extender, key);
			}
		}
	} else {
		for(key in extender) {
			extendProperty(obj, extender, key);
		}
	}
	return obj;
};
/** WARNING: Only one level of property tree is affected (i.e. no recursive or nested operation). <br>
* Property with undefined or null value will not be cloned.
* @public
* @function
* @param {Object} obj
* @param {Array.<string>=} limiters
* @return {Object}
*/
var cloneObject = function (obj, limiters) {
	return extendObject({}, obj, limiters);
};
/** @public
* @param {Array=} data
* @param {Array.<string>=} fields In case of the given data is an array, this param will be used for mapping index to field
* @return {Object|null}
*/
var arrayToObject = function(data, fields) {
	if(!Array.isArray(data)) {
		return data;
	} else if(!fields) {
		return null;
	}
	var ary = data;
	data = {};
	var len = ary.length;
	for(var i = 0; i < len; ++i) {
		var field = fields[i];
		// eslint-disable-next-line no-undefined
		if(field && ary[i] !== undefined) {
			data[field] = ary[i];
		}
	}
	return data;
};
/** Replace the specified property with the value from the extender. If the value is an array, the value will be added to the array instead of replacement
* @public
* @function
* @param {Object} obj
* @param {Object} extender
* @param {string} propName
* @example
* extendProperty({a: 0}, {a: 1}, "a"); // {a: 1}
* extendProperty({a: 0}, {b: 1}, "b"); // {a: 0, b: 1}
* extendProperty({a: [0]}, {a: 1}, "a"); // {a: [0, 1]}
* extendProperty({a: [0]}, {a: [1, 2]}, "a"); // {a: [0, 1, 2]}
*/
var extendProperty = function (obj, extender, propName) {
	var val = extender[propName];
	if(val != null) {
		var objVal = obj[propName];
		if(Array.isArray(objVal)) {
			obj[propName] = objVal.concat(val);
		} else if(Array.isArray(val) && objVal) {
			obj[propName] = val.concat(objVal); // TODO: Preserve the order
		} else {
			obj[propName] = val; // WARNING: Overriding existing data
		}
	}
};
/** Array.push() is much faster than Array.concat(). The downside is the parameters must be an array, whereas concat() has no such requirement. <br>
* This method excels in extending known array property in an object.
* @public
* @function
* @param {Object} obj
* @param {string} propName
* @param {*} ary
* @return {Array} Returns the result of the extended array
* @see {@link https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki}
* @example
* var obj = {};
* extendArrayProperty(obj, "prop1", 1); // [1]
* extendArrayProperty(obj, "prop1", 2); // [1, 2]
* extendArrayProperty(obj, "prop1", [3, 4]); // [1, 2, 3, 4]
* obj.prop2 = 5;
* extendArrayProperty(obj, "prop2", 6); // [5, 6]
* extendArrayProperty(obj, "prop2", [7]); // [5, 6, 7]
* extendArrayProperty(obj, "prop2", null); // null
*/
var extendArrayProperty = function (obj, propName, ary) {
	var objAry = null;
	if(ary) {
		var objVal = obj[propName];
		if(objVal) {
			if(Array.isArray(objVal)) {
				objAry = objVal;
			} else {
				objAry = obj[propName] = [objVal];
			}
		} else {
			objAry = obj[propName] = [];
		}
		// objAry is guaranteed to be an array at this point

		if(Array.isArray(ary)) {
			if(ary.length) {
				if(ary.length > 1) {
					Array.prototype.push.apply(objAry, ary);
				} else {
					objAry.push(ary[0]);
				}
			}
		} else {
			objAry.push(ary);
		}
	}
	return objAry;
};


/** Regex for matching the field token E.g. '[CF_BID]'
* @type {!RegExp}
* @private
* @const
*/
var _bracketExp = new RegExp(/\[[^\[]*\]/g); // eslint-disable-line no-useless-escape
/** @public
* @function
* @param {string|Function} expression
* @return {Function}
* @example
* var fn = parseCondition("[CF_BID] >= 10 && [CF_BID] <= 100");
* window.console.log(fn(25));
*/
var parseCondition = function(expression) {
	if(!expression) {
		return null;
	}
	if(typeof expression !== "string") {
		return (typeof expression == "function") ? /** @type {Function} */(expression) : null;
	}

	var brackets = expression.match(_bracketExp); // Retrieving field tokens (anything in between brackets)
	var map = {}; // For checking duplication
	var fields = [];
	var len = brackets ? brackets.length : 0;
	for(var i = len; --i >= 0;) {
		var field = brackets[i];
		if(!map[field]) {
			map[field] = "f[" + fields.length + "]"; // Create mapping of field token to array with index E.g. { "[CF_BID]": "f[0]" }
			fields.push(field.substring(1, field.length - 1)); // Strip '[' and ']' of field token to get field name
		}
	}

	// Replace the field tokens with rowData of array with index E.g. [CF_BID] ==> rowData[f[0]]
	expression = expression.replace(_bracketExp, function(match) {
		return "rowData[" + map[match] + "]";
	});
	var finalExp = "(function(f, rowData) { return (" + expression + "); })";

	var fn = null;
	try {
		fn = eval(finalExp);
		fn = fn.bind(null, fields); // Bind fields for matching field name
	} catch(err) {
		console.log(err.message);
	}
	return (fn) ? fn : null;
};


/** @private
* @param {string|Array.<string>} item
* @return {string}
*/
var _encloseBracket = function(item) {
	return Array.isArray(item) ? "{\n" + item.join("\n") + "\n}" : item;
};
/** @private
* @param {string} str
* @return {string}
*/
var _indentBracketContent = function(str){
	return str.replace(/\n+/g, "\n\t").replace(/\n\t}$/, "\n}");
};
/** @public
* @param {string|Array} css
* @return {string} prettified CSS string
* @example
* prettifyCss(["div", [
*   "color: red;",
*   "padding: 20px;"
* ],
* ".class", [
*   "margin: 0;"
* ]
* ]);
*/
var prettifyCss = function(css) {
	if(css) {
		var cssStr = "";
		if (Array.isArray(css)) {
			var ary = css.map(_encloseBracket);
			cssStr = ary.join("\n").replace(/{\s*{/g, "{").replace(/\s+{/g, " {");
		} else {
			cssStr = (typeof css === "string") ? css : css + "";
		}

		if(cssStr) {
			return cssStr.replace(/{[\w\W]*?}/g, _indentBracketContent);
		}
	}
	return "";
};
/** Get shadow root of the given element regardless of whether the element is in the DOM or not. The immediate shadow root parent is returned in case of nested shadow roots. Any other case return null.
* @public
* @param {Element} elem
* @return {DocumentFragment}
*/
var getShadowRoot = function(elem) {
	if(elem) {
		var rootNode;
		if(elem.shadowRoot) {
			rootNode = elem.shadowRoot;
		} else if(elem.getRootNode) {
			rootNode = elem.getRootNode();
		}
		if(rootNode) { // getRootNode does not supported in IE. It should be implemented by the polyfills
			if(rootNode !== document) { // element that is in the DOM and not in the shadow has document as its root node
				if(rootNode !== elem) { // element that is NOT in the DOM and not in the shadow has itself as its root node
					return rootNode;
				}
			}
		}
	}
	return null;
};
/** Attach style tag to the proper document (in case of element inside a shadow root)
* @public
* @param {string} cssStr Valid CSS string (e.g. "div {color: red;}")
* @param {Element=} targetContext Element that needs the CSS
* @return {Element} New style tag
*/
var injectCss = function(cssStr, targetContext) {
	if(!cssStr) {
		return null;
	}

	var styleTag = document.createElement("style");
	styleTag.textContent = "\n" + cssStr + "\n";

	var styleHost = getShadowRoot(targetContext);
	var isInShadow = true;
	if(!styleHost) {
		isInShadow = false;
		styleHost = document.head;
	}

	// Find a place to insert the style tag
	var beforeElem;
	if(isInShadow) {
		if(styleHost.children && styleHost.children.length) {
			beforeElem = styleHost.children[0];
		}
	}
	if(beforeElem) {
		styleHost.insertBefore(styleTag, beforeElem);
	} else {
		styleHost.appendChild(styleTag);
	}
	return styleTag;
};

/** return true if browser is IE or Edge
* @public
* @return {boolean}
*/
var isIE = function () {
	var ua = window.navigator.userAgent;
	return (ua.indexOf('MSIE ') > 0) || (ua.indexOf('Trident/') > 0) || (ua.indexOf('Edge/') > 0);
};

/** return true if device is mac
* @public
* @return {boolean}
*/
var isMac = function () {
	return /Mac/.test(navigator.platform);
};

/** Return true if device is mac
* @public
* @return {boolean}
*/
var isTouchDevice = function () {
	if ((navigator["maxTouchPoints"] && navigator["maxTouchPoints"] < 256) ||
		(navigator["msMaxTouchPoints"] && navigator["msMaxTouchPoints"] < 256)) {
		return true;
	}
	return false;
};

/** parse nested object in to array
* @public
* @param {Object} obj
* @param {Array=} ary
* @return {Array}
*/
var nestedObjectToArray = function (obj, ary) {
	if (!ary) {
		ary = [];
	}
	for (var key in obj) {
		var element = obj[key];
		if ('object' === typeof element) {
			nestedObjectToArray(element, ary);
		} else {
			ary.push(element);
		}
	}
	return ary;
};

/** Convert CSS rgb or rgba formats to CSS hex color string (# prefix)
* @public
* @param {string} rgbCode
* @return {string}
* @example
* rgb2Hex("rgb(255, 255, 0)"); // "#FFFF00"
* rgb2Hex("rgba(255, 255, 0, 1)"); // "#FFFF00"
* rgb2Hex("255 255.0"); // "#FFFF00"
* rgb2Hex("#FFFF00"); // "#FFFF00"
* rgb2Hex("#1a1a1a"); // "#1a1a1a"
* rgb2Hex("2552550"); // "2552550"
* rgb2Hex("invalid"); // "invalid"
* rgb2Hex(null); // ""
*/
var rgb2Hex = function (rgbCode) {
	if(!rgbCode || typeof rgbCode !== "string") {
		return "";
	}
	if(rgbCode.charAt(0) === "#") {
		return rgbCode;
	}
	var rgb = rgbCode.match(/\d+/g);
	if(!rgb || rgb.length < 3) {
		return rgbCode;
	}

	var hex = "#";
	for(var i = 0; i < 3; i++) {
		var num = +rgb[i];
		if(!(num >= 16)) { // Handle NaN case
			hex += "0";
		}
		hex += (num) ? num.toString(16).toUpperCase() : "0";
	}
	return hex;
};

/** transform data to tab seperated value
* @public
* @param {*} data
* @return {string}
*/
var prepareTSVContent = function (data) {
	if (data == null) {
		return "";
	}

	var content = (typeof data === 'string') ? data : data.toString();

	if (!content.length) { return ""; }

	// Replace any new line and tab
	if (content.indexOf("\n") >= 0) {
		content = content.replace(/[\r\n]/g, " ");
	}

	if (content.indexOf("\t") >= 0) {
		content = content.replace(/\t/g, " ");
	}

	// Trim front and back spaces
	if (content.charAt(0) === " " || content.charAt(content.length - 1) === " ") {
		content = content.trim();
	}

	return content;
};

/* unused harmony default export */ var _unused_webpack_default_export = (Util);



/***/ }),
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "MockJET", function() { return /* reexport */ MockJET; });
__webpack_require__.d(__webpack_exports__, "DataGenerator", function() { return /* reexport */ DataGenerator; });
__webpack_require__.d(__webpack_exports__, "MockRTK", function() { return /* reexport */ MockRTK; });

// CONCATENATED MODULE: ./src/jet/DataSet.js
/**
* @namespace
*/
var DataSet = {};

DataSet.texts = [
	"If a dog and cat had a baby together that grew up and worked a desk job he'd be a Cog in the machine",
	"I'm still upset that Tie Domi didn't name his child Tyson",
	"A tagline for a car company that prides itself on its morals and ethics: Take the High Road",
	"Logan Broger is amazing and a wonderful boy according to Logan's mom",
	"You know the Grammys are a joke when Future doesn't win Best Everything",
	"If you were a member of the Bloods and became paralyzed do you then become a member of the Crips?",
	"Curling is the best sport named after something you do to your hair",
	"You say potatoe, I say starchy carbs",
	"If you work for an ad agency and getting paid for it aren't you the one who is being influenced by advertising?",
	"Are there Out of Stock photos? Gafuffle",
	"I think of a lot of good ideas when going to the bathroom I guess I have a real stream of consciousness",
	"Most streets are two way streets",
	"Why does that make love so special?",
	"A tagline for an airline: Take the High Road",
	"Rumour has it targeted online advertising was developed because the internet was upset that you could read it but it couldn't read you",
	"This is a true fact: I never had a fear of heights until I fell off a roof",
	"A tagline for a special highway that is easy to navigate while under the influence of drugs: Take the High Road",
	"I'm the only person in the world with my name",
	"We need more werkin and less twerkin if you ask me",
	"If Fantasy Hockey actually lived up to its name, every team would have Henrik Lundqvist and Joffrey Lupul on it",
	"I'm in a band that does Metallica covers with our private parts it's called Myphallica",
	"Smiling could easily be misinterpreted for showing your teeth to someone because they said something that made you happy",
	"We say we are walking the dog, but the dog always leads",
	"Tim Horton was a hockey player but is the name of a coffee chain, which means my dream of a goat sanctuary being my legacy is not unrealistic",
	"I started a sensory deprivation chamber business it involves really dark curtains, ear plugs, and a sleeping mask",
	"Do we make money or does money make us? Chezwich",
	"Pantone is a colour but also the singular version of pants",
	"Logan Ipsum will loop at some point",
	"Thank you for using my words in your work",
	"You should listen to my mixtape (check out the rest of my portfolio)",
	"I have never known a Jack that was in good enough shape to name bodybuilding after him",
	"Twitter is the rice of social media",
	"Injuries always keep you OUT of things",
	"For the name of an act as serious as killing someone, assassination literally translates to buttbuttination",
	"Why don't we call glasses duocles",
	"If you wake up with a giant zit, you are really facing your fears when you look in the mirror",
	"Cemeteries are just garbage dumps filled with humans",
	"I have a moral code, but I haven't figured out how to read it yet",
	"I bet most serial killers play the drums",
	"To Catch A Predator would have been a great name for a Steve Irwin show",
	"If the word kerning is kerned poorly, it kind of looks like learning which is appropriate because both are important",
	"North America should be called Russia since people are always moving so fast",
	"I don't need a big house, just a two floor condo you could say I have lofty expectations",
	"Even faithful and simple Sancho is forced to deceive him at certain points",
	"The novel is considered a satire of orthodoxy, veracity and even nationalism",
	"In exploring the individualism of his characters, Cervantes helped move beyond the narrow literary conventions of the chivalric romance literature that he spoofed",
	"which consists of straightforward retelling of a series of acts that redound to the knightly virtues of the hero",
	"The character of Don Quixote became so well known in its time that the word quixotic was quickly adopted by many languages",
	"Characters such as Sancho Panza and Don Quixote's steed, Rocinante, are emblems of Western literary culture",
	"It stands in a unique position between medieval chivalric romance and the modern novel",
	"The former consist of disconnected stories featuring the same characters and settings with little exploration of the inner life of even the main character"
];

DataSet.words = DataSet.texts.join(" ").split(" ").filter(function(w) { return w.length > 1; });

DataSet.companyName = [
	"Yost-Prohaska",
	"Wehner, Howe and Brown",
	"Gusikowski-Legros",
	"Wolff-Windler",
	"McGlynn, Douglas and Kilback",
	"MacGyver Group",
	"Spinka, Stracke and Huel",
	"Howell, Wolff and Emmerich",
	"Blick-O'Reilly",
	"Dibbert, Buckridge and Leffler",
	"Skiles, Kuhlman and Johns",
	"Daugherty Group",
	"Reilly, Toy and Bayer",
	"Bradtke, Mohr and Weber",
	"Thompson, Bruen and Friesen",
	"Rempel-Bednar",
	"Kunze LLC",
	"Pfannerstill Group",
	"Moen-Larkin",
	"Larson LLC",
	"Haag-Feest",
	"Hauck-Bartell",
	"Rohan-Kohler",
	"Waters, Homenick and Pagac",
	"Ziemann Group",
	"Reynolds, Turcotte and Bosco",
	"Graham, Morar and Waters",
	"Cassin Inc",
	"Bosco-Terry",
	"Stanton-Blick",
	"Prohaska and Sons",
	"Pouros, Daugherty and Pfannerstill",
	"Bogan-Cormier",
	"O'Kon-Mills",
	"Mueller-Schmeler",
	"Runte-Trantow",
	"Muller Inc",
	"Shanahan, Ryan and Orn",
	"Huel LLC",
	"Shanahan-Zulauf",
	"Emard-Schuster",
	"Muller Inc",
	"Collier, Muller and Yundt",
	"Wehner, Prohaska and Harber",
	"Ondricka-Stehr",
	"Towne LLC",
	"Feil Inc",
	"Braun, Kihn and Treutel",
	"Ebert-MacGyver",
	"Harris LLC"
];

DataSet.industry = [
	"Specialty Chemicals",
	"Office Equipment/Supplies/Services",
	"Electric Utilities: Central",
	"Trucking Freight/Courier Services",
	"Auto Parts:O.E.M.",
	"Oil Refining/Marketing",
	"Biotechnology: Biological Products (No Diagnostic Substances)",
	"Computer Software: Programming, Data Processing",
	"Farming/Seeds/Milling",
	"Biotechnology: Laboratory Analytical Instruments",
	"Finance: Consumer Services",
	"Major Banks",
	"Investment Managers",
	"Oilfield Services/Equipment",
	"Paper",
	"Transportation Services"
];

DataSet.market = [
	"NYSE",
	"NASDAQ",
	"SET",
	"DJI",
	"HSCEI",
	"HKEX",
	"NIKKEI"
];

DataSet.country = [
	{"name": "Afghanistan", "code": "AF"},
	{"name": "land Islands", "code": "AX"},
	{"name": "Albania", "code": "AL"},
	{"name": "Algeria", "code": "DZ"},
	{"name": "American Samoa", "code": "AS"},
	{"name": "AndorrA", "code": "AD"},
	{"name": "Angola", "code": "AO"},
	{"name": "Anguilla", "code": "AI"},
	{"name": "Antarctica", "code": "AQ"},
	{"name": "Antigua and Barbuda", "code": "AG"},
	{"name": "Argentina", "code": "AR"},
	{"name": "Armenia", "code": "AM"},
	{"name": "Aruba", "code": "AW"},
	{"name": "Australia", "code": "AU"},
	{"name": "Austria", "code": "AT"},
	{"name": "Azerbaijan", "code": "AZ"},
	{"name": "Bahamas", "code": "BS"},
	{"name": "Bahrain", "code": "BH"},
	{"name": "Bangladesh", "code": "BD"},
	{"name": "Barbados", "code": "BB"},
	{"name": "Belarus", "code": "BY"},
	{"name": "Belgium", "code": "BE"},
	{"name": "Belize", "code": "BZ"},
	{"name": "Benin", "code": "BJ"},
	{"name": "Bermuda", "code": "BM"},
	{"name": "Bhutan", "code": "BT"},
	{"name": "Bolivia", "code": "BO"},
	{"name": "Bosnia and Herzegovina", "code": "BA"},
	{"name": "Botswana", "code": "BW"},
	{"name": "Bouvet Island", "code": "BV"},
	{"name": "Brazil", "code": "BR"},
	{"name": "British Indian Ocean Territory", "code": "IO"},
	{"name": "Brunei Darussalam", "code": "BN"},
	{"name": "Bulgaria", "code": "BG"},
	{"name": "Burkina Faso", "code": "BF"},
	{"name": "Burundi", "code": "BI"},
	{"name": "Cambodia", "code": "KH"},
	{"name": "Cameroon", "code": "CM"},
	{"name": "Canada", "code": "CA"},
	{"name": "Cape Verde", "code": "CV"},
	{"name": "Cayman Islands", "code": "KY"},
	{"name": "Central African Republic", "code": "CF"},
	{"name": "Chad", "code": "TD"},
	{"name": "Chile", "code": "CL"},
	{"name": "China", "code": "CN"},
	{"name": "Christmas Island", "code": "CX"},
	{"name": "Cocos (Keeling) Islands", "code": "CC"},
	{"name": "Colombia", "code": "CO"},
	{"name": "Comoros", "code": "KM"},
	{"name": "Congo", "code": "CG"},
	{"name": "Congo, The Democratic Republic of the", "code": "CD"},
	{"name": "Cook Islands", "code": "CK"},
	{"name": "Costa Rica", "code": "CR"},
	{"name": "Cote D'Ivoire", "code": "CI"},
	{"name": "Croatia", "code": "HR"},
	{"name": "Cuba", "code": "CU"},
	{"name": "Cyprus", "code": "CY"},
	{"name": "Czech Republic", "code": "CZ"},
	{"name": "Denmark", "code": "DK"},
	{"name": "Djibouti", "code": "DJ"},
	{"name": "Dominica", "code": "DM"},
	{"name": "Dominican Republic", "code": "DO"},
	{"name": "Ecuador", "code": "EC"},
	{"name": "Egypt", "code": "EG"},
	{"name": "El Salvador", "code": "SV"},
	{"name": "Equatorial Guinea", "code": "GQ"},
	{"name": "Eritrea", "code": "ER"},
	{"name": "Estonia", "code": "EE"},
	{"name": "Ethiopia", "code": "ET"},
	{"name": "Falkland Islands (Malvinas)", "code": "FK"},
	{"name": "Faroe Islands", "code": "FO"},
	{"name": "Fiji", "code": "FJ"},
	{"name": "Finland", "code": "FI"},
	{"name": "France", "code": "FR"},
	{"name": "French Guiana", "code": "GF"},
	{"name": "French Polynesia", "code": "PF"},
	{"name": "French Southern Territories", "code": "TF"},
	{"name": "Gabon", "code": "GA"},
	{"name": "Gambia", "code": "GM"},
	{"name": "Georgia", "code": "GE"},
	{"name": "Germany", "code": "DE"},
	{"name": "Ghana", "code": "GH"},
	{"name": "Gibraltar", "code": "GI"},
	{"name": "Greece", "code": "GR"},
	{"name": "Greenland", "code": "GL"},
	{"name": "Grenada", "code": "GD"},
	{"name": "Guadeloupe", "code": "GP"},
	{"name": "Guam", "code": "GU"},
	{"name": "Guatemala", "code": "GT"},
	{"name": "Guernsey", "code": "GG"},
	{"name": "Guinea", "code": "GN"},
	{"name": "Guinea-Bissau", "code": "GW"},
	{"name": "Guyana", "code": "GY"},
	{"name": "Haiti", "code": "HT"},
	{"name": "Heard Island and Mcdonald Islands", "code": "HM"},
	{"name": "Holy See (Vatican City State)", "code": "VA"},
	{"name": "Honduras", "code": "HN"},
	{"name": "Hong Kong", "code": "HK"},
	{"name": "Hungary", "code": "HU"},
	{"name": "Iceland", "code": "IS"},
	{"name": "India", "code": "IN"},
	{"name": "Indonesia", "code": "ID"},
	{"name": "Iran, Islamic Republic Of", "code": "IR"},
	{"name": "Iraq", "code": "IQ"},
	{"name": "Ireland", "code": "IE"},
	{"name": "Isle of Man", "code": "IM"},
	{"name": "Israel", "code": "IL"},
	{"name": "Italy", "code": "IT"},
	{"name": "Jamaica", "code": "JM"},
	{"name": "Japan", "code": "JP"},
	{"name": "Jersey", "code": "JE"},
	{"name": "Jordan", "code": "JO"},
	{"name": "Kazakhstan", "code": "KZ"},
	{"name": "Kenya", "code": "KE"},
	{"name": "Kiribati", "code": "KI"},
	{"name": "Korea, Democratic People'S Republic of", "code": "KP"},
	{"name": "Korea, Republic of", "code": "KR"},
	{"name": "Kuwait", "code": "KW"},
	{"name": "Kyrgyzstan", "code": "KG"},
	{"name": "Lao People'S Democratic Republic", "code": "LA"},
	{"name": "Latvia", "code": "LV"},
	{"name": "Lebanon", "code": "LB"},
	{"name": "Lesotho", "code": "LS"},
	{"name": "Liberia", "code": "LR"},
	{"name": "Libyan Arab Jamahiriya", "code": "LY"},
	{"name": "Liechtenstein", "code": "LI"},
	{"name": "Lithuania", "code": "LT"},
	{"name": "Luxembourg", "code": "LU"},
	{"name": "Macao", "code": "MO"},
	{"name": "Macedonia, The Former Yugoslav Republic of", "code": "MK"},
	{"name": "Madagascar", "code": "MG"},
	{"name": "Malawi", "code": "MW"},
	{"name": "Malaysia", "code": "MY"},
	{"name": "Maldives", "code": "MV"},
	{"name": "Mali", "code": "ML"},
	{"name": "Malta", "code": "MT"},
	{"name": "Marshall Islands", "code": "MH"},
	{"name": "Martinique", "code": "MQ"},
	{"name": "Mauritania", "code": "MR"},
	{"name": "Mauritius", "code": "MU"},
	{"name": "Mayotte", "code": "YT"},
	{"name": "Mexico", "code": "MX"},
	{"name": "Micronesia, Federated States of", "code": "FM"},
	{"name": "Moldova, Republic of", "code": "MD"},
	{"name": "Monaco", "code": "MC"},
	{"name": "Mongolia", "code": "MN"},
	{"name": "Montenegro", "code": "ME"},
	{"name": "Montserrat", "code": "MS"},
	{"name": "Morocco", "code": "MA"},
	{"name": "Mozambique", "code": "MZ"},
	{"name": "Myanmar", "code": "MM"},
	{"name": "Namibia", "code": "NA"},
	{"name": "Nauru", "code": "NR"},
	{"name": "Nepal", "code": "NP"},
	{"name": "Netherlands", "code": "NL"},
	{"name": "Netherlands Antilles", "code": "AN"},
	{"name": "New Caledonia", "code": "NC"},
	{"name": "New Zealand", "code": "NZ"},
	{"name": "Nicaragua", "code": "NI"},
	{"name": "Niger", "code": "NE"},
	{"name": "Nigeria", "code": "NG"},
	{"name": "Niue", "code": "NU"},
	{"name": "Norfolk Island", "code": "NF"},
	{"name": "Northern Mariana Islands", "code": "MP"},
	{"name": "Norway", "code": "NO"},
	{"name": "Oman", "code": "OM"},
	{"name": "Pakistan", "code": "PK"},
	{"name": "Palau", "code": "PW"},
	{"name": "Palestinian Territory, Occupied", "code": "PS"},
	{"name": "Panama", "code": "PA"},
	{"name": "Papua New Guinea", "code": "PG"},
	{"name": "Paraguay", "code": "PY"},
	{"name": "Peru", "code": "PE"},
	{"name": "Philippines", "code": "PH"},
	{"name": "Pitcairn", "code": "PN"},
	{"name": "Poland", "code": "PL"},
	{"name": "Portugal", "code": "PT"},
	{"name": "Puerto Rico", "code": "PR"},
	{"name": "Qatar", "code": "QA"},
	{"name": "Reunion", "code": "RE"},
	{"name": "Romania", "code": "RO"},
	{"name": "Russian Federation", "code": "RU"},
	{"name": "RWANDA", "code": "RW"},
	{"name": "Saint Helena", "code": "SH"},
	{"name": "Saint Kitts and Nevis", "code": "KN"},
	{"name": "Saint Lucia", "code": "LC"},
	{"name": "Saint Pierre and Miquelon", "code": "PM"},
	{"name": "Saint Vincent and the Grenadines", "code": "VC"},
	{"name": "Samoa", "code": "WS"},
	{"name": "San Marino", "code": "SM"},
	{"name": "Sao Tome and Principe", "code": "ST"},
	{"name": "Saudi Arabia", "code": "SA"},
	{"name": "Senegal", "code": "SN"},
	{"name": "Serbia", "code": "RS"},
	{"name": "Seychelles", "code": "SC"},
	{"name": "Sierra Leone", "code": "SL"},
	{"name": "Singapore", "code": "SG"},
	{"name": "Slovakia", "code": "SK"},
	{"name": "Slovenia", "code": "SI"},
	{"name": "Solomon Islands", "code": "SB"},
	{"name": "Somalia", "code": "SO"},
	{"name": "South Africa", "code": "ZA"},
	{"name": "South Georgia and the South Sandwich Islands", "code": "GS"},
	{"name": "Spain", "code": "ES"},
	{"name": "Sri Lanka", "code": "LK"},
	{"name": "Sudan", "code": "SD"},
	{"name": "Suriname", "code": "SR"},
	{"name": "Svalbard and Jan Mayen", "code": "SJ"},
	{"name": "Swaziland", "code": "SZ"},
	{"name": "Sweden", "code": "SE"},
	{"name": "Switzerland", "code": "CH"},
	{"name": "Syrian Arab Republic", "code": "SY"},
	{"name": "Taiwan, Province of China", "code": "TW"},
	{"name": "Tajikistan", "code": "TJ"},
	{"name": "Tanzania, United Republic of", "code": "TZ"},
	{"name": "Thailand", "code": "TH"},
	{"name": "Timor-Leste", "code": "TL"},
	{"name": "Togo", "code": "TG"},
	{"name": "Tokelau", "code": "TK"},
	{"name": "Tonga", "code": "TO"},
	{"name": "Trinidad and Tobago", "code": "TT"},
	{"name": "Tunisia", "code": "TN"},
	{"name": "Turkey", "code": "TR"},
	{"name": "Turkmenistan", "code": "TM"},
	{"name": "Turks and Caicos Islands", "code": "TC"},
	{"name": "Tuvalu", "code": "TV"},
	{"name": "Uganda", "code": "UG"},
	{"name": "Ukraine", "code": "UA"},
	{"name": "United Arab Emirates", "code": "AE"},
	{"name": "United Kingdom", "code": "GB"},
	{"name": "United States", "code": "US"},
	{"name": "United States Minor Outlying Islands", "code": "UM"},
	{"name": "Uruguay", "code": "UY"},
	{"name": "Uzbekistan", "code": "UZ"},
	{"name": "Vanuatu", "code": "VU"},
	{"name": "Venezuela", "code": "VE"},
	{"name": "Viet Nam", "code": "VN"},
	{"name": "Virgin Islands, British", "code": "VG"},
	{"name": "Virgin Islands, U.S.", "code": "VI"},
	{"name": "Wallis and Futuna", "code": "WF"},
	{"name": "Western Sahara", "code": "EH"},
	{"name": "Yemen", "code": "YE"},
	{"name": "Zambia", "code": "ZM"},
	{"name": "Zimbabwe", "code": "ZW"}
];

/* harmony default export */ var jet_DataSet = (DataSet);

// CONCATENATED MODULE: ./src/jet/DataGenerator.js


/** @private
* @param {Object} fInfo
* @param {number=} seed
* @return {number}
*/
var _generateId = function(fInfo, seed) {
	if(seed == null) {
		seed = fInfo._id != null ? fInfo._id : -1;
		fInfo._id = ++seed;
	}
	return seed || 0;
};
/** @private
* @param {Object} fInfo
* @param {number=} seed
* @return {Date}
*/
var _generateDate1 = function(fInfo, seed) {
	if(seed == null) {
		return randDate(6e11, 16e11, seed);
	}
	return new Date(1e12 + 1e9 * seed);
};

var POW10 = [1, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10];

/** to format data including type, suffix, prefix, min, max, prec, fixedValue, changeOnly, members, isoDate.
* @type {Object}
* @private
*/
var _fieldInfo = {
	"X_RIC_NAME": {type: "string"},
	"CF_NAME": {type: "string", prefix: true, suffix: " Name"},
	"CF_LAST": {type: "number", min: 0.01, max: 1000, prec: 2},
	"PCTCHNG": {type: "number", min: -1, max: 1, prec: 2, suffix: "%"},
	"PCTCHNG2": {type: "float", min: -20, max: 20, prec: 2, suffix: "%"},
	"CF_CURR": {fixedValue: "USD"},
	"INDICATOR": {type: "number", min: 0, max: 5},
	"CF_TICK": {type: "number", min: 1, max: 3, changeOnly: true},
	"PRCTCK_1": {type: "set", members: ["\u21e7", "B\u21e7", "\u2191", "B\u2191", "26", "1", "\"1\"", "-1", "\u21e9", "B\u21e9", "\u2193", "B\u2193", "27", "2", "\"2\""] },
	"CF_NETCHNG": {type: "number", min: -100, max: 100},
	"CF_VOLUME": {type: "number", min: 0, max: 1e7},
	"RI_FLAG": {type: "set", members: ["R", "Q", "I", "_", ""]},
	"RI_CODE": {type: "number", min: 0, max: 2},
	"STATUS": {type: "number", min: 0, max: 6},
	"YRLOW": {type: "number", min: 0, max: 20},
	"YRHIGH": {type: "number", min: 200, max: 2000},
	"CFLOW": {type: "number", min: 0, max: 20},
	"CFHIGH": {type: "number", min: 200, max: 2000},
	"LOW_YLD": {type: "set", members: [undefined, 0, 1, 2, 3, 4, 5, 10, 11, 15, 20]}, // eslint-disable-line
	"HIGH_YLD": {type: "set", members: [undefined, 200, 300, 400, 500, 1000, 1500, 2000]}, // eslint-disable-line
	"CF_YIELD": {type: "set", members: [undefined, 0, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500]}, // eslint-disable-line
	"TR.IPODate": {type: "isoDate", min: Date.now() - 63072000000 /* 2 years back from now */, max: Date.now()},
	"TR.Volume": {type: "number", min: 2000, max: 1e7},
	"TR.Price52WeekHigh": {type: "number", min: 100, max: 300, prec: 2},
	"TR.Price52WeekLow": { type: "number", min: 1, max: 200, prec: 2 },
	// eslint-disable-next-line
	"TR.InvalidField": { type: "set", members: [undefined] },
	"percent": {type: "number", min: 0, max: 101 },
	"number_1": {type: "number", min: 1, max: 100 },
	"number_2": {type: "number", min: -100, max: 100 },
	"index4": {type: "number", min: 0, max: 4 },
	"index5": {type: "number", min: 0, max: 5 },
	"index10": {type: "number", min: 0, max: 10 },
	"index100": {type: "number", min: 0, max: 100 },
	"group3": {type: "set", members: ["Group_A", "Group_B", "Group_C"]},
	"group4": {type: "set", members: ["Group_1", "Group_2", "Group_3", "Group_4"]},
	"float_1": {type: "float", min: 0, max: 1, prec: 2 },
	"float_2": {type: "float", min: 0, max: 100, prec: 2 },
	"float_3": {type: "float", min: -1, max: 1, prec: 2 },
	"precision4": {type: "float", min: -10, max: 10, prec: 4 },
	"precision8": {type: "float", min: -100, max: 100, prec: 8 },
	"boolean": {type: "boolean"},
	"date": {type: "date", min: 15e11, max: 16e11 },
	"date1": {type: "function", generate: _generateDate1 },
	"ISODate": {type: "isoDateObject", min: Date.now() - 63072000000 /* 2 years back from now */, max: Date.now()},
	"word": {type: "string", min: 1, max: 1},
	"phrase": {type: "string", min: 2, max: 5},
	"words": {type: "string", min: 1, max: 20},
	"words1": {type: "string", min: 2, max: 8},
	"words2": {type: "string", min: 3, max: 10},
	"words3": {type: "string", min: 5, max: 15},
	"sentence": {type: "string", min: 8, max: 20},
	"id": {type: "function", generate: _generateId},
	"companyName": {type: "set", members: jet_DataSet.companyName },
	"industry": {type: "set", members: jet_DataSet.industry },
	"market": {type: "set", members: jet_DataSet.market },
	"country": {type: "set", members: jet_DataSet.country }
};

/** @public
* @param {string} field
* @return {!Object}
*/
var getFieldInfo = function(field) {
	return _fieldInfo[field] || {};
};

/** @public
* @param {string} field
* @param {Object|Function} options
*/
var addFieldInfo = function(field, options) {
	var opt = options;
	if(typeof options === "function") {
		opt = {
			type: "function",
			generate: options
		};
	}
	_fieldInfo[field] = opt;
};

/** Return pseudo random number in the range of 0 to 1 (exclusive of 1)
* @public
* @param {number} seed
* @return {number}
*/
var pseudoRandNumber = function(seed) {
	var rand = Math.sin(seed * 113) * 10000;
	rand *= rand;
	return rand - (rand | 0);
};

/** @private
* @param {*=} seed
* @return {number}
*/
var _getRandomNumber = function(seed) {
	return (typeof seed === "number") ? pseudoRandNumber(seed) : Math.random();
};

/** Return a floating-point random number in the range min - max (inclusive of min, but not max) with prec digits of precision.
* @public
* @param {number=} min=0
* @param {number=} max=100 Exclusive value
* @param {(number|null)=} prec
* @param {number=} seed
* @return {number}
*/
var randNumber = function(min, max, prec, seed) {
	if(!min) { min = 0; }
	if(max == null) { max = 100; }
	var v = (max - min) * _getRandomNumber(seed) + min;

	if(prec > 0) {
		var pow = POW10[prec];
		return Math.floor(v * pow) / pow;
	} else if(prec != null) {
		return Math.floor(v);
	} else {
		return v;
	}
};

/** Return an interger random number in the range min - max (inclusive of min and max).
* @public
* @param {number} min
* @param {number} max Inclusive value
* @param {number=} seed
* @return {number}
*/
var randInt = function(min, max, seed) {
	return randNumber(min, max + 1, 0, seed);
};

/** Return a integer random number in the range min - max (inclusive of min, but not max).
* @public
* @param {number=} min
* @param {number=} max Exclusive value
* @param {number=} seed
* @return {number}
*/
var randBetween = function(min, max, seed) {
	return randNumber(min, max, 0, seed);
};

/** Return a integer random number in the range 0 - max (exclusive of max). It is usefull in some cases for example, <br>
* if you want to get a random member of an array, <br>
* just get a random index via randIndex(ary.length).
* @public
* @param {number} max Exclusive value
* @param {number=} seed
* @return {number}
*/
var randIndex = function(max, seed) {
	return randBetween(0, max, seed);
};

/** @public
* @param {number=} seed
* @return {boolean}
*/
var randBoolean = function(seed) {
	return randInt(0, 1, seed) === 0;
};

/** Return a random member of set or single character in the range of A to Z
* @public
* @param {Array} set
* @param {number=} seed
* @return {*}
*/
var randMember = function(set, seed) {
	if(set) {
		var index = randIndex(set.length, seed);
		return set[index];
	}
	return String.fromCharCode(randInt(65, 90, seed));
};

/** @public
* @param {(number|Object)=} min minimum timestamp or date object
* @param {(number|Object)=} max minimum timestamp or date object
* @param {number=} seed
* @return {Date}
*/
var randDate = function(min, max, seed) {
	min = min || (Date.now() - 63072000000); //2 years back from now
	if(min instanceof Date) {
		min = min.getTime();
	}

	max = max || Date.now();
	if(max instanceof Date) {
		max = max.getTime();
	}

	var ts = randInt(0, (max - min) / 1000, seed);
	return new Date(min + (ts * 1000));
};

/** @public
* @param {number=} min
* @param {number=} max Exclusive value
* @param {number=} seed
* @return {string}
*/
var randString = function(min, max, seed) {
	var wordCount = (min < max) ? randBetween(min, max, seed) : min;

	var ary = new Array(wordCount);
	for(var i = 0; i < wordCount; ++i) {
		if(seed != null) {
			seed *= 1.17 * (i + 1);
		}
		var idx = randIndex(jet_DataSet.words.length, seed);
		ary[i] = jet_DataSet.words[idx];
	}
	return ary.join(" ");
};


/** @public
* @return {number}
*/
var getSeed = function() {
	return DataGenerator.seed;
};

/** @public
* @param {string|Array.<string>} fields
* @param {Object=} options
* @return {!Array.<Array>} 2D Array of data
*/
var generate = function(fields, options) {
	var result = _generate2DArray(fields, options, DataGenerator.seed);
	DataGenerator.seed = result.seed;

	return result.data;
};

/** WARNING: This method does not modify global seed
* @public
* @param {string|Array.<string>} fields
* @param {(number|Object)=} options Configuration object or seed number
* @param {number=} seed
* @return {!Object} Object with the given fields as its keys
*/
var generateRecord = function(fields, options, seed) {
	if(!Array.isArray(fields)) {
		fields = [fields + ""];
	}
	var config = {};
	if(options != null) {
		if(typeof options === "number") {
			seed = options;
		} else if(options) {
			config = options;
		}
	}

	var fieldCount = fields.length;
	var record = {};
	for(var i = 0; i < fieldCount; ++i) {
		var field = fields[i];
		record[field] = _generateFieldData(field, config, seed).value;
	}
	return record;
};

/** @public
* @param {string|Array.<string>} fields
* @param {(number|Object)=} options Configuration object or number of rows
* @return {!Array.<Object>} Array of object with the given fields as its keys
*/
var generateRecords = function(fields, options) {
	var result = _generate2DArray(fields, options, DataGenerator.seed);
	DataGenerator.seed = result.seed;
	fields = result.fields;
	var fieldCount = fields.length;
	var records = result.data;
	for(var i = records.length; --i >= 0;) {
		var ary = records[i];
		var record = {};
		for(var j = 0; j < fieldCount; ++j) {
			var field = fields[j];
			record[field] = ary[j];
		}
		records[i] = record;
	}
	return records;
};

/** WARNING: This method does not modify global seed
* @public
* @param {string} field
* @param {Object=} options
* @param {number=} seed
* @return {!Object} Object with value, formattedValue and other properties
*/
var generateQuoteData = function(field, options, seed) {
	var fInfo = _generateFieldData(field, options, seed);

	//formatting
	var fmtValue = fInfo.value + "";
	if(fInfo.prefix){
		if(typeof fInfo.prefix == "string") {
			fmtValue = fInfo.prefix + fmtValue;
		} else if(options.prefix) {
			fmtValue = options.prefix + " " + fmtValue;
		}
	}
	if(fInfo.suffix){
		fmtValue = fmtValue + fInfo.suffix;
	}

	if(fInfo.type === "string") {
		fInfo.value = fmtValue; // Make sure that original value has correct data type
	}
	fInfo.formattedValue = fmtValue;
	return fInfo;
};

/** @private
* @param {string|Array.<string>} fields
* @param {(number|Object)=} options Configuration object or number of rows
* @param {number=} seed Default seed for randomization
* @return {!Object}
*/
var _generate2DArray = function(fields, options, seed) {
	var config = {};
	var numRows = 0;
	if(options) {
		if(typeof options === "number") {
			numRows = config.numRows = options;
		} else {
			config = options;
			numRows = options.numRows || options.numRow || options.rowCount;
			if(options.seed != null) {
				seed = options.seed; // Seed from option object overwrite the default seed
				if(seed === -1) {
					seed = null; // Negative one is a special value for reseting seed
				}
			}
		}
	} // else case is "", false, 0, null, undefined
	if(!numRows) {
		numRows = 1;
	}

	if(!fields) {
		fields = [""]; // Default field
	} else if(!Array.isArray(fields)) {
		fields = [fields + ""];
	}
	var fieldCount = fields.length;

	var dataRows = [];
	for(var i = 0; i < numRows; ++i) {
		var row = [];
		// Same field in a single record must be produced to the same value
		for(var j = 0; j < fieldCount; ++j) {
			var field = fields[j];
			row.push(_generateFieldData(field, options, seed).value);
		}
		if(seed != null) {
			++seed;
		}
		dataRows.push(row);
	}

	return {
		data: dataRows, // Array.<Array>
		seed: seed, // nullable
		fields: fields
	};
};
/** Simple hash
* @private
* @param {string} str
* @return {number}
*/
var _hash = function(str) {
	var sum = 0;
	for(var i = str.length; --i >= 0;) {
		sum += str.charCodeAt(i) * (i + 0.9);
	}
	return sum;
};
/** @private
* @param {string} field
* @param {Object=} options
* @param {number=} seed
* @return {!Object} Object with value and other properties
*/
var _generateFieldData = function(field, options, seed) {
	var fInfo = getFieldInfo(field);
	var min = fInfo.min != null ? fInfo.min : 100; // WARNING: Default values are non-standard values
	var max = fInfo.max != null ? fInfo.max : 10000;
	var prec = fInfo.prec != null ? fInfo.prec : 0;
	var value;

	if(fInfo.fixedValue){
		value = fInfo.fixedValue;
	} else if(!fInfo.type) { // Unknown type
		if(seed != null) {
			if(field) {
				if(!fInfo.hash) {
					fInfo.hash = _hash(field);
					addFieldInfo(field, fInfo); // WARNING: modify global state
				}
				seed += fInfo.hash;
			}
		}
		value = randNumber(min, max, prec, seed);
	} else if(fInfo.type === "string") {
		if(fInfo.min != null || fInfo.max != null) {
			if(seed != null) {
				if(!fInfo.hash) {
					fInfo.hash = _hash(field);
				}
				seed += fInfo.hash;
			}
			value = randString(min, max, seed);
		} else {
			value = options.text || "";
		}
	} else if(fInfo.type === "set") {
		value = randMember(fInfo.members, seed);
	} else if(fInfo.type === "date") {
		value = randDate(min, max, seed);
	} else if(fInfo.type === "isoDate") {
		var date = randDate(min, max, seed);
		value = date.toISOString().slice(0, 10);
	} else if(fInfo.type === "isoDateObject") {
		value = randDate(min, max, seed);
		value = new Date(value.toISOString().slice(0, 10));
	} else if(fInfo.type === "boolean") {
		value = randBoolean(seed);
	} else if(fInfo.type === "function") {
		fInfo.field = field;
		value = fInfo.generate(fInfo, seed);
	} else { // Default is number
		value = randNumber(min, max, prec, seed);
	}
	fInfo.value = value;
	return fInfo;
};


/** @constructor
* @param {number=} seed
*/
var DataGenerator = function(seed) {
	this._seed = seed != null ? seed : null;
};

/** @type {number=}
* @private
*/
DataGenerator.prototype._seed = null;

/** @public
* @param {string|Array.<string>} fields
* @param {(number|Object)=} options
* @return {!Array.<Array>} 2D Array of data
*/
DataGenerator.prototype.generate = function(fields, options) {
	var result = _generate2DArray(fields, options, this._seed);
	this._seed = result.seed;

	return result.data;
};

/** @public
* @param {string|Array.<string>} fields
* @param {(number|Object)=} options
* @return {!Array.<Object>} Array of data object
*/
DataGenerator.prototype.generateRecords = function(fields, options) {
	var result = _generate2DArray(fields, options, this._seed);
	this._seed = result.seed;
	fields = result.fields;
	var fieldCount = fields.length;
	var records = result.data;
	for(var i = records.length; --i >= 0;) {
		var ary = records[i];
		var record = {};
		for(var j = 0; j < fieldCount; ++j) {
			var field = fields[j];
			record[field] = ary[j];
		}
		records[i] = record;
	}
	return records;
};

/** @public
* @param {string} field
* @param {Object=} options
* @return {!Object} Object with value, formattedValue and other properties
*/
DataGenerator.prototype.generateQuoteData = function(field, options) {
	var fInfo = generateQuoteData(field, options, this._seed);
	if(this._seed != null) {
		++this._seed;
	}

	return fInfo;
};
/** @public
* @return {?number}
*/
DataGenerator.prototype.getSeed = function() {
	return this._seed;
};

/** @public
* @param {number} seed
*/
DataGenerator.prototype.setSeed = function(seed) {
	if(typeof seed === "number") {
		this._seed = seed;
	}
};

/** @public
* @param {number=} min
* @param {number=} max Exclusive value
* @return {number}
*/
DataGenerator.prototype.randBetween = function(min, max) {
	var result = randBetween(min, max, this._seed);
	if(this._seed != null) {
		++this._seed;
	}
	return result;
};

/** @public
* @param {number} min
* @param {number} max Inclusive value
* @return {number}
*/
DataGenerator.prototype.randInt = function(min, max) {
	var result = randInt(min, max, this._seed);
	if(this._seed != null) {
		++this._seed;
	}
	return result;
};

/** @public
* @param {number} max Exclusive value
* @return {number}
*/
DataGenerator.prototype.randIndex = function(max) {
	var result = randIndex(max, this._seed);
	if(this._seed != null) {
		++this._seed;
	}
	return result;
};

/** @public
* @param {number=} min=0
* @param {number=} max=100 Exclusive value
* @param {(number|null)=} prec
* @return {number}
*/
DataGenerator.prototype.randNumber = function(min, max, prec) {
	var result = randNumber(min, max, prec, this._seed);
	if(this._seed != null) {
		++this._seed;
	}
	return result;
};

/** @public
* @return {boolean}
*/
DataGenerator.prototype.randBoolean = function() {
	var result = randBoolean(this._seed);
	if(this._seed != null) {
		++this._seed;
	}
	return result;
};

/** @public
* @param {Array} set
* @return {*}
*/
DataGenerator.prototype.randMember = function(set) {
	var result = randMember(set, this._seed);
	if(this._seed != null) {
		++this._seed;
	}
	return result;
};

/** @public
* @param {(number|Object)=} min minimum timestamp or date object
* @param {(number|Object)=} max minimum timestamp or date object
* @return {Date}
*/
DataGenerator.prototype.randDate = function(min, max) {
	var result = randDate(min, max, this._seed);
	if(this._seed != null) {
		++this._seed;
	}
	return result;
};

/** @public
* @param {number=} min
* @param {number=} max Exclusive value
* @return {string}
*/
DataGenerator.prototype.randString = function(min, max) {
	var result = randString(min, max, this._seed);
	if(this._seed != null) {
		++this._seed;
	}
	return result;
};

/** @type {?number}
* @public
*/
DataGenerator.seed = null;
/** @public
* @function
* @param {string|Array.<string>} fields
* @param {Object=} options
* @return {!Array.<Array>} 2D Array of data
*/
DataGenerator.generate = generate;
/** @public
* @function
* @param {string|Array.<string>} fields
* @param {Object=} options
* @return {Object} Object with the given fields as its keys
*/
DataGenerator.generateRecord = generateRecord;
/** @public
* @function
* @param {string|Array.<string>} fields
* @param {(number|Object)=} options Configuration object or seed number
* @return {!Array.<Object>} Array of object with the given fields as its keys
*/
DataGenerator.generateRecords = generateRecords;
/** @public
* @function
* @param {string} field
* @param {Object|Function} options
*/
DataGenerator.addFieldInfo = addFieldInfo;
/** Return a floating-point random number in the range min - max (inclusive of min, but not max) with prec digits of precision.
* @public
* @function
* @param {number=} min=0
* @param {number=} max=100 Exclusive value
* @param {(number|null)=} prec
* @param {number=} seed
* @return {number}
*/
DataGenerator.randNumber = randNumber;
/** Return an interger random number in the range min - max (inclusive of min and max).
* @public
* @function
* @param {number} min
* @param {number} max Inclusive value
* @param {number=} seed
* @return {number}
*/
DataGenerator.randInt = randInt;
/** Return a integer random number in the range min - max (inclusive of min, but not max).
* @public
* @function
* @param {number=} min
* @param {number=} max Exclusive value
* @param {number=} seed
* @return {number}
*/
DataGenerator.randBetween = randBetween;
/** Return a integer random number in the range 0 - max <br>
* (exclusive of max). It is usefull in some cases for example, <br>
* if you want to get a random member of an array, <br>
* just get a random index via randIndex(ary.length).
* @public
* @function
* @param {number} max Exclusive value
* @param {number=} seed
* @return {number}
*/
DataGenerator.randIndex = randIndex;
/** @public
* @function
* @param {number=} seed
* @return {boolean}
*/
DataGenerator.randBoolean = randBoolean;
/** Return a random member of set or single character in the range of A to Z
* @public
* @function
* @param {Array} set
* @param {number=} seed
* @return {*}
*/
DataGenerator.randMember = randMember;
/** @public
* @function
* @param {(number|Object)=} min minimum timestamp or date object
* @param {(number|Object)=} max minimum timestamp or date object
* @param {number=} seed
* @return {Date}
*/
DataGenerator.randDate = randDate;
/** @public
* @function
* @param {number=} min
* @param {number=} max
* @param {string=} subType "w"/"W" = word, "s"/"S" = sentence
* @param {number=} seed
* @return {string}
*/
DataGenerator.randString = randString;


/* harmony default export */ var jet_DataGenerator = (DataGenerator);

// CONCATENATED MODULE: ./src/jet/MockQuotes.js


/** @constructor */
var MockQuotes = function() {
};

/** @public
* @param {string=} opt_id
* @return {MockSubscription}
*/
MockQuotes.prototype.create = function(opt_id) {
	return new MockSubscription(opt_id);
};


/** @constructor
* @param {string=} opt_id
*/
var MockSubscription = function(opt_id) {
	this._onRowUpdated = this._onRowUpdated.bind(this);

	this._fieldMap = {};
	this._prevData = {};
	if(opt_id != null) {
		this["id"] = opt_id + "";
	} else {
		this["id"] = "_sub" + MockSubscription._runningId++;
	}
};

/** @type {Array.<string>}
* @private
*/
MockSubscription.prototype._rics = null;

/** @type {boolean}
* @private
*/
MockSubscription.prototype._isChain = false;

/** @type {Object}
* @private
*/
MockSubscription.prototype._fieldMap = null;

/** @type {Object}
* @private
*/
MockSubscription.prototype._prevData = null;

/** @type {Function}
* @private
*/
MockSubscription.prototype._updateHandler = null;

/** @type {number}
* @private
*/
MockSubscription.prototype._updateTimerId = 0;

/** @type {number}
* @private
*/
MockSubscription.prototype._updateInterval = 1000;

/** @type {number}
* @private
*/
MockSubscription._runningId = 0;

/** @public
* @param {Array.<string>} fields
* @return {MockSubscription}
*/
MockSubscription.prototype.formattedFields = function(fields) {
	for(var i = fields.length; --i >= 0;){
		this._fieldMap[fields[i]] = true;
	}
	return this;
};
/** @public
* @param {Array.<string>} fields
* @return {MockSubscription}
*/
MockSubscription.prototype.rawFields = function(fields) {
	for(var i = fields.length; --i >= 0;){
		this._fieldMap[fields[i]] = true;
	}
	return this;
};

/** @public
* @param {string} ric
* @return {MockSubscription}
*/
MockSubscription.prototype.chain = function(ric) {
	this._rics = Array.isArray(ric) ? ric[0] : [ric];
	this._isChain = true;
	return this;
};

/** @public
* @param {string|Array.<string>} ric
* @return {MockSubscription}
*/
MockSubscription.prototype.rics = function(ric) {
	this._rics = Array.isArray(ric) ? ric : [ric];
	return this;
};

/** @public
* @return {MockSubscription}
*/
MockSubscription.prototype.start = function() {
	this._onRowUpdated();
	return this;
};
/** @public
* @return {MockSubscription}
*/
MockSubscription.prototype.stop = function() {
	if(this._updateTimerId){
		clearInterval(this._updateTimerId);
		this._updateTimerId = 0;
	}
	return this;
};

/** @public
* @param {Function} handler
* @return {MockSubscription}
*/
MockSubscription.prototype.onNewRow = function(handler) {
	return this;
};
/** @public
* @param {Function} handler
* @return {MockSubscription}
*/
MockSubscription.prototype.onUpdate = function(handler) {
	this._updateHandler = handler;
	return this;
};
/** @public
* @param {Function} handler
* @return {MockSubscription}
*/
MockSubscription.prototype.onRemoveRow = function(handler) {
	return this;
};

/** @private */
MockSubscription.prototype._onRowUpdated = function() {
	if(!this._updateHandler){
		return;
	}
	//TODO: random which fields to be updated
	var len = this._rics ? this._rics.length : 0;
	var ric;
	if(len === 1) {
		ric = this._rics[0];
		this._updateHandler(this, ric, this._getUpdateData(ric));
	} else {
		for(var i = 0; i < len; ++i) {
			if(!randIndex(3)) {
				ric = this._rics[i];
				this._updateHandler(this, ric, this._getUpdateData(ric));
			}
		}
	}
	if(!this._updateTimerId) {
		this._updateTimerId = setInterval(this._onRowUpdated, this._updateInterval);
	}
};

/** @private
* @param {string} ric
* @return {Object}
*/
MockSubscription.prototype._getUpdateData = function(ric) {
	var data = {"id": this["id"]};
	var options = {"text": ric};
	for(var field in this._fieldMap) {
		var fInfo = generateQuoteData(field, options);
		var v = fInfo.value;
		var fv = fInfo.formattedValue;
		if(fInfo.changeOnly) {
			if(this._prevData[field] === v) {
				continue;
			}
		}
		this._prevData[field] = v;
		data[field] = {"raw": v, "formatted": fv || (v + "")};
	}
	return data;
};




// CONCATENATED MODULE: ./src/jet/MockQuotes2.js


/** @constructor */
var MockQuotes2 = function() {

};

/** @public
* @param {Object=} options
* @return {MockSubscriptions}
*/
MockQuotes2.prototype.create = function(options) {
	return new MockSubscriptions(options);
};

/** @public
* @return {boolean}
*/
MockQuotes2.prototype.isSkipHeaderSupported = function() {
	return true;
};


/** @constructor
* @param {Object=} options
*/
var MockSubscriptions = function(options) {
	if(options) {
		if(typeof options.minInterval === "number") {
			this._minInterval = options.minInterval;
		}

		if(typeof options.maxInterval === "number") {
			this._maxInterval = options.maxInterval;
		}

		if(typeof options.percentageDataUpdate === "number") {
			this._percentageDataUpdate = options.percentageDataUpdate / 100;
		}
	}
	this._onSubscriptionResponse = this._onSubscriptionResponse.bind(this);

	this._subMap = {};
	this._dataArray = [];
	this._dataMap = {}; // For chain
	this._fields = {};
	this._events = {};
	this._dataGen = new DataGenerator();
};

/* @private
* @type {number}
*/
MockSubscriptions.prototype._minInterval = 750;
/* @private
* @type {number}
*/
MockSubscriptions.prototype._maxInterval = 850;
/* @private
* @type {float}
*/
MockSubscriptions.prototype._percentageDataUpdate = 0.1; // 10% by default

/** @public
* @param {number=} min
* @param {number=} max
*/
MockSubscriptions.prototype.setUpdateInterval = function(min, max) {
	if(typeof min === "number") {
		this._minInterval = min;
	}

	if(typeof max === "number") {
		this._maxInterval = max;
	}
};
/** @public
* @param {number=} percent
*/
MockSubscriptions.prototype.setPercentageDataUpdate = function(percent) {
	if(typeof percent === "number") {
		this._percentageDataUpdate = Math.round(percent / 100);
	}
};

/** @public
* @param {number} seed
*/
MockSubscriptions.prototype.setSeed = function(seed) {
	this._dataGen.setSeed(seed);
};


/** @public
* @param {string} ric
* @param {string=} subId
* @return {string|null} subscription Id
*/
MockSubscriptions.prototype.addRic = function(ric, subId) {
	return this._addSymbol(ric, false, subId);
};
/** @public
* @param {string} ric
* @param {string=} subId
* @return {string|null} subscription Id
*/
MockSubscriptions.prototype.addChain = function(ric, subId) {
	return this._addSymbol(ric, true, subId);
};
/** @public
* @param {string|Array.<string>} fields
*/
MockSubscriptions.prototype.addFields = function(fields) {
	if(!fields) { return; }

	if(typeof fields === "string") {
		fields = [fields];
	}
	var len = fields.length;
	for(var i = 0; i < len; ++i) {
		this._fields[fields[i]] = true;
	}
};

/** @public
* @param {string} subId
*/
MockSubscriptions.prototype.removeSubscription = function(subId) {
	var sub = this._subMap[subId];
	if(!sub) {
		return;
	}
	this._dispatch("subscriptionRemoved", {"subs": [sub]});
	delete this._subMap[subId];
	var dataId = subId + sub["ric"];
	delete this._dataMap[dataId];
	this._dataArray.splice(this._dataArray.indexOf(dataId), 1);
	if(sub["chain"]) {
		var children = sub["children"];
		var len = children.length;
		for(var i = 0; i < len; ++i) {
			var child = children[i];
			delete this._dataMap[child["dataId"]];
			this._dataArray.splice(this._dataArray.indexOf(child["dataId"]), 1);
			child["parent"] = null;
		}
		sub["children"] = null;
	}
};
/** @public
* @function
*/
MockSubscriptions.prototype.removeRic = MockSubscriptions.prototype.removeSubscription;
/** @public
* @function
*/
MockSubscriptions.prototype.removeChain = MockSubscriptions.prototype.removeSubscription;
/** @public */
MockSubscriptions.prototype.removeAllSubscriptions = function() { // All channels will also be closed
	var working = this._working;
	this.stop();

	if(this._hasListener("subscriptionRemoved")) {
		var subs = [];
		for(var subId in this._subMap) {
			subs.push(this._subMap[subId]);
		}
		if(subs.length > 0) {
			this._dispatch("subscriptionRemoved", {"subs": subs});
		}
	}

	this._subMap = {};
	this._dataArray = []; // list of subscription id
	this._dataMap = {};
	if(working) {
		this.start();
	}
};

/** @public
* @param {string|Array.<string>} fields
*/
MockSubscriptions.prototype.removeFields = function(fields) {
	if(typeof fields === "string") {
		fields = [fields];
	}
	var len = fields.length;
	for(var i = 0; i < len; ++i) {
		var field = fields[i];
		if(this._fields[field]) {
			delete this._fields[field];
		}
	}
};
/** @public */
MockSubscriptions.prototype.removeAllFields = function() {
	var dirty = false;
	for(var field in this._fields) { // eslint-disable-line no-unused-vars
		dirty = true;
		break;
	}
	if(!dirty) { return; }
	this._fields = {};
};

/** @public */
MockSubscriptions.prototype.start = function() {
	this._working = true;
	this._connect();
};
/** @public */
MockSubscriptions.prototype.stop = function() {
	this._working = false;
	if(this._timerId >= 0) {
		window.clearTimeout(this._timerId);
		this._timerId = -1;
	}
};

/** @public */
MockSubscriptions.prototype.dispose = function() {
	this.stop();

	this._subMap = null;
	this._dataArray = null;
	this._dataMap = null;
	this._symbolToChannel = null;
	this._channelMap = null;
	this._channelCount = 0;

	this._fields = null;
	this._removedFields = null;
	this._events = null;
};

/** @public
* @param {string} type
* @param {Function} handler
*/
MockSubscriptions.prototype.addEventListener = function(type, handler) {
	if(!handler) { return; }

	var listeners = this._events[type];
	if(listeners) {
		if(listeners.indexOf(handler) < 0) {
			listeners.push(handler);
		}
	} else {
		this._events[type] = [handler];
	}
};
/** @public
* @param {string} type
* @param {Function} handler
*/
MockSubscriptions.prototype.removeEventListener = function(type, handler) {
	var listeners = (this._events) ? this._events[type] : null;
	if(!listeners) { return; }

	var at = listeners.indexOf(handler);
	if(at >= 0) {
		listeners.splice(at, 1);
	}
};
/** @public */
MockSubscriptions.prototype.removeAllEventListeners = function() {
	this._events = {};
};

/** @public
* @param {string} subId
* @return {Object} subscription object
*/
MockSubscriptions.prototype.getSubscription = function(subId) {
	return this._subMap[subId] || null;
};
/** @public
* @param {string} subId
* @return {string} string
*/
MockSubscriptions.prototype.getRic = function(subId) {
	var sub = this._subMap[subId];
	if(sub) {
		return sub["ric"];
	}
	return "";
};
/** @public
* @return {Object.<string, boolean>} field map
*/
MockSubscriptions.prototype.getAllFields = function() {
	return this._fields;
};
/** @public
* @param {string} field
* @return {boolean}
*/
MockSubscriptions.prototype.hasField = function(field) {
	return this._fields[field] || false;
};
/** @public
* @param {number} start
* @param {number} count
* @return {MockSubscriptions}
*/
MockSubscriptions.prototype.filter = function (start, count) {
	return this;
};

/** @private
* @param {string} ric
* @param {boolean} asChain
* @param {(string|number)=} subId
* @return {string|null} subscription id
*/
MockSubscriptions.prototype._addSymbol = function(ric, asChain, subId) {
	if(!ric) { return null; }

	if(!subId && subId !== 0) {
		do {
			subId = "_" + this._runningSubId++;
		} while(this._subMap[subId]);
	} else {
		subId += ""; // Convert to string
	}
	if(this._subMap[subId]) {
		window.console.log("WARNING: Cannot add ric with duplicate id");
		return null;
	}

	if(asChain) {
		ric = ric.replace("0#", ""); // The receiver is not expecting 0# symbol
	}
	var sub = {};
	sub["ric"] = ric;
	sub["chain"] = asChain;
	sub["id"] = subId;
	sub["dataId"] = subId + sub["ric"];
	this._subMap[subId] = sub; // Collect all user subscriptions
	this._dataMap[sub["dataId"]] = sub;
	this._dataArray.push(sub["dataId"]);
	if(asChain) {
		sub["children"] = [];
		var childCount = MockSubscriptions.simpleDigest(ric) % 10 + 4;
		for(var i = 0; i < childCount; ++i) {
			// Note that constituents should have no subscription object. They should share the same subscription as their parent. Hence we does not register it to the _subMap
			var childSub = {};
			childSub["ric"] = "Child_" + String.fromCharCode(65 + i);
			childSub["id"] = subId; // Child shares the same sub id as its chain parent
			childSub["dataId"] = subId + childSub["ric"];
			childSub["parent"] = sub; // This does not exist in real subscription
			sub["children"].push(childSub);

			var childSubId = childSub["dataId"];
			this._dataMap[childSubId] = childSub;
			if(this._dataArray.indexOf(childSubId) < 0) {
				this._dataArray.push(childSubId);
			}
		}
	}

	this._dispatch("subscriptionAdded", {"subs": [sub]});

	this._connect();
	return subId;
};
/** @public
* @param {string} str
* @return {number}
*/
MockSubscriptions.simpleDigest = function(str) {
	var len = str.length;
	var sum = 0;
	for(var i = 0; i < len; ++i) {
		sum += str.charCodeAt(i);
	}
	return sum;
};

/** @private */
MockSubscriptions.prototype._connect = function() {
	if(!this._working || this._timerId >= 0) { return; }
	var delay = this._dataGen.randInt(this._minInterval, this._maxInterval);
	this._timerId = window.setTimeout(this._onSubscriptionResponse, delay);
};

/** @private */
MockSubscriptions.prototype._onSubscriptionResponse = function() {
	this._timerId = -1;

	var dataArray = this._dataArray; // list of subscription id
	var len = dataArray.length;
	if(!len) { // No symbol has been added
		this._connect();
		return;
	}

	var minRow = (this._percentageDataUpdate - 0.02) * len;
	minRow = minRow > 0 ? minRow : 1; // update at least 1 row
	var maxRow = (this._percentageDataUpdate + 0.02) * len;
	maxRow = maxRow < len ? maxRow : len; // not more than all rows
	var numRows = this._dataGen.randInt(minRow, maxRow);
	var field, dataId;
	for(var i = 0; i < numRows; i++) {
		dataId = dataArray[this._dataGen.randIndex(len)];
		var sub = this._dataMap[dataId];
		var prevData = sub.prevData;

		var values = {};
		var options = {
			text: sub["ric"],
			prefix: sub["parent"] ? sub["parent"]["ric"] : ""
		};
		for(field in this._fields){
			var data = this._dataGen.generateQuoteData(field, options);
			if(prevData) {
				if(data.changeOnly) {
					if(prevData[field] === data.value) {
						continue;
					}
				}
				prevData[field] = data.value;
			}

			values[field] = data.value;
			values[field + "_FORMATTED"] = data.formattedValue;
		}

		var evtArg = {};
		evtArg["ric"] = sub["ric"];
		evtArg["values"] = values;
		evtArg["subId"] = sub["id"];
		if(!prevData) {
			prevData = {};
			sub.prevData = prevData;
			evtArg["type"] = "statusUpdated";

			values["STATUS"] =  1;
			values["STATUS_FORMATTED"] = this._statusMap["1"];
			values["SUB_ID"] = sub["id"];
			for(field in values) {
				prevData[field] = values[field];
			}
		}
		this._dispatch("dataChanged", evtArg);
	}

	this._connect();
};

/** @public
* @param {Array.<string>} feedNames
* @param {Function} handler
* @return {MockSubscriptions}
*/
MockSubscriptions.prototype.onFeedStatusChanged = function(feedNames, handler) {
	window.setTimeout(function() {
		handler([{"key": "Q", "name": "IDN_RDF", "state": "up"}]);
	}, 1000);
	return this;
};

/** @private
* @param {string} type
* @return {boolean}
*/
MockSubscriptions.prototype._hasListener = function(type) {
	var listeners = this._events[type];
	return listeners ? (listeners.length > 0) : false;
};
/** @private
* @param {string} type
* @param {Object} eventArg
*/
MockSubscriptions.prototype._dispatch = function(type, eventArg) {
	var listeners = this._events[type];
	if(!listeners) { return; }
	var len = listeners.length;
	for(var i = 0; i < len; ++i) {
		listeners[i](eventArg);
	}
};

/** @type {Object.<string, Object>}
* @private
*/
MockSubscriptions.prototype._subMap = null;
/** @type {Object.<string, boolean>}
* @private
*/
MockSubscriptions.prototype._fields = null;
/** @type {Object.<string, Array.<Function>>}
* @private
*/
MockSubscriptions.prototype._events = null;

/** @type {boolean}
* @private
*/
MockSubscriptions.prototype._working = false;
/** @type {number}
* @private
*/
MockSubscriptions.prototype._timerId = -1;

/** @type {number}
* @private
*/
MockSubscriptions.prototype._runningSubId = 0;

/** @type {Object.<string, string>}
* @private
*/
MockSubscriptions.prototype._statusMap = {
	"0": "PENDING",
	"1": "OK",
	"2": "STALE",
	"3": "INFO",
	"4": "CLOSED",
	"5": "DELAYED",
	"6": "NOPERM",
	"7": "REACHLIMIT",
	"8": "C_COMPLETE",
	"9": "C_CLOSE",
	"10": "C_EMPTY",
	"11": "C_NOTCHAIN",
	"12": "C_ERR",
	"13": "C_NOBEGIN",
	"14": "C_NOEND"
};



// CONCATENATED MODULE: ./src/jet/MockArchive.js
/** @constructor */
var MockArchive = function() {
	this._data = {};
};
/** @type {!Object}
*/
MockArchive.prototype._data = null;
/** @public */
MockArchive.prototype.clear = function() {
	this._data = {};
};
/** @public
* @param {string} key
* @param {*} val
*/
MockArchive.prototype.put = function(key, val) {
	if(key) {
		this._data[key] = val;
	}
};
/** @public
* @param {string} key
* @return {*}
*/
MockArchive.prototype.get = function(key) {
	var val = this._data[key];
	return (val != null) ? val : "";
};

/** @public
* @return {Array.<string>} key
*/
MockArchive.prototype.getAllKeys = function() {
	return Object.keys(this._data);
};
/** @public */
MockArchive.prototype.save = function() {
};
/** @public
* @param {Function} func Function that take an item and return boolean
* @return {!Array}
*/
MockArchive.prototype.filter = function(func) {
	var out_ary = [];
	if(func) {
		for(var key in this._data) {
			var val = this._data[key];
			if(func(val)) {
				out_ary.push(val);
			}
		}
	}
	return out_ary;
};



// CONCATENATED MODULE: ./src/jet/mockDataAPI.js


/**
* @private
* @type {object}
*/
var _invalidFieldDict = {
	'TR.NonExistField': true,
	'TR.NotExistField': true,
	'CF_IGNORE_FIELD': true
};

/** to mock invalid fields.
* @public
* @param {Array<string>|string} fields ex. TR.NonExistField, CF_IGNORE_FIELD
*/
function setInvalidFields(fields) {
	if (fields && typeof fields === 'string') {
		_invalidFieldDict[fields] = true;
	} else if (Array.isArray(fields)) {
		for (var i = 0; i < fields.length; i++) {
			_invalidFieldDict[fields[i]] = true;
		}
	}
}

var dataGen = new DataGenerator();

/** @private
* @namespace
*/
var DataGrid = {};

/** @private
* @function
* @param {Object} payload
* @return {Promise}
*/
DataGrid.request = function (payload) {
	var i, f;
	var instruments = payload.instruments;
	var len = instruments.length;
	var fields = payload.fields;

	// _invalidFieldDict is a dictionary of non exist field
	// so we must remove invalid field to make "mocking api" return result more like a "real api".
	var invalidDict = _invalidFieldDict;
	fields = [];
	for (i = 0; i < payload.fields.length; i++) {
		f = payload.fields[i];
		if (!invalidDict[f.name]) {
			fields.push(f);
		}
	}

	// build data
	var data2D = dataGen.generate(fields, len);
	for(i = 0; i < len; ++i) { // Insert instrument on each responsed row
		data2D[i].unshift(instruments[i]);
	}

	// build header
	var headers = [{
		"displayName": "Instrument"
	}];
	for (i = 0; i < fields.length; i++) {
		f = fields[i];
		headers.push({
			"displayName": f.name,
			"field": f.name.toUpperCase() // server only return in uppercase
		});
	}

	return Promise.resolve(JSON.stringify({
		data: data2D,
		headers: [headers]
	}));
};

/** @public
* @function
* @param {string} dataType
* @return {Promise}
*/
var mockDataAPI = function (dataType) {
	if (dataType === "datagrid") {
		return Promise.resolve(DataGrid);
	} else {
		return Promise.reject(dataType + " is not supported.");
	}
};

/** to mock invalid fields.
* @public
* @param {Array<string>} fields ex. TR.NonExistField, CF_IGNORE_FIELD
*/
mockDataAPI.setInvalidFields = setInvalidFields;



// CONCATENATED MODULE: ./src/jet/MockJET.js





/** @constructor */
var MockJET = function() {
	this["Quotes"] = new MockQuotes();
	this["Quotes2"] = new MockQuotes2();
	this["Archive"] = new MockArchive();
	this["ContainerDescription"] = true;
	this["Data"] = mockDataAPI;
};

/** @public
* @param {Object=} opt_obj
* @return {MockJET}
*/
MockJET.prototype.init = function(opt_obj) {
	return this;
};

/** @public
* @param {Function} handler
* @return {MockJET}
*/
MockJET.prototype.onLoad = function(handler) {
	setTimeout(handler, 2000);
	return this;
};

/** @public
* @param {Object} obj
* @return {MockJET}
*/
MockJET.prototype.navigate = function(obj) {
	return this;
};
/** @public
* @param {string} name
* @param {string} type
* @param {string} property
*/
MockJET.prototype.appHit = function(name, type, property) {
};

/** @public
* @return {Promise}
*/
MockJET.prototype.getUserInfo = function() {
	return Promise.resolve({
		UUID: 'PAXTRA'
	});
};

/** @public
* @param {Array} contextAry
*/
MockJET.prototype.contextChange = function(contextAry) {
};

/* harmony default export */ var jet_MockJET = (MockJET);


// EXTERNAL MODULE: ./src/Util.js
var Util = __webpack_require__(0);

// CONCATENATED MODULE: ./src/jet/MockRTK.js




var RTKDataGrid = Object(Util["b" /* cloneObject */])(DataGrid);

/** @public
* @param {Object} payload
* @return {*}
*/
RTKDataGrid.request = function (payload) {
	var p = DataGrid.request(payload);
	return p.then(function (res) {
		return JSON.parse(res);
	});
};

var MockRTK = {
	Quotes: new MockQuotes2(),
	Data: {
		DataGrid: RTKDataGrid,
		setInvalidFields: setInvalidFields
	},
	init: init,
	ready: function () {
		return this.init();
	}
};

/** @public
* @param {Object=} opt_obj
* @return {MockRTK}
*/
function init(opt_obj) {
	return new Promise(function (resolve, reject) {
		setTimeout(function(){
			resolve(MockRTK);
		}, 300);
	});
}



// CONCATENATED MODULE: ./src/jet/index.js




var tr = window["tr"];
if(!tr) {
	tr = window["tr"] = {};
}

tr.MockJET = MockJET;
tr.DataGenerator = DataGenerator;
tr.MockRTK = MockRTK;




/***/ })
/******/ ]);